<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Somuns ` Tao</title>
  
  <subtitle>Java Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://somunstao.github.io/"/>
  <updated>2020-05-01T02:17:04.419Z</updated>
  <id>https://somunstao.github.io/</id>
  
  <author>
    <name>陈涛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot：自动配置解析</title>
    <link href="https://somunstao.github.io/2020/05/03/SpringBoot21%EF%BC%9A%20%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://somunstao.github.io/2020/05/03/SpringBoot21%EF%BC%9A%20%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-02T16:00:00.000Z</published>
    <updated>2020-05-01T02:17:04.419Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p99.pstatp.com/large/pgc-image/15367619528862cca2a0df9" alt="img"></p><p>原文链接：<a href="https://www.cnblogs.com/leihuazhe/p/7743479.html" target="_blank" rel="noopener">https://www.cnblogs.com/leihuazhe/p/7743479.html</a></p><hr><hr><blockquote><p>SpringBoot 自动配置主要通过 <code>@EnableAutoConfiguration</code>, <code>@Conditional</code>, <code>@EnableConfigurationProperties</code> 或者 <code>@ConfigurationProperties</code> 等几个注解来进行自动配置完成的。</p><p><code>@EnableAutoConfiguration</code> 开启自动配置，主要作用就是调用 <code>Spring-Core</code> 包里的 <code>loadFactoryNames()</code>，将 <code>autoconfig</code> 包里的已经写好的自动配置加载进来。</p><p><code>@Conditional</code> 条件注解，通过判断类路径下有没有相应配置的 <code>jar</code> 包来确定是否加载和自动配置这个类。</p><p><code>@EnableConfigurationProperties</code> 的作用就是，给自动配置提供具体的配置参数，只需要写在 <code>application.properties</code> 中，就可以通过映射写入配置类的 <code>POJO</code> 属性中。</p></blockquote><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>@Enable*注释并不是<code>SpringBoot</code>新发明的注释，Spring 3框架就引入了这些注释，用这些注释替代XML配置文件。比如：<br><code>@EnableTransactionManagement</code>注释，它能够声明事务管理<br><code>@EnableWebMvc</code>注释，它能启用Spring MVC<br><code>@EnableScheduling</code>注释，它可以初始化一个调度器。</p><h4 id="这些注释事实上都是简单的配置，通过-Import注释导入。"><a href="#这些注释事实上都是简单的配置，通过-Import注释导入。" class="headerlink" title="这些注释事实上都是简单的配置，通过@Import注释导入。"></a><strong>这些注释事实上都是简单的配置，通过<code>@Import</code>注释导入</strong>。</h4><h5 id="从启动类的-SpringBootApplication进入，在里面找到了-EnableAutoConfiguration"><a href="#从启动类的-SpringBootApplication进入，在里面找到了-EnableAutoConfiguration" class="headerlink" title="从启动类的@SpringBootApplication进入，在里面找到了@EnableAutoConfiguration,"></a>从启动类的@SpringBootApplication进入，在里面找到了@EnableAutoConfiguration,</h5><p><img src="http://pic.hzways.com/1.png" alt="1.png"></p><p><img src="http://pic.hzways.com/2.png" alt="2.png"></p><h5 id="EnableAutoConfiguration里通过-Import导入了EnableAutoConfigurationImportSelector"><a href="#EnableAutoConfiguration里通过-Import导入了EnableAutoConfigurationImportSelector" class="headerlink" title="@EnableAutoConfiguration里通过@Import导入了EnableAutoConfigurationImportSelector,"></a>@EnableAutoConfiguration里通过@Import导入了<code>EnableAutoConfigurationImportSelector</code>,</h5><p><img src="http://pic.hzways.com/3.png" alt="3.png"></p><h5 id="进入他的父类AutoConfigurationImportSelector"><a href="#进入他的父类AutoConfigurationImportSelector" class="headerlink" title="进入他的父类AutoConfigurationImportSelector"></a>进入他的父类<code>AutoConfigurationImportSelector</code></h5><p><img src="http://pic.hzways.com/4.png" alt="4.png"></p><h5 id="找到selectImports-方法，他调用了getCandidateConfigurations-方法，在这里，这个方法又调用了Spring-Core包中的loadFactoryNames-方法。这个方法的作用是，会查询META-INF-spring-factories文件中包含的JAR文件。"><a href="#找到selectImports-方法，他调用了getCandidateConfigurations-方法，在这里，这个方法又调用了Spring-Core包中的loadFactoryNames-方法。这个方法的作用是，会查询META-INF-spring-factories文件中包含的JAR文件。" class="headerlink" title="找到selectImports()方法，他调用了getCandidateConfigurations()方法，在这里，这个方法又调用了Spring Core包中的loadFactoryNames()方法。这个方法的作用是，会查询META-INF/spring.factories文件中包含的JAR文件。"></a>找到<code>selectImports()</code>方法，他调用了<code>getCandidateConfigurations()</code>方法，在这里，这个方法又调用了Spring Core包中的<code>loadFactoryNames()</code>方法。这个方法的作用是，会查询<code>META-INF/spring.factories</code>文件中包含的<code>JAR</code>文件。</h5><p><img src="http://pic.hzways.com/5.png" alt="5.png"></p><h5 id="当找到spring-factories文件后，SpringFactoriesLoader将查询配置文件命名的属性。"><a href="#当找到spring-factories文件后，SpringFactoriesLoader将查询配置文件命名的属性。" class="headerlink" title="当找到spring.factories文件后，SpringFactoriesLoader将查询配置文件命名的属性。"></a>当找到spring.factories文件后，SpringFactoriesLoader将查询配置文件命名的属性。</h5><p><img src="http://pic.hzways.com/6.png" alt="6.png"></p><p><img src="http://pic.hzways.com/7.png" alt="7.png"></p><h5 id="Jar文件在org-springframework-boot-autoconfigure的spring-factories"><a href="#Jar文件在org-springframework-boot-autoconfigure的spring-factories" class="headerlink" title="Jar文件在org.springframework.boot.autoconfigure的spring.factories"></a><code>Jar</code>文件在<code>org.springframework.boot.autoconfigure的spring.factories</code></h5><p><img src="http://pic.hzways.com/8.png" alt="8.png"></p><h5 id="spring-factories内容如下-截取部分-在这个文件中，可以看到一系列Spring-Boot自动配置的列表"><a href="#spring-factories内容如下-截取部分-在这个文件中，可以看到一系列Spring-Boot自动配置的列表" class="headerlink" title="spring.factories内容如下(截取部分),在这个文件中，可以看到一系列Spring Boot自动配置的列表"></a><code>spring.factories</code>内容如下(截取部分),在这个文件中，可以看到一系列Spring Boot自动配置的列表</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br></pre></td></tr></table></figure><h3 id="下面我们来看自动配置redis的细节，RedisAutoConfiguration："><a href="#下面我们来看自动配置redis的细节，RedisAutoConfiguration：" class="headerlink" title="下面我们来看自动配置redis的细节，RedisAutoConfiguration："></a>下面我们来看自动配置redis的细节，RedisAutoConfiguration：</h3><h3 id="RedisAutoConfiguration"><a href="#RedisAutoConfiguration" class="headerlink" title="RedisAutoConfiguration"></a>RedisAutoConfiguration</h3><p><img src="http://pic.hzways.com/redis.png" alt="redis.png"></p><p>这个类进行了简单的Spring配置，声明了Redis所需典型Bean，和其它很多类一样，重度依赖于Spring Boot注释：<br>1）@ConditionOnClass激活一个配置，当类路径中存在这个类时才会配置该类<br>2）@EnableConfigurationProperties自动映射一个POJO到Spring Boot配置文件（默认是application.properties文件）的属性集。<br>3）@ConditionalOnMissingBean启用一个Bean定义，但必须是这个Bean之前未定义过才有效。<br>还可以使用@ AutoConfigureBefore注释、@AutoConfigureAfter注释来定义这些配置类的载入顺序。</p><h4 id="着重了解-Conditional注释，Spring-4框架的新特性"><a href="#着重了解-Conditional注释，Spring-4框架的新特性" class="headerlink" title="着重了解@Conditional注释，Spring 4框架的新特性"></a>着重了解@Conditional注释，Spring 4框架的新特性</h4><p>此注释使得只有在特定条件满足时才启用一些配置。SrpingBoot的AutoConfig大量使用了@Conditional，它会根据运行环境来动态注入Bean。这里介绍一些@Conditional的使用和原理，并自定义@Conditional来自定义功能。</p><ul><li>@Conditional是SpringFramework的功能，SpringBoot在它的基础上定义了</li><li>@ConditionalOnClass，@ConditionalOnProperty等一系列的注解来实现更丰富的内容。</li></ul><h4 id="具体几个-Conditon-注解的含义"><a href="#具体几个-Conditon-注解的含义" class="headerlink" title="具体几个@Conditon*注解的含义"></a>具体几个@Conditon*注解的含义</h4><h6 id="ConditionalOnBean"><a href="#ConditionalOnBean" class="headerlink" title="@ConditionalOnBean"></a>@ConditionalOnBean</h6><p>仅仅在当前上下文中存在某个对象时，才会实例化一个Bean</p><h6 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass"></a>@ConditionalOnClass</h6><p>某个class位于类路径上，才会实例化一个Bean)，该注解的参数对应的类必须存在，否则不解析该注解修饰的配置类</p><h6 id="ConditionalOnExpression"><a href="#ConditionalOnExpression" class="headerlink" title="@ConditionalOnExpression"></a>@ConditionalOnExpression</h6><p>当表达式为true的时候，才会实例化一个Bean</p><h6 id="ConditionalOnMissingBean"><a href="#ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h6><p>仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean，该注解表示，如果存在它修饰的类的bean，则不需要再创建这个bean，可以给该注解传入参数例如@ConditionOnMissingBean(name = “example”)，这个表示如果name为“example”的bean存在，这该注解修饰的代码块不执行</p><h6 id="ConditionalOnMissingClass"><a href="#ConditionalOnMissingClass" class="headerlink" title="@ConditionalOnMissingClass"></a>@ConditionalOnMissingClass</h6><p>某个class类路径上不存在的时候，才会实例化一个Bean</p><h6 id="ConditionalOnNotWebApplication"><a href="#ConditionalOnNotWebApplication" class="headerlink" title="@ConditionalOnNotWebApplication"></a>@ConditionalOnNotWebApplication</h6><p>不是web应用时，才会执行</p><hr><h3 id="2-Properties系列注释"><a href="#2-Properties系列注释" class="headerlink" title="2.Properties系列注释"></a>2.Properties系列注释</h3><p>@EnableConfigurationProperties<br>@ConfigurationProperties(prefix = “may”)</p><p>在需要注入配置的类上加上这个注解，prefix的意思是，以该前缀打头的配置，以下是例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"may"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String gender;  </span><br><span class="line">    </span><br><span class="line">   <span class="comment">//省略setter,getter方法</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml中的配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">may</span><br><span class="line">   name: youjie</span><br><span class="line">   gender: man</span><br></pre></td></tr></table></figure><p>如果不用系统初始的application.yml配置类，而是使用自己的如youjie.yml，可以如下配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"may"</span>,locations = <span class="string">"classpath:youjie.yml"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> String gender;  </span><br><span class="line">    </span><br><span class="line">   <span class="comment">//省略setter,getter方法</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过时：由于Spring-boot 1.5.2版本移除了，locations这个属性,因此上述这种方式在最新的版本中过时。<br>@PropertySource</p><p>Spring-boot 1.5.2版本之后，采用下面这种方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@PropertySource只能加载.properties文件，需要将上面的yml文件，改为.properties文件</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:may.properties"</span>)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"may"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> String name;  </span><br><span class="line">        <span class="keyword">private</span> String gender;  </span><br><span class="line">        </span><br><span class="line">       <span class="comment">//省略setter,getter方法</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@EnableConfigurationProperties</p><p>最后注意在spring Boot入口类加上@EnableConfigurationProperties</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;User<span class="class">.<span class="keyword">class</span>,<span class="title">User2</span>.<span class="title">class</span>&#125;)  </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DemoApplication</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里@EnableConfigurationProperties({User.class,User2.class}) 可以省略</p><p><img src="http://pic.hzways.com/config.png" alt="config.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SpringBoot 的 自动配置得益于 SpringFramework 强大的支撑，框架早已有很多工具和注解可以自动装配 Bean 。SpringBoot 通过 一个封装，将市面上通用的组件直接写好了配置类。当我们程序去依赖了这些组件的 jar 包后，启动 SpringBoot应用，于是自动加载开始了。</p><p>我们也可以定义自己的自动装配组件，依赖之后，Spring直接可以加载我们定义的 starter 。笔者将在后续文章中进行编码和解读。</p>]]></content>
    
    <summary type="html">
    
      you can &quot;just run&quot;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://SomunsTao.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://SomunsTao.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot：启动原理解析</title>
    <link href="https://somunstao.github.io/2020/05/03/SpringBoot21%EF%BC%9A%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <id>https://somunstao.github.io/2020/05/03/SpringBoot21%EF%BC%9A%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/</id>
    <published>2020-05-02T16:00:00.000Z</published>
    <updated>2020-05-01T05:05:32.289Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p99.pstatp.com/large/pgc-image/15367619528862cca2a0df9" alt="img"></p><p>原文链接：<a href="https://www.cnblogs.com/xiaoxi/p/7999885.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxi/p/7999885.html</a></p><p>原作者：平凡希</p><hr><hr><h1 id="spring-boot：启动原理解析"><a href="#spring-boot：启动原理解析" class="headerlink" title="spring boot：启动原理解析"></a><a href="https://www.cnblogs.com/xiaoxi/p/7999885.html" target="_blank" rel="noopener">spring boot：启动原理解析</a></h1><p>我们开发任何一个Spring Boot项目，都会用到如下的启动类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 @SpringBootApplication</span><br><span class="line">2 public class Application &#123;</span><br><span class="line">3     public static void main(String[] args) &#123;</span><br><span class="line">4         SpringApplication.run(Application.class, args);</span><br><span class="line">5     &#125;</span><br><span class="line">6 &#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。</p><p><strong>一、SpringBootApplication背后的秘密</strong></p><p>@SpringBootApplication注解是Spring Boot的核心注解，它其实是一个组合注解：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 @Target(ElementType.TYPE)</span><br><span class="line"> 2 @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line"> 3 @Documented</span><br><span class="line"> 4 @Inherited</span><br><span class="line"> 5 @SpringBootConfiguration</span><br><span class="line"> 6 @EnableAutoConfiguration</span><br><span class="line"> 7 @ComponentScan(excludeFilters &#x3D; &#123;</span><br><span class="line"> 8         @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; TypeExcludeFilter.class),</span><br><span class="line"> 9         @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line">10 public @interface SpringBootApplication &#123;</span><br><span class="line">11 ...</span><br><span class="line">12 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>虽然定义使用了多个Annotation进行了原信息标注，但实际上重要的只有三个Annotation：</p><ul><li>@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>即 @SpringBootApplication = (默认属性)@Configuration + @EnableAutoConfiguration + @ComponentScan。</p><p>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 @Configuration</span><br><span class="line">2 @EnableAutoConfiguration</span><br><span class="line">3 @ComponentScan</span><br><span class="line">4 public class Application &#123;</span><br><span class="line">5     public static void main(String[] args) &#123;</span><br><span class="line">6         SpringApplication.run(Application.class, args);</span><br><span class="line">7     &#125;</span><br><span class="line">8 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>每次写这3个比较累，所以写一个@SpringBootApplication方便点。接下来分别介绍这3个Annotation。</p><p><strong>1、@Configuration</strong></p><p>   这里的@Configuration对我们来说不陌生，它就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration，SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类。</p><p>举几个简单例子回顾下，XML跟config配置方式的区别：</p><p><strong>（1）表达形式层面</strong></p><p>基于XML配置的方式是这样：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">2 &lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">3        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">4        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.0.xsd&quot;</span><br><span class="line">5        default-lazy-init&#x3D;&quot;true&quot;&gt;</span><br><span class="line">6     &lt;!--bean定义--&gt;</span><br><span class="line">7 &lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>而基于JavaConfig的配置方式是这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 @Configuration</span><br><span class="line">2 public class MockConfiguration&#123;</span><br><span class="line">3     &#x2F;&#x2F;bean定义</span><br><span class="line">4 &#125;</span><br></pre></td></tr></table></figure><p>任何一个标注了@Configuration的Java类定义都是一个JavaConfig配置类。</p><p><strong>（2）注册bean定义层面</strong></p><p>基于XML的配置形式是这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;bean id&#x3D;&quot;mockService&quot; class&#x3D;&quot;..MockServiceImpl&quot;&gt;</span><br><span class="line">2     ...</span><br><span class="line">3 &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>而基于JavaConfig的配置形式是这样的：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 @Configuration</span><br><span class="line">2 public class MockConfiguration&#123;</span><br><span class="line">3     @Bean</span><br><span class="line">4     public MockService mockService()&#123;</span><br><span class="line">5         return new MockServiceImpl();</span><br><span class="line">6     &#125;</span><br><span class="line">7 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p><p><strong>（3）表达依赖注入关系层面</strong></p><p>为了表达bean与bean之间的依赖关系，在XML形式中一般是这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;bean id&#x3D;&quot;mockService&quot; class&#x3D;&quot;..MockServiceImpl&quot;&gt;</span><br><span class="line">2     &lt;propery name &#x3D;&quot;dependencyService&quot; ref&#x3D;&quot;dependencyService&quot; &#x2F;&gt;</span><br><span class="line">3 &lt;&#x2F;bean&gt;</span><br><span class="line">4 </span><br><span class="line">5 &lt;bean id&#x3D;&quot;dependencyService&quot; class&#x3D;&quot;DependencyServiceImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>而基于JavaConfig的配置形式是这样的：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 @Configuration</span><br><span class="line"> 2 public class MockConfiguration&#123;</span><br><span class="line"> 3     @Bean</span><br><span class="line"> 4     public MockService mockService()&#123;</span><br><span class="line"> 5         return new MockServiceImpl(dependencyService());</span><br><span class="line"> 6     &#125;</span><br><span class="line"> 7     </span><br><span class="line"> 8     @Bean</span><br><span class="line"> 9     public DependencyService dependencyService()&#123;</span><br><span class="line">10         return new DependencyServiceImpl();</span><br><span class="line">11     &#125;</span><br><span class="line">12 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>如果一个bean的定义依赖其他bean，则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p><hr><p>@Configuration：提到@Configuration就要提到他的搭档@Bean。使用这两个注解就可以创建一个简单的spring配置类，可以用来替代相应的xml配置文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;beans&gt; </span><br><span class="line">2     &lt;bean id &#x3D; &quot;car&quot; class&#x3D;&quot;com.test.Car&quot;&gt; </span><br><span class="line">3         &lt;property name&#x3D;&quot;wheel&quot; ref &#x3D; &quot;wheel&quot;&gt;&lt;&#x2F;property&gt; </span><br><span class="line">4     &lt;&#x2F;bean&gt; </span><br><span class="line">5     &lt;bean id &#x3D; &quot;wheel&quot; class&#x3D;&quot;com.test.Wheel&quot;&gt;&lt;&#x2F;bean&gt; </span><br><span class="line">6 &lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>相当于：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 @Configuration </span><br><span class="line"> 2 public class Conf &#123; </span><br><span class="line"> 3     @Bean </span><br><span class="line"> 4     public Car car() &#123; </span><br><span class="line"> 5         Car car &#x3D; new Car(); </span><br><span class="line"> 6         car.setWheel(wheel()); </span><br><span class="line"> 7         return car; </span><br><span class="line"> 8     &#125;</span><br><span class="line"> 9     </span><br><span class="line">10     @Bean </span><br><span class="line">11     public Wheel wheel() &#123; </span><br><span class="line">12         return new Wheel(); </span><br><span class="line">13     &#125; </span><br><span class="line">14 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>@Configuration的注解类标识这个类可以使用Spring IoC容器作为bean定义的来源。</p><p>@Bean注解告诉Spring，一个带有@Bean的注解方法将返回一个对象，该对象应该被注册为在Spring应用程序上下文中的bean。</p><p><strong>2、@ComponentScan</strong></p><p>   @ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p><p>   我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p><p>注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p><p><strong>3、@EnableAutoConfiguration</strong></p><p>  个人感觉@EnableAutoConfiguration这个Annotation最为重要，所以放在最后来解读，大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，<strong>借助@Import的支持，收集和注册特定场景相关的bean定义。</strong></p><ul><li>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。</li><li>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。</li></ul><p>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！</p><p>  @EnableAutoConfiguration会根据类路径中的jar依赖为项目进行自动配置，如：添加了spring-boot-starter-web依赖，会自动添加Tomcat和Spring MVC的依赖，Spring Boot会对Tomcat和Spring MVC进行自动配置。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171207162607144-677920507.png" alt="img"></p><p> @EnableAutoConfiguration作为一个复合Annotation，其自身定义关键信息如下：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 @SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="line"> 2 @Target(ElementType.TYPE)</span><br><span class="line"> 3 @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line"> 4 @Documented</span><br><span class="line"> 5 @Inherited</span><br><span class="line"> 6 @AutoConfigurationPackage</span><br><span class="line"> 7 @Import(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"> 8 public @interface EnableAutoConfiguration &#123;</span><br><span class="line"> 9     ...</span><br><span class="line">10 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>  其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。就像一只“八爪鱼”一样，借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171207163759488-1739516792.png" alt="img"></p><p><strong>自动配置幕后英雄：SpringFactoriesLoader详解</strong></p><p>SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 public abstract class SpringFactoriesLoader &#123;</span><br><span class="line"> 2     &#x2F;&#x2F;...</span><br><span class="line"> 3     public static &lt;T&gt; List&lt;T&gt; loadFactories(Class&lt;T&gt; factoryClass, ClassLoader classLoader) &#123;</span><br><span class="line"> 4         ...</span><br><span class="line"> 5     &#125;</span><br><span class="line"> 6 </span><br><span class="line"> 7 </span><br><span class="line"> 8     public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) &#123;</span><br><span class="line"> 9         ....</span><br><span class="line">10     &#125;</span><br><span class="line">11 &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名org.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key，获取对应的一组@Configuration类。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171208161556484-1145877030.jpg" alt="img"></p><p>上图就是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。</p><p>所以，@EnableAutoConfiguration自动配置的魔法骑士就变成了：<strong>从classpath中搜寻所有的META-INF/spring.factories配置文件，并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。</strong></p><p><strong>二、深入探索SpringApplication执行流程</strong></p><p>SpringApplication的run方法的实现是我们本次旅程的主要线路，该方法的主要流程大体可以归纳如下：</p><p>1） 如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：</p><ul><li>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。</li><li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。</li><li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。</li><li>推断并设置main方法的定义类。</li></ul><p>2） SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。</p><p>3） 创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。</p><p>4） 遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。</p><p>5） 如果SpringApplication的showBanner属性被设置为true，则打印banner。</p><p>6） 根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</p><p>7） ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。</p><p>8） 遍历调用所有SpringApplicationRunListener的contextPrepared()方法。</p><p>9） 最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</p><p>10） 遍历调用所有SpringApplicationRunListener的contextLoaded()方法。</p><p>11） 调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。</p><p>12） 查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。</p><p>13） 正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）</p><p>去除事件通知点后，整个流程如下：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171212151321051-993064506.jpg" alt="img"></p><hr><p>本文以调试一个实际的SpringBoot启动程序为例，参考流程中主要类类图，来分析其启动逻辑和自动化配置原理。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213142128051-351399772.png" alt="img"></p><p><strong>总览：</strong>   </p><p>  上图为SpringBoot启动结构图，我们发现启动流程主要分为三个部分，第一部分进行SpringApplication的初始化模块，配置一些基本的环境变量、资源、构造器、监听器，第二部分实现了应用具体的启动方案，包括启动流程的监听模块、加载配置环境模块、及核心的创建上下文环境模块，第三部分是自动化配置模块，该模块作为springboot自动配置核心，在后面的分析中会详细讨论。在下面的启动程序中我们会串联起结构中的主要功能。</p><p><strong>启动：</strong></p><p>   每个SpringBoot程序都有一个主入口，也就是main方法，main里面调用SpringApplication.run()启动整个spring-boot程序，该方法所在类需要使用@SpringBootApplication注解，以及@ImportResource注解(if need)，@SpringBootApplication包括三个注解，功能如下：</p><p>@EnableAutoConfiguration：SpringBoot根据应用所声明的依赖来对Spring框架进行自动配置。</p><p>@SpringBootConfiguration(内部为@Configuration)：被标注的类等于在spring的XML配置文件中(applicationContext.xml)，装配所有bean事务，提供了一个spring的上下文环境。</p><p>@ComponentScan：组件扫描，可自动发现和装配Bean，默认扫描SpringApplication的run方法里的Booter.class所在的包路径下文件，所以最好将该启动类放到根包路径下。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213143558363-1466265945.png" alt="img"></p><p><strong>SpringBoot启动类</strong></p><p>首先进入run方法</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213144051754-1827098906.png" alt="img"></p><p>run方法中去创建了一个SpringApplication实例，在该构造方法内，我们可以发现其调用了一个初始化的initialize方法</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213144232926-834887500.png" alt="img"></p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213144259160-129693850.png" alt="img"></p><p>这里主要是为SpringApplication对象赋一些初值。构造函数执行完毕后，我们回到run方法</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213144447066-1033381024.png" alt="img"></p><p>该方法中实现了如下几个关键步骤：</p><p>1.创建了应用的监听器SpringApplicationRunListeners并开始监听</p><p>2.加载SpringBoot配置环境(ConfigurableEnvironment)，如果是通过web容器发布，会加载StandardEnvironment，其最终也是继承了ConfigurableEnvironment，类图如下</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213144808707-1335729370.png" alt="img"></p><p>可以看出，*Environment最终都实现了PropertyResolver接口，我们平时通过environment对象获取配置文件中指定Key对应的value方法时，就是调用了propertyResolver接口的getProperty方法</p><p>3.配置环境(Environment)加入到监听器对象中(SpringApplicationRunListeners)</p><p>4.创建run方法的返回对象：ConfigurableApplicationContext(应用配置上下文)，我们可以看一下创建方法：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213145353394-1416082242.png" alt="img"></p><p>方法会先获取显式设置的应用上下文(applicationContextClass)，如果不存在，再加载默认的环境配置（通过是否是web environment判断），默认选择AnnotationConfigApplicationContext注解上下文（通过扫描所有注解类来加载bean），最后通过BeanUtils实例化上下文对象，并返回。</p><p>ConfigurableApplicationContext类图如下：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213154313488-1411301156.png" alt="img"></p><p>主要看其继承的两个方向：</p><p>LifeCycle：生命周期类，定义了start启动、stop结束、isRunning是否运行中等生命周期空值方法</p><p>ApplicationContext：应用上下文类，其主要继承了beanFactory(bean的工厂类)</p><p>5.回到run方法内，prepareContext方法将listeners、environment、applicationArguments、banner等重要组件与上下文对象关联</p><p>6.接下来的refreshContext(context)方法(初始化方法如下)将是实现spring-boot-starter-*(mybatis、redis等)自动化配置的关键，包括spring.factories的加载，bean的实例化等核心工作。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171213154943754-336827902.png" alt="img"></p><p>   配置结束后，Springboot做了一些基本的收尾工作，返回了应用环境上下文。回顾整体流程，Springboot的启动，主要创建了配置环境(environment)、事件监听(listeners)、应用上下文(applicationContext)，并基于以上条件，在容器中开始实例化我们需要的Bean，至此，通过SpringBoot启动的程序已经构造完成，接下来我们来探讨自动化配置是如何实现。</p><hr><p><strong>自动化配置：</strong></p><p>之前的启动结构图中，我们注意到无论是应用初始化还是具体的执行过程，都调用了SpringBoot自动配置模块。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219161544990-1859845219.png" alt="img"></p><p>SpringBoot自动配置模块</p><p>  该配置模块的主要使用到了SpringFactoriesLoader，即Spring工厂加载器，该对象提供了loadFactoryNames方法，入参为factoryClass和classLoader，即需要传入上图中的工厂类名称和对应的类加载器，方法会根据指定的classLoader，加载该类加器搜索路径下的指定文件，即spring.factories文件，传入的工厂类为接口，而文件中对应的类则是接口的实现类，或最终作为实现类，所以文件中一般为如下图这种一对多的类名集合，获取到这些实现类的类名后，loadFactoryNames方法返回类名集合，方法调用方得到这些集合后，再通过反射获取这些类的类对象、构造方法，最终生成实例。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219162725615-751500087.png" alt="img"></p><p>工厂接口与其若干实现类接口名称</p><p>下图有助于我们形象理解自动配置流程。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219162844787-1104034109.png" alt="img"></p><p>SpringBoot自动化配置关键组件关系图 </p><p>  mybatis-spring-boot-starter、spring-boot-starter-web等组件的META-INF文件下均含有spring.factories文件，自动配置模块中，SpringFactoriesLoader收集到文件中的类全名并返回一个类全名的数组，返回的类全名通过反射被实例化，就形成了具体的工厂实例，工厂实例来生成组件具体需要的bean。</p><p>之前我们提到了EnableAutoConfiguration注解，其类图如下：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219163356100-1697141132.png" alt="img"></p><p>可以发现其最终实现了ImportSelector(选择器)和BeanClassLoaderAware(bean类加载器中间件)，重点关注一下AutoConfigurationImportSelector的selectImports方法。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219163452318-1362759499.png" alt="img"></p><p>  该方法在springboot启动流程——bean实例化前被执行，返回要实例化的类信息列表。我们知道，如果获取到类信息，spring自然可以通过类加载器将类加载到jvm中，现在我们已经通过spring-boot的starter依赖方式依赖了我们需要的组件，那么这些组建的类信息在select方法中也是可以被获取到的，不要急我们继续向下分析。</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219164025334-1624354890.png" alt="img"></p><p>该方法中的getCandidateConfigurations方法，通过方法注释了解到，其返回一个自动配置类的类名列表，方法调用了loadFactoryNames方法，查看该方法</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219164224912-643901744.png" alt="img"></p><p>  在上面的代码可以看到自动配置器会根据传入的factoryClass.getName()到项目系统路径下所有的spring.factories文件中找到相应的key，从而加载里面的类。我们就选取这个mybatis-spring-boot-autoconfigure下的spring.factories文件</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219164557240-1466961312.png" alt="img"></p><p>进入org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration中，主要看一下类头：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171219164818162-646159475.png" alt="img"></p><p>发现Spring的@Configuration，俨然是一个通过注解标注的springBean，继续向下看，</p><p>@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class})这个注解的意思是：当存在SqlSessionFactory.class, SqlSessionFactoryBean.class这两个类时才解析MybatisAutoConfiguration配置类，否则不解析这一个配置类，make sence，我们需要mybatis为我们返回会话对象，就必须有会话工厂相关类。</p><p>@CondtionalOnBean(DataSource.class)：只有处理已经被声明为bean的dataSource。</p><p>@ConditionalOnMissingBean(MapperFactoryBean.class)这个注解的意思是如果容器中不存在name指定的bean则创建bean注入，否则不执行（该类源码较长，篇幅限制不全粘贴）</p><p>   以上配置可以保证sqlSessionFactory、sqlSessionTemplate、dataSource等mybatis所需的组件均可被自动配置，@Configuration注解已经提供了Spring的上下文环境，所以以上组件的配置方式与Spring启动时通过mybatis.xml文件进行配置起到一个效果。通过分析我们可以发现，只要一个基于SpringBoot项目的类路径下存在SqlSessionFactory.class, SqlSessionFactoryBean.class，并且容器中已经注册了dataSourceBean，就可以触发自动化配置，意思说我们只要在maven的项目中加入了mybatis所需要的若干依赖，就可以触发自动配置，但引入mybatis原生依赖的话，每集成一个功能都要去修改其自动化配置类，那就得不到开箱即用的效果了。所以Spring-boot为我们提供了统一的starter可以直接配置好相关的类，触发自动配置所需的依赖(mybatis)如下：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171220160748068-2010633643.png" alt="img"></p><p>这里是截取的mybatis-spring-boot-starter的源码中pom.xml文件中所有依赖：</p><p><img src="https://images2017.cnblogs.com/blog/249993/201712/249993-20171220160934240-319846263.png" alt="img"></p><p> 因为maven依赖的传递性，我们只要依赖starter就可以依赖到所有需要自动配置的类，实现开箱即用的功能。也体现出Springboot简化了Spring框架带来的大量XML配置以及复杂的依赖管理，让开发人员可以更加关注业务逻辑的开发。</p>]]></content>
    
    <summary type="html">
    
      you can &quot;just run&quot;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://SomunsTao.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://SomunsTao.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Vue 13： VUE复习</title>
    <link href="https://somunstao.github.io/2020/04/23/Vue%2013%EF%BC%9A%20VUE%E5%A4%8D%E4%B9%A0/"/>
    <id>https://somunstao.github.io/2020/04/23/Vue%2013%EF%BC%9A%20VUE%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-08-01T15:19:56.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue实战"><a href="#Vue实战" class="headerlink" title="Vue实战"></a>Vue实战</h1><h2 id="1-Vue-引言"><a href="#1-Vue-引言" class="headerlink" title="1. Vue 引言"></a>1. Vue 引言</h2><blockquote><p><code>渐进式</code> JavaScript 框架   –摘自官网</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 渐进式</span></span><br><span class="line"><span class="bullet">   1. </span>易用  html css javascript</span><br><span class="line"><span class="bullet">   2. </span>高效  开发前端页面 非常高效 </span><br><span class="line"><span class="bullet">   3. </span>灵活  开发灵活 多样性</span><br><span class="line"></span><br><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">Vue 是一个javascript 框架</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 后端服务端开发人员: </span></span><br><span class="line"><span class="code">Vue 渐进式javascript框架: 让我们通过操作很少的DOM,甚至不需要操作页面中任何DOM元素,就很容易的完成数据和视图绑定  双向绑定 MVVM  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">注意: 日后在使用Vue过程中页面中不要在引入Jquery框架</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">htmlcss---&gt;javascript -----&gt;jquery----&gt;angularjs -----&gt; Vue</span></span><br><span class="line"> </span><br><span class="line"> # Vue 作者</span><br><span class="line">  尤雨溪   国内的</span><br></pre></td></tr></table></figure><hr><h2 id="2-Vue入门"><a href="#2-Vue入门" class="headerlink" title="2. Vue入门"></a>2. Vue入门</h2><h3 id="2-1-下载Vuejs"><a href="#2-1-下载Vuejs" class="headerlink" title="2.1    下载Vuejs"></a>2.1    下载Vuejs</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开发版本:</span></span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/生产版本:</span></span><br><span class="line"><span class="regexp">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Vue第一个入门应用"><a href="#2-2-Vue第一个入门应用" class="headerlink" title="2.2 Vue第一个入门应用"></a>2.2 Vue第一个入门应用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       &#123;&#123; msg &#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">           &#123;&#123; username &#125;&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">           el:<span class="string">"#app"</span>,  <span class="comment">//element 用来给Vue实例定义一个作用范围</span></span></span><br><span class="line"><span class="actionscript">           data:&#123;      <span class="comment">//用来给Vue实例定义一些相关数据</span></span></span><br><span class="line"><span class="actionscript">               msg:<span class="string">"百知欢迎你,期待你的加入!"</span>,</span></span><br><span class="line"><span class="actionscript">               username:<span class="string">"hello Vue!"</span>,</span></span><br><span class="line"><span class="actionscript">               pwd :<span class="string">"12345"</span>,</span></span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">1.vue实例(对象)中el属性: 代表Vue的作用范围  日后在Vue的作用范围内都可以使用Vue的语法</span></span><br><span class="line"><span class="code">2.vue实例(对象)中data属性: 用来给Vue实例绑定一些相关数据, 绑定的数据可以通过&#123;&#123;变量名&#125;&#125;在Vue作用范围内取出</span></span><br><span class="line"><span class="code">3.在使用&#123;&#123;&#125;&#125;进行获取data中数据时,可以在&#123;&#123;&#125;&#125;中书写表达式,运算符,调用相关方法,以及逻辑运算等</span></span><br><span class="line"><span class="code">4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是推荐使用 id选择器</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-v-text和v-html"><a href="#3-v-text和v-html" class="headerlink" title="3. v-text和v-html"></a>3. v-text和v-html</h2><h3 id="3-1-v-text"><a href="#3-1-v-text" class="headerlink" title="3.1 v-text"></a>3.1 v-text</h3><blockquote><p><code>v-text</code>:用来获取data中数据将数据以文本的形式渲染到指定标签内部             类似于javascript 中 innerText</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> &gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">              message:<span class="string">"百知欢迎您"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">1.&#123;&#123;&#125;&#125;(插值表达式)和v-text获取数据的区别在于 </span></span><br><span class="line"><span class="code">a.使用v-text取值会将标签中原有的数据覆盖 使用插值表达式的形式不会覆盖标签原有的数据</span></span><br><span class="line"><span class="code">b.使用v-text可以避免在网络环境较差的情况下出现插值闪烁</span></span><br></pre></td></tr></table></figure><h3 id="3-2-v-html"><a href="#3-2-v-html" class="headerlink" title="3.2 v-html"></a>3.2 v-html</h3><blockquote><p><code>v-html</code>:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似于javascript中 innerHTML</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span>xxxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                message:"<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">''</span>&gt;</span>百知欢迎您<span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-vue中事件绑定-v-on"><a href="#4-vue中事件绑定-v-on" class="headerlink" title="4.vue中事件绑定(v-on)"></a>4.vue中事件绑定(v-on)</h2><h3 id="4-1-绑定事件基本语法"><a href="#4-1-绑定事件基本语法" class="headerlink" title="4.1 绑定事件基本语法"></a>4.1 绑定事件基本语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我改变年龄"</span> <span class="attr">v-on:click</span>=<span class="string">"changeage"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">              message:<span class="string">"hello 欢迎来到百知课堂!"</span>,</span></span><br><span class="line">              age:23,</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          methods:&#123;  <span class="comment">//methods 用来定义vue中时间</span></span></span><br><span class="line"><span class="actionscript">              changeage:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                  alert(<span class="string">'点击触发'</span>);</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">事件  事件源:发生事件dom元素  事件: 发生特定的动作  click....  监听器  发生特定动作之后的事件处理程序 通常是js中函数</span></span><br><span class="line"><span class="code">1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如  v-on:click</span></span><br><span class="line"><span class="code">2.在v-on:事件名的赋值语句中是当前时间触发调用的函数名</span></span><br><span class="line"><span class="code">3.在vue中事件的函数统一定义在Vue实例的methods属性中</span></span><br><span class="line"><span class="code">4.在vue定义的事件中this指的就是当前的Vue实例,日后可以在事件中通过使用this获取Vue实例中相关数据</span></span><br></pre></td></tr></table></figure><h3 id="4-2-Vue中事件的简化语法"><a href="#4-2-Vue中事件的简化语法" class="headerlink" title="4.2 Vue中事件的简化语法"></a>4.2 Vue中事件的简化语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"通过v-on事件修改年龄每次+1"</span> <span class="attr">v-on:click</span>=<span class="string">"changeage"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"通过@绑定时间修改年龄每次-1"</span> @<span class="attr">click</span>=<span class="string">"editage"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">         el:<span class="string">"#app"</span>,  <span class="comment">//element: 用来指定vue作用范围</span></span></span><br><span class="line">         data:&#123;</span><br><span class="line">             age:23,</span><br><span class="line"><span class="actionscript">         &#125;,    <span class="comment">//data   : 用来定义vue实例中相关数据</span></span></span><br><span class="line">         methods:&#123;</span><br><span class="line"><span class="actionscript">             changeage:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                 <span class="keyword">this</span>.age++;</span></span><br><span class="line">             &#125;,</span><br><span class="line"><span class="actionscript">             editage:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                 <span class="keyword">this</span>.age--;</span></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">         &#125;  <span class="comment">//methods: 用来定义事件的处理函数</span></span></span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">1.日后在vue中绑定事件时可以通过@符号形式 简化  v-on 的事件绑定</span></span><br></pre></td></tr></table></figure><h3 id="4-3-Vue事件函数两种写法"><a href="#4-3-Vue事件函数两种写法" class="headerlink" title="4.3 Vue事件函数两种写法"></a>4.3 Vue事件函数两种写法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"改变count的值"</span> @<span class="attr">click</span>=<span class="string">"changecount"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">         el:<span class="string">"#app"</span>,</span></span><br><span class="line">         data:&#123;</span><br><span class="line">             count:1,</span><br><span class="line">         &#125;,</span><br><span class="line">         methods:&#123;</span><br><span class="line">             /*changecount:function()&#123;</span><br><span class="line"><span class="actionscript">                 <span class="keyword">this</span>.count++;</span></span><br><span class="line">             &#125;*/</span><br><span class="line">             changecount()&#123;</span><br><span class="line"><span class="actionscript">                 <span class="keyword">this</span>.count++;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">1.在Vue中事件定义存在两种写法  一种是 函数名:function()&#123;&#125;  推荐    一种是  函数名()&#123;&#125; 推荐</span></span><br></pre></td></tr></table></figure><h3 id="4-4-Vue事件参数传递"><a href="#4-4-Vue事件参数传递" class="headerlink" title="4.4 Vue事件参数传递"></a>4.4 Vue事件参数传递</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"改变count为指定的值"</span> @<span class="attr">click</span>=<span class="string">"changecount(23,'xiaohei')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">         el:<span class="string">"#app"</span>,</span></span><br><span class="line">         data:&#123;</span><br><span class="line">             count:1,</span><br><span class="line">         &#125;,</span><br><span class="line">         methods:&#123;</span><br><span class="line"><span class="actionscript">             <span class="comment">//定义changecount</span></span></span><br><span class="line">             changecount(count,name)&#123;</span><br><span class="line"><span class="actionscript">                 <span class="keyword">this</span>.count = count;</span></span><br><span class="line">                 alert(name);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">1.在使用事件时,可以直接在事件调用出给事件进行参数传递,在事件定义出通过定义对应变量接收传递的参数</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-v-show-v-if-v-bind"><a href="#5-v-show-v-if-v-bind" class="headerlink" title="5.v-show v-if v-bind"></a>5.v-show v-if v-bind</h2><h3 id="5-1-v-show"><a href="#5-1-v-show" class="headerlink" title="5.1 v-show"></a>5.1 v-show</h3><blockquote><p><code>v-show</code>:用来控制页面中某个标签元素是否展示        底层使用控制是 display 属性</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        v-show: 用来控制标签展示还是隐藏的</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"false"</span>&gt;</span>百知教育欢迎你的加入!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span>百知教育欢迎你的加入这是vue中定义变量true!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"展示隐藏标签"</span> @<span class="attr">click</span>=<span class="string">"showmsg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            show:<span class="literal">false</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">//定义时间</span></span></span><br><span class="line">            showmsg()&#123;</span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.show =  !<span class="keyword">this</span>.show;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">1.在使用v-show时可以直接书写boolean值控制元素展示,也可以通过变量控制标签展示和隐藏</span></span><br><span class="line"><span class="code">2.在v-show中可以通过boolean表达式控制标签的展示课隐藏</span></span><br></pre></td></tr></table></figure><h3 id="5-2-v-if"><a href="#5-2-v-if" class="headerlink" title="5.2 v-if"></a>5.2 v-if</h3><blockquote><p><code>v-if</code>: 用来控制页面元素是否展示                底层控制是DOM元素    操作DOM</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"false"</span>&gt;</span>百知教育<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>百知教育欢迎你的加入<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            show:<span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-v-bind"><a href="#5-3-v-bind" class="headerlink" title="5.3 v-bind"></a>5.3 v-bind</h3><blockquote><p><code>v-bind</code>: 用来绑定标签的属性从而通过vue动态修改标签的属性</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">v-bind:title</span>=<span class="string">"msg"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;aa:showCss&#125;"</span>  <span class="attr">src</span>=<span class="string">"baizhilogo.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">"百知教育官方logo!!!!"</span>,</span></span><br><span class="line"><span class="actionscript">            showCss:<span class="literal">true</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-v-bind-简化写法"><a href="#5-4-v-bind-简化写法" class="headerlink" title="5.4 v-bind 简化写法"></a>5.4 v-bind 简化写法</h3><blockquote><p>​    vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 <code>v-bind:属性名</code> 简化之后 <code>:属性名</code></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">:title</span>=<span class="string">"msg"</span> <span class="attr">:class</span>=<span class="string">"&#123;aa:showCss&#125;"</span>  <span class="attr">:src</span>=<span class="string">"src"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"动态控制加入样式"</span> @<span class="attr">click</span>=<span class="string">"addCss"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"改变图片"</span> @<span class="attr">click</span>=<span class="string">"changeSrc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">"百知教育官方logo!!!!"</span>,</span></span><br><span class="line"><span class="actionscript">            showCss:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            src:<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1583490365568&amp;di=52a82bd614cd4030f97ada9441bb2d0e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Flogo%2F20160714%2F820a68f65b4e4a3634085055779c000c.jpg"</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addCss()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.showCss= !<span class="keyword">this</span>.showCss;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            changeSrc()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.src = <span class="string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1925088662,1336364220&amp;fm=26&amp;gp=0.jpg"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-v-for的使用"><a href="#6-v-for的使用" class="headerlink" title="6.v-for的使用"></a>6.v-for的使用</h2><blockquote><p><code>v-for</code>: 作用就是用来对对象进行遍历的(数组也是对象的一种)</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; user.name &#125;&#125; &#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       通过v-for遍历对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in user"</span>&gt;</span></span><br><span class="line">        &#123;&#123;index&#125;&#125; : &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        通过v-for遍历数组</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"a,index in arr"</span> &gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125; &#123;&#123;a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        通过v-for遍历数组中对象</span></span><br><span class="line"><span class="comment">        :key 便于vue内部做重用和排序</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user,index in users"</span> <span class="attr">:key</span>=<span class="string">"user.id"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index+1&#125;&#125; &#123;&#123; user.name &#125;&#125;  === &#123;&#123; user.age &#125;&#125; ==== &#123;&#123; user.content &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            user:&#123;name:<span class="string">"小陈"</span>,age:<span class="number">23</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            arr:[<span class="string">"北京校区"</span>, <span class="string">"天津校区"</span>, <span class="string">"河南校区"</span>],</span></span><br><span class="line">            users:[</span><br><span class="line"><span class="actionscript">                &#123;id:<span class="string">"1"</span>,name:<span class="string">"xiaochen"</span>,age:<span class="number">23</span>,content:<span class="string">"我曾经也是一个单纯的少年!"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;id:<span class="string">"2"</span>,name:<span class="string">"小白"</span>,age:<span class="number">23</span>,content:<span class="string">"我曾经是一个邪恶的少年!"</span>&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">1.在使用v-for的时候一定要注意加入:key 用来给vue内部提供重用和排序的唯一key</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-v-model-双向绑定"><a href="#7-v-model-双向绑定" class="headerlink" title="7 .v-model 双向绑定"></a>7 .v-model 双向绑定</h2><blockquote><p><code>v-model</code>: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"改变Data中值"</span> @<span class="attr">click</span>=<span class="string">"changeValue"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeValue()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message=<span class="string">'百知教育!'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">1.使用v-model指令可以实现数据的双向绑定 </span></span><br><span class="line"><span class="code">2.所谓双向绑定 表单中数据变化导致vue实例data数据变化   vue实例中data数据的变化导致表单中数据变化 称之为双向绑定</span></span><br><span class="line"></span><br><span class="line"><span class="section"># MVVM架构  双向绑定机制</span></span><br><span class="line"><span class="code">Model: 数据  Vue实例中绑定数据</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">VM:   ViewModel  监听器</span></span><br><span class="line"></span><br><span class="line"><span class="code">View:  页面  页面展示的数据</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-事件修饰符"><a href="#8-事件修饰符" class="headerlink" title="8. 事件修饰符"></a>8. 事件修饰符</h2><blockquote><p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.常用的事件修饰符</span></span><br><span class="line"><span class="code">.stop</span></span><br><span class="line"><span class="code">.prevent</span></span><br><span class="line"><span class="code">.capture</span></span><br><span class="line"><span class="code">.self</span></span><br><span class="line"><span class="code">.once</span></span><br><span class="line"><span class="code">.passive</span></span><br></pre></td></tr></table></figure><h3 id="8-1-stop事件修饰符"><a href="#8-1-stop事件修饰符" class="headerlink" title="8.1 stop事件修饰符"></a>8.1 stop事件修饰符</h3><blockquote><p>用来阻止事件冒泡</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aa"</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用来阻止事件冒泡--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line"><span class="actionscript">                alert(<span class="string">'button被点击了'</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            divClick()&#123;</span><br><span class="line"><span class="actionscript">                alert(<span class="string">'div被点击了'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-prevent-事件修饰符"><a href="#8-2-prevent-事件修饰符" class="headerlink" title="8.2 prevent 事件修饰符"></a>8.2 prevent 事件修饰符</h3><blockquote><p>用来阻止标签的默认行为</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用来阻止事件的默认行为--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baizhibest.com/"</span> @<span class="attr">click.prevent</span>=<span class="string">"aClick"</span>&gt;</span>百知教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-self-事件修饰符"><a href="#8-3-self-事件修饰符" class="headerlink" title="8.3 self 事件修饰符"></a>8.3 self 事件修饰符</h3><blockquote><p>用来针对于当前标签的事件触发     ===========&gt; 只触发自己标签的上特定动作的事件     只关心自己标签上触发的事件 不监听事件冒泡</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--只触发标签自身的事件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aa"</span> @<span class="attr">click.self</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--用来阻止事件冒泡--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮1"</span> @<span class="attr">click</span>=<span class="string">"btnClick1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4-once-事件修饰符"><a href="#8-4-once-事件修饰符" class="headerlink" title="8.4 once 事件修饰符"></a>8.4 once 事件修饰符</h3><blockquote><p>once 一次 作用:  就是让指定事件只触发一次</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">.prevent : 用来阻止事件的默认行为</span></span><br><span class="line"><span class="comment">.once    : 用来只执行一次特定的事件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baizhibest.com/"</span> @<span class="attr">click.prevent.once</span>=<span class="string">"aClick"</span>&gt;</span>百知教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="9-按键修饰符"><a href="#9-按键修饰符" class="headerlink" title="9. 按键修饰符"></a>9. 按键修饰符</h2><blockquote><p>作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 按键修饰符</span></span><br><span class="line"><span class="code">.enter</span></span><br><span class="line"><span class="code">.tab</span></span><br><span class="line"><span class="code">.delete (捕获“删除”和“退格”键)</span></span><br><span class="line"><span class="code">.esc</span></span><br><span class="line"><span class="code">.space</span></span><br><span class="line"><span class="code">.up</span></span><br><span class="line"><span class="code">.down</span></span><br><span class="line"><span class="code">.left</span></span><br><span class="line"><span class="code">.right</span></span><br></pre></td></tr></table></figure><h3 id="9-1-enter-回车键"><a href="#9-1-enter-回车键" class="headerlink" title="9.1 enter 回车键"></a>9.1 enter 回车键</h3><blockquote><p>用来在触发回车按键之后触发的事件</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> @<span class="attr">keyup.enter</span>=<span class="string">"keyups"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-2-tab-键"><a href="#9-2-tab-键" class="headerlink" title="9.2 tab 键"></a>9.2 tab 键</h3><blockquote><p>用来捕获到tab键执行到当前标签是才会触发</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.tab</span>=<span class="string">"keytabs"</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="10-Axios-基本使用"><a href="#10-Axios-基本使用" class="headerlink" title="10. Axios 基本使用"></a>10. Axios 基本使用</h2><h3 id="10-1-引言"><a href="#10-1-引言" class="headerlink" title="10.1 引言"></a>10.1 引言</h3><blockquote><p><code>Axios</code> 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染       页面局部更新技术  Ajax</p></blockquote><h3 id="10-2-Axios-第一个程序"><a href="#10-2-Axios-第一个程序" class="headerlink" title="10.2 Axios 第一个程序"></a>10.2 Axios 第一个程序</h3><p>中文网站:<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a></p><p>安装: <a href="https://unpkg.com/axios/dist/axios.min.js" target="_blank" rel="noopener">https://unpkg.com/axios/dist/axios.min.js</a></p><h4 id="10-2-1-GET方式的请求"><a href="#10-2-1-GET方式的请求" class="headerlink" title="10.2.1 GET方式的请求"></a>10.2.1 GET方式的请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送GET方式请求</span></span><br><span class="line"> axios.get(<span class="string">"http://localhost:8989/user/findAll?name=xiaochen"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(response.data);</span><br><span class="line"> &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h4 id="10-2-2-POST方式请求"><a href="#10-2-2-POST方式请求" class="headerlink" title="10.2.2 POST方式请求"></a>10.2.2 POST方式请求</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送POST方式请求</span></span><br><span class="line">  axios.post(<span class="string">"http://localhost:8989/user/save"</span>,&#123;</span><br><span class="line">      username:<span class="string">"xiaochen"</span>,</span><br><span class="line">      age:<span class="number">23</span>,</span><br><span class="line">      email:<span class="string">"xiaochen@zparkhr.com"</span>,</span><br><span class="line">      phone:<span class="number">13260426185</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="10-2-3-axios并发请求"><a href="#10-2-3-axios并发请求" class="headerlink" title="10.2.3 axios并发请求"></a>10.2.3 axios并发请求</h4><blockquote><p><code>并发请求</code>:  将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建一个查询所有请求</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">findAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> axios.get(<span class="string">"http://localhost:8989/user/findAll?name=xiaochen"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.创建一个保存的请求</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> axios.post(<span class="string">"http://localhost:8989/user/save"</span>,&#123;</span><br><span class="line">           username:<span class="string">"xiaochen"</span>,</span><br><span class="line">           age:<span class="number">23</span>,</span><br><span class="line">           email:<span class="string">"xiaochen@zparkhr.com"</span>,</span><br><span class="line">           phone:<span class="number">13260426185</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.并发执行</span></span><br><span class="line">   axios.all([findAll(),save()]).then(</span><br><span class="line">       axios.spread(<span class="function"><span class="keyword">function</span>(<span class="params">res1,res2</span>)</span>&#123;  <span class="comment">//用来将一组函数的响应结果汇总处理</span></span><br><span class="line">           <span class="built_in">console</span>.log(res1.data);</span><br><span class="line">           <span class="built_in">console</span>.log(res2.data);</span><br><span class="line">       &#125;)</span><br><span class="line">   );<span class="comment">//用来发送一组并发请求</span></span><br></pre></td></tr></table></figure><hr><h2 id="11-Vue-生命周期"><a href="#11-Vue-生命周期" class="headerlink" title="11. Vue 生命周期"></a>11. Vue 生命周期</h2><blockquote><p><code>生命周期钩子</code>   ====&gt;  <code>生命周期函数</code></p></blockquote><p>![img](C:/Users/ASUS/Desktop/ vue资料/Vue实战笔记完整版/Vue实战.assets/lifecycle.png)</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Vue生命周期总结</span></span><br><span class="line"><span class="code">1.初始化阶段</span></span><br><span class="line"><span class="code">beforeCreate()&#123; //1.生命周期中第一个函数,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,Vue实例中还没有 Data el methods相关属性</span></span><br><span class="line"><span class="code">            console.log("beforeCreate: "+this.msg);</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        created()&#123; //2.生命周期中第二个函数,该函数在执行时Vue实例已经初始化了data属性和methods中相关方法</span></span><br><span class="line"><span class="code">            console.log("created: "+this.msg);</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        beforeMount()&#123;//3.生命周期中第三个函数,该函数在执行时Vue将El中指定作用范围作为模板编译</span></span><br><span class="line"><span class="code">            console.log("beforeMount: "+document.getElementById("sp").innerText);</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        mounted()&#123;//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面</span></span><br><span class="line"><span class="code">            console.log("Mounted: "+document.getElementById("sp").innerText);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">2.运行阶段</span></span><br><span class="line"><span class="code"> beforeUpdate()&#123;//5.生命周期中第五个函数,该函数是data中数据发生变化时执行 这个事件执行时仅仅是Vue实例中data数据变化页面显示的依然是原始数据</span></span><br><span class="line"><span class="code">            console.log("beforeUpdate:"+this.msg);</span></span><br><span class="line"><span class="code">            console.log("beforeUpdate:"+document.getElementById("sp").innerText);</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        updated()&#123;    //6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化  页面中数据已经和data中数据一致</span></span><br><span class="line"><span class="code">            console.log("updated:"+this.msg);</span></span><br><span class="line"><span class="code">            console.log("updated:"+document.getElementById("sp").innerText);</span></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">3.销毁阶段</span></span><br><span class="line"><span class="code"> beforeDestory()&#123;//7.生命周期第七个函数,该函数执行时,Vue中所有数据 methods componet 都没销毁</span></span><br><span class="line"></span><br><span class="line"><span class="code">        &#125;,</span></span><br><span class="line"><span class="code">        destoryed()&#123; //8.生命周期的第八个函数,该函数执行时,Vue实例彻底销毁</span></span><br><span class="line"></span><br><span class="line"><span class="code">        &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="12-Vue中组件-Component"><a href="#12-Vue中组件-Component" class="headerlink" title="12. Vue中组件(Component)"></a>12. Vue中组件(Component)</h2><h3 id="12-1-组件作用"><a href="#12-1-组件作用" class="headerlink" title="12.1 组件作用"></a>12.1 组件作用</h3><p>组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不能业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。</p><h3 id="12-2-组件使用"><a href="#12-2-组件使用" class="headerlink" title="12.2 组件使用"></a>12.2 组件使用</h3><h4 id="12-2-1-全局组件注册"><a href="#12-2-1-全局组件注册" class="headerlink" title="12.2.1 全局组件注册"></a>12.2.1 全局组件注册</h4><p><code>说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.开发全局组件</span></span><br><span class="line">Vue.component(<span class="string">'login'</span>,&#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;h1&gt;用户登录&lt;/h1&gt;&lt;/div&gt;'</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//2.使用全局组件  在Vue实例范围内</span></span><br><span class="line">&lt;login&gt;&lt;<span class="regexp">/login&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 注意:</span></span><br><span class="line"><span class="code">1.Vue.component用来开发全局组件 参数1: 组件的名称  参数2: 组件配置&#123;&#125;  template:''用来书写组件的html代码  template中必须有且只有一个root元素</span></span><br><span class="line"><span class="code">2.使用时需要在Vue的作用范围内根据组件名使用全局组件</span></span><br><span class="line"><span class="code">3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用</span></span><br></pre></td></tr></table></figure><h4 id="12-2-2-局部组件注册"><a href="#12-2-2-局部组件注册" class="headerlink" title="12.2.2 局部组件注册"></a>12.2.2 局部组件注册</h4><p><code>说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加</code></p><ul><li>第一种开发方式</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部组件登录模板声明</span></span><br><span class="line">  <span class="keyword">let</span> login =&#123;   <span class="comment">//具体局部组件名称</span></span><br><span class="line">      template:<span class="string">'&lt;div&gt;&lt;h2&gt;用户登录&lt;/h2&gt;&lt;/div&gt;'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">"#app"</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components:&#123;  <span class="comment">//用来注册局部组件</span></span><br><span class="line">          login:login  <span class="comment">//注册局部组件</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部组件使用 在Vue实例范围内</span></span><br><span class="line">&lt;login&gt;&lt;<span class="regexp">/login&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>第二种开发方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.声明局部组件模板  template 标签 注意:在Vue实例作用范围外声明</span></span><br><span class="line">  &lt;template id=<span class="string">"loginTemplate"</span>&gt;</span><br><span class="line">      &lt;h1&gt;用户登录&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义变量用来保存模板配置对象</span></span><br><span class="line">    <span class="keyword">let</span> login =&#123;   <span class="comment">//具体局部组件名称</span></span><br><span class="line">        template:<span class="string">'#loginTemplate'</span>  <span class="comment">//使用自定义template标签选择器即可</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.注册组件</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        components:&#123;  <span class="comment">//用来注册局部组件</span></span><br><span class="line">            login:login  <span class="comment">//注册局部组件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//4.局部组件使用 在Vue实例范围内</span></span><br><span class="line"> &lt;login&gt;&lt;<span class="regexp">/login&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="12-3-Prop的使用"><a href="#12-3-Prop的使用" class="headerlink" title="12.3 Prop的使用"></a>12.3 Prop的使用</h3><p><code>作用:props用来给组件传递相应静态数据或者是动态数据的</code></p><h4 id="12-3-1-通过在组件上声明静态数据传递给组件内部"><a href="#12-3-1-通过在组件上声明静态数据传递给组件内部" class="headerlink" title="12.3.1 通过在组件上声明静态数据传递给组件内部"></a>12.3.1 通过在组件上声明静态数据传递给组件内部</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.声明组件模板配置对象</span></span><br><span class="line">    <span class="keyword">let</span> login = &#123;</span><br><span class="line">        template:<span class="string">"&lt;div&gt;&lt;h1&gt;欢迎:&#123;&#123; userName &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h1&gt;&lt;/div&gt;"</span>,</span><br><span class="line">        props:[<span class="string">'userName'</span>,<span class="string">'age'</span>]  <span class="comment">//props作用 用来接收使用组件时通过组件标签传递的数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.注册组件</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            login <span class="comment">//组件注册</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.通过组件完成数据传递</span></span><br><span class="line">&lt;login user-name=<span class="string">"小陈"</span> age=<span class="string">"23"</span>&gt;&lt;<span class="regexp">/login&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">1.使用组件时可以在组件上定义多个属性以及对应数据</span></span><br><span class="line"><span class="code">2.在组件内部可以使用props数组生命多个定义在组件上的属性名 日后可以在组件中通过&#123;&#123; 属性名 &#125;&#125; 方式获取组件中属性值</span></span><br></pre></td></tr></table></figure><h4 id="12-3-2-通过在组件上声明动态数据传递给组件内部"><a href="#12-3-2-通过在组件上声明动态数据传递给组件内部" class="headerlink" title="12.3.2 通过在组件上声明动态数据传递给组件内部"></a>12.3.2 通过在组件上声明动态数据传递给组件内部</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.声明组件模板对象</span></span><br><span class="line">    <span class="keyword">const</span> login = &#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;h2&gt;欢迎: &#123;&#123; name &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h2&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        props:[<span class="string">'name'</span>,<span class="string">'age'</span>]</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//2.注册局部组件</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            username:<span class="string">"小陈陈"</span>,</span><br><span class="line">            age:<span class="number">23</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            login <span class="comment">//注册组件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用组件</span></span><br><span class="line"> &lt;login :name=<span class="string">"username"</span> :age=<span class="string">"age"</span>&gt;&lt;<span class="regexp">/login&gt;  /</span><span class="regexp">/使用v-bind形式将数据绑定Vue实例中data属性,日后data属性发生变化,组件内部数据跟着变化</span></span><br></pre></td></tr></table></figure><h4 id="12-3-3-prop的单向数据流"><a href="#12-3-3-prop的单向数据流" class="headerlink" title="12.3.3 prop的单向数据流"></a>12.3.3 prop的单向数据流</h4><p><code>单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个**单向下行绑定**：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</code></p><blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。—摘自官网</p></blockquote><h3 id="12-4-组件中定义数据和事件使用"><a href="#12-4-组件中定义数据和事件使用" class="headerlink" title="12.4 组件中定义数据和事件使用"></a>12.4 组件中定义数据和事件使用</h3><h5 id="1-组件中定义属于组件的数据"><a href="#1-组件中定义属于组件的数据" class="headerlink" title="1. 组件中定义属于组件的数据"></a>1. 组件中定义属于组件的数据</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件声明的配置对象</span></span><br><span class="line">    <span class="keyword">const</span> login = &#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;h1&gt;&#123;&#123; msg &#125;&#125; 百知教育&lt;/h1&gt;&lt;ul&gt;&lt;li v-for="item,index in lists"&gt;&#123;&#123; index &#125;&#125;&#123;&#123; item &#125;&#125;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        data()&#123;   <span class="comment">//使用data函数方式定义组件的数据   在templatehtml代码中通过插值表达式直接获取</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg:<span class="string">"hello"</span>,</span><br><span class="line">                lists:[<span class="string">'java'</span>,<span class="string">'spring'</span>,<span class="string">'springboot'</span>]</span><br><span class="line">            &#125;<span class="comment">//组件自己内部数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-组件中事件定义"><a href="#2-组件中事件定义" class="headerlink" title="2.组件中事件定义"></a>2.组件中事件定义</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> login=&#123;</span><br><span class="line">       template:<span class="string">'&lt;div&gt;&lt;input type="button" value="点我触发组件中事件" @click="change"&gt;&lt;/div&gt;'</span>,</span><br><span class="line">       data()&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               name:<span class="string">'小陈'</span></span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           change()&#123;</span><br><span class="line">               alert(<span class="keyword">this</span>.name)</span><br><span class="line">               alert(<span class="string">'触发事件'</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">1.组件中定义事件和直接在Vue中定义事件基本一致 直接在组件内部对应的html代码上加入@事件名=函数名方式即可</span></span><br><span class="line"><span class="code">2.在组件内部使用methods属性用来定义对应的事件函数即可,事件函数中this 指向的是当前组件的实例</span></span><br></pre></td></tr></table></figure><h3 id="12-5-向子组件中传递事件并在子组件中调用改事件"><a href="#12-5-向子组件中传递事件并在子组件中调用改事件" class="headerlink" title="12.5 向子组件中传递事件并在子组件中调用改事件"></a>12.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用 this.$emit(&#39;函数名&#39;) 方式调用</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.声明组件</span></span><br><span class="line">    <span class="keyword">const</span> login = &#123;</span><br><span class="line">        template:<span class="string">"&lt;div&gt;&lt;h1&gt;百知教育 &#123;&#123; uname &#125;&#125;&lt;/h1&gt; &lt;input type='button' value='点我' @click='change'&gt;&lt;/div&gt;"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                uname:<span class="keyword">this</span>.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props:[<span class="string">'name'</span>],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            change()&#123;</span><br><span class="line">                <span class="comment">//调用vue实例中函数</span></span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'aaa'</span>);  <span class="comment">//调用组件传递过来的其他函数时需要使用 this.$emit('函数名调用')</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//2.注册组件</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">"#app"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            username:<span class="string">"小陈"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            findAll()&#123;  <span class="comment">//一个事件函数  将这个函数传递给子组件</span></span><br><span class="line">                alert(<span class="string">'Vue 实例中定义函数'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            login,<span class="comment">//组件的注册</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用组件</span></span><br><span class="line">&lt;login  @find=<span class="string">"findAll"</span>&gt;&lt;<span class="regexp">/login&gt;    /</span><span class="regexp">/=====&gt; 在组件内部使用  this.$emit('find')</span></span><br></pre></td></tr></table></figure><hr><h2 id="13-Vue中路由-VueRouter"><a href="#13-Vue中路由-VueRouter" class="headerlink" title="13.Vue中路由(VueRouter)"></a>13.Vue中路由(VueRouter)</h2><h4 id="13-1-路由"><a href="#13-1-路由" class="headerlink" title="13.1 路由"></a>13.1 路由</h4><p><code>路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理</code></p><h4 id="13-2-作用"><a href="#13-2-作用" class="headerlink" title="13.2 作用"></a>13.2 作用</h4><p><code>用来在vue中实现组件之间的动态切换</code></p><h4 id="13-3-使用路由"><a href="#13-3-使用路由" class="headerlink" title="13.3 使用路由"></a>13.3 使用路由</h4><ol><li><h5 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/unpkg.com/</span>vue-router/dist/vue-router.js<span class="string">"&gt;&lt;/script&gt;  //vue 路由js</span></span><br></pre></td></tr></table></figure></li><li><h5 id="创建组件对象"><a href="#创建组件对象" class="headerlink" title="创建组件对象"></a>创建组件对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明组件模板</span></span><br><span class="line"><span class="keyword">const</span> login = &#123;</span><br><span class="line">  template:<span class="string">'&lt;h1&gt;登录&lt;/h1&gt;'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> register = &#123;</span><br><span class="line">  template:<span class="string">'&lt;h1&gt;注册&lt;/h1&gt;'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h5 id="定义路由对象的规则"><a href="#定义路由对象的规则" class="headerlink" title="定义路由对象的规则"></a>定义路由对象的规则</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/login'</span>,<span class="attr">component</span>:login&#125;,   <span class="comment">//path: 路由的路径  component:路径对应的组件</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/register'</span>,<span class="attr">component</span>:register&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><h5 id="将路由对象注册到vue实例"><a href="#将路由对象注册到vue实例" class="headerlink" title="将路由对象注册到vue实例"></a>将路由对象注册到vue实例</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    username:<span class="string">"小陈"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  router:router   <span class="comment">//设置路由对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><h5 id="在页面中显示路由的组件"><a href="#在页面中显示路由的组件" class="headerlink" title="在页面中显示路由的组件"></a>在页面中显示路由的组件</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示路由的组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="根据连接切换路由"><a href="#根据连接切换路由" class="headerlink" title="根据连接切换路由"></a>根据连接切换路由</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/login"</span>&gt;</span>点我登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/register"</span>&gt;</span>点我注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="13-4-router-link使用"><a href="#13-4-router-link使用" class="headerlink" title="13.4 router-link使用"></a>13.4 router-link使用</h3><p><code>作用:用来替换我们在切换路由时使用a标签切换路由</code></p><p><code>好处:就是可以自动给路由路径加入#不需要手动加入</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span> <span class="attr">tag</span>=<span class="string">"button"</span>&gt;</span>我要登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span> <span class="attr">tag</span>=<span class="string">"button"</span>&gt;</span>点我注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 总结:</span></span><br><span class="line"><span class="code">1.router-link 用来替换使用a标签实现路由切换 好处是不需要书写#号直接书写路由路径</span></span><br><span class="line"><span class="code">2.router-link to属性用来书写路由路径   tag属性:用来将router-link渲染成指定的标签</span></span><br></pre></td></tr></table></figure><h3 id="13-5-默认路由"><a href="#13-5-默认路由" class="headerlink" title="13.5 默认路由"></a>13.5 默认路由</h3><p><code>作用:用来在第一次进入界面是显示一个默认的组件</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    <span class="comment">//&#123; path:'/',component:login&#125;,</span></span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">redirect</span>:<span class="string">'/login'</span>&#125;,  <span class="comment">//redirect: 用来当访问的是默认路由 "/" 时 跳转到指定的路由展示  推荐使用</span></span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">'/login'</span>, <span class="attr">component</span>:login&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>:<span class="string">'/register'</span>, <span class="attr">component</span>:register&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="13-6-路由中参数传递"><a href="#13-6-路由中参数传递" class="headerlink" title="13.6 路由中参数传递"></a>13.6 路由中参数传递</h3><ul><li>第一种方式传递参数 传统方式</li></ul><ol><li><p>通过?号形式拼接参数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login?id=21&amp;name=zhangsan"</span>&gt;</span>我要登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>组件中获取参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> login = &#123;</span><br><span class="line">  template:<span class="string">'&lt;h1&gt;用户登录&lt;/h1&gt;'</span>,</span><br><span class="line">  data()&#123;<span class="keyword">return</span> &#123;&#125;&#125;,</span><br><span class="line">  methods:&#123;&#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"=============&gt;"</span>+<span class="keyword">this</span>.$route.query.id+<span class="string">"======&gt;"</span>+<span class="keyword">this</span>.$route.query.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ul><li>第二种方式传递参数 restful</li></ul><ol><li><p>通过使用路径方式传递参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/register/24/张三"</span>&gt;我要注册&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">var router = new VueRouter(&#123;</span></span><br><span class="line"><span class="regexp">  routes:[</span></span><br><span class="line"><span class="regexp">    &#123;path:'/register/:id/:name',component:register&#125;   //定义路径中获取对应参数</span></span><br><span class="line"><span class="regexp">  ]</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>组件中获取参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> register = &#123;</span><br><span class="line">  template:<span class="string">'&lt;h1&gt;用户注册&#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;'</span>,</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"注册组件中id:   "</span>+<span class="keyword">this</span>.$route.params.id+<span class="keyword">this</span>.$route.params.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-7-嵌套路由"><a href="#13-7-嵌套路由" class="headerlink" title="13.7 嵌套路由"></a>13.7 嵌套路由</h3><ol><li><h5 id="声明最外层和内层路由"><a href="#声明最外层和内层路由" class="headerlink" title="声明最外层和内层路由"></a>声明最外层和内层路由</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template id=<span class="string">"product"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;商品管理&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;router-link to="/</span>product/add<span class="string">"&gt;商品添加&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to="</span>/product/edit<span class="string">"&gt;商品编辑&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//声明组件模板</span></span><br><span class="line"><span class="string">const product=&#123;</span></span><br><span class="line"><span class="string">  template:'#product'</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const add = &#123;</span></span><br><span class="line"><span class="string">  template:'&lt;h4&gt;商品添加&lt;/h4&gt;'</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const edit = &#123;</span></span><br><span class="line"><span class="string">  template:'&lt;h4&gt;商品编辑&lt;/h4&gt;'</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h5 id="创建路由对象含有嵌套路由"><a href="#创建路由对象含有嵌套路由" class="headerlink" title="创建路由对象含有嵌套路由"></a>创建路由对象含有嵌套路由</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">        routes:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:<span class="string">'/product'</span>,</span><br><span class="line">                component:product,</span><br><span class="line">                children:[</span><br><span class="line">                    &#123;<span class="attr">path</span>:<span class="string">'add'</span>,<span class="attr">component</span>: add&#125;,</span><br><span class="line">                    &#123;<span class="attr">path</span>:<span class="string">'edit'</span>,<span class="attr">component</span>: edit&#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><h5 id="注册路由对象"><a href="#注册路由对象" class="headerlink" title="注册路由对象"></a>注册路由对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    router,<span class="comment">//定义路由对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>测试路由</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/product"</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr></li></ol><h2 id="14-Vue-CLI-脚手架"><a href="#14-Vue-CLI-脚手架" class="headerlink" title="14. Vue CLI 脚手架"></a>14. Vue CLI 脚手架</h2><h3 id="14-1-什么是CLI"><a href="#14-1-什么是CLI" class="headerlink" title="14.1 什么是CLI"></a>14.1 什么是CLI</h3><p>命令行界面（英语：command-line interface，缩写：<em>CLI</em>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）</p><h3 id="14-2-什么是Vue-CLI"><a href="#14-2-什么是Vue-CLI" class="headerlink" title="14.2 什么是Vue CLI"></a>14.2 什么是Vue CLI</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。</p><h3 id="14-3-Vue-CLI优势"><a href="#14-3-Vue-CLI优势" class="headerlink" title="14.3 Vue CLI优势"></a>14.3 Vue CLI优势</h3><ul><li>通过 <code>vue-cli</code> 搭建交互式的项目脚手架。bootstrap css js jquery js     通过执行命令方式下载相关依赖</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发    vue页面 vuejs  vuerouter        axios(一条命令)</li><li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：<ul><li>可升级；  一条命令</li><li>基于 webpack 构建，并带有合理的默认配置；  webpack  项目打包方式     编译好的项目源码===&gt;部署到服务器上直接使用</li><li>可以通过项目内的配置文件进行配置；               默认配置文件,通过修改默认配置文件达到自己想要的项目环境            </li><li>可以通过插件进行扩展。                                       vue v-charts  elementui </li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。Nodejs(tomcat)  Vue VueRouter webpack yarn</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li></ul><h3 id="14-4-Vue-CLI安装"><a href="#14-4-Vue-CLI安装" class="headerlink" title="14.4 Vue CLI安装"></a>14.4 Vue CLI安装</h3><h5 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#1.下载nodejs</span></span><br><span class="line"><span class="code">http://nodejs.cn/download/</span></span><br><span class="line"><span class="code">windows系统:   .msi  安装包(exe)指定安装位置   .zip(压缩包)直接解压缩指定目录</span></span><br><span class="line"><span class="code">  mac os 系统:   .pkg  安装包格式自动配置环境变量  .tar.gz(压缩包)解压缩安装到指定名</span></span><br><span class="line"></span><br><span class="line"><span class="section">#2.配置nodejs环境变量</span></span><br><span class="line"><span class="code">windows系统:</span></span><br><span class="line"><span class="code">1.计算上右键属性----&gt;  高级属性 ----&gt;环境变量 添加如下配置:</span></span><br><span class="line"><span class="code">NODE_HOME=  nodejs安装目录</span></span><br><span class="line"><span class="code">        PATH    = xxxx;%NODE_HOME%</span></span><br><span class="line"><span class="code">    2.macos 系统</span></span><br><span class="line"><span class="code">    推荐使用.pkg安装直接配置node环境</span></span><br><span class="line"> </span><br><span class="line"><span class="section">#3.验证nodejs环境是否成功</span></span><br><span class="line"><span class="code">node -v </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#4.npm介绍</span></span><br><span class="line"><span class="code">node package mangager    nodejs包管理工具       前端主流技术  npm 进行统一管理</span></span><br><span class="line"><span class="code">maven 管理java后端依赖   远程仓库(中心仓库)      阿里云镜像</span></span><br><span class="line"><span class="code">npm   管理前端系统依赖    远程仓库(中心仓库)      配置淘宝镜像</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#5.配置淘宝镜像</span></span><br><span class="line"><span class="code">  npm config set registry https://registry.npm.taobao.org</span></span><br><span class="line"><span class="code">  npm config get registry</span></span><br><span class="line"></span><br><span class="line"><span class="section">#6.配置npm下载依赖位置</span></span><br><span class="line"><span class="code"> windows:</span></span><br><span class="line"><span class="code">npm config set cache "D:\nodereps\npm-cache"</span></span><br><span class="line"><span class="code">npm config set prefix "D:\nodereps\npm_global"</span></span><br><span class="line"><span class="code"> mac os:</span></span><br><span class="line"><span class="code"> npm config set cache "/Users/chenyannan/dev/nodereps"</span></span><br><span class="line"><span class="code">npm config set prefix "/Users/chenyannan/dev/nodereps"</span></span><br><span class="line"></span><br><span class="line"><span class="section">#7.验证nodejs环境配置</span></span><br><span class="line"><span class="code">npm config ls</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    ; userconfig /Users/chenyannan/.npmrc</span></span><br><span class="line"><span class="code">    cache = "/Users/chenyannan/dev/nodereps"</span></span><br><span class="line"><span class="code">    prefix = "/Users/chenyannan/dev/nodereps"</span></span><br><span class="line"><span class="code">    registry = "https://registry.npm.taobao.org/"</span></span><br></pre></td></tr></table></figure><h5 id="2-安装脚手架"><a href="#2-安装脚手架" class="headerlink" title="2.安装脚手架"></a>2.安装脚手架</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#0.卸载脚手架</span></span><br><span class="line"><span class="code">npm uninstall -g @vue/cli  //卸载3.x版本脚手架</span></span><br><span class="line"><span class="code">npm uninstall -g vue-cli  //卸载2.x版本脚手架</span></span><br><span class="line"></span><br><span class="line"><span class="section">#1.Vue Cli官方网站</span></span><br><span class="line"><span class="code">https://cli.vuejs.org/zh/guide/</span></span><br><span class="line"></span><br><span class="line"><span class="section">#2.安装vue Cli</span></span><br><span class="line"><span class="code">npm install -g vue-cli</span></span><br></pre></td></tr></table></figure><h5 id="3-第一个vue脚手架项目"><a href="#3-第一个vue脚手架项目" class="headerlink" title="3.第一个vue脚手架项目"></a>3.第一个vue脚手架项目</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.创建vue脚手架第一个项目</span></span><br><span class="line"><span class="code">vue init webpack 项目名</span></span><br><span class="line"><span class="section"># 2.创建第一个项目</span></span><br><span class="line"><span class="code">hello     -------------&gt;项目名</span></span><br><span class="line"><span class="code">    -build  -------------&gt;用来使用webpack打包使用build依赖</span></span><br><span class="line"><span class="code">    -config -------------&gt;用来做整个项目配置目录</span></span><br><span class="line"><span class="code">    -node_modules  ------&gt;用来管理项目中使用依赖</span></span><br><span class="line"><span class="code">    -src ------&gt;用来书写vue的源代码[重点]</span></span><br><span class="line"><span class="code">    +assets      ------&gt;用来存放静态资源 [重点]</span></span><br><span class="line"><span class="code">      components   ------&gt;用来书写Vue组件 [重点]</span></span><br><span class="line"><span class="code">      router ------&gt;用来配置项目中路由[重点]</span></span><br><span class="line"><span class="code">      App.vue      ------&gt;项目中根组件[重点]</span></span><br><span class="line"><span class="code">      main.js      ------&gt;项目中主入口[重点]</span></span><br><span class="line"><span class="code">    -static        ------&gt;其它静态</span></span><br><span class="line"><span class="code">    -.babelrc      ------&gt; 将es6语法转为es5运行</span></span><br><span class="line"><span class="code">    -.editorconfig ------&gt; 项目编辑配置</span></span><br><span class="line"><span class="code">    -.gitignore    ------&gt; git版本控制忽略文件</span></span><br><span class="line"><span class="code">    -.postcssrc.js ------&gt; 源码相关js</span></span><br><span class="line"><span class="code">    -index.html    ------&gt; 项目主页</span></span><br><span class="line"><span class="code">    -package.json  ------&gt; 类似与pom.xml 依赖管理  jquery 不建议手动修改</span></span><br><span class="line"><span class="code">    -package-lock.json ----&gt; 对package.json加锁</span></span><br><span class="line"><span class="code">    -README.md         ----&gt; 项目说明文件</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 3.如何运行在项目的根目录中执行</span></span><br><span class="line"><span class="code">npm start 运行前端系统</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 4.如何访问项目</span></span><br><span class="line"><span class="code">http://localhost:8081    </span></span><br><span class="line"></span><br><span class="line"><span class="section"># 5.Vue Cli中项目开发方式</span></span><br><span class="line"><span class="code"> 注意: 一切皆组件   一个组件中   js代码  html代码  css样式</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="bullet"> 1. </span>VueCli开发方式是在项目中开发一个一个组件对应一个业务功能模块,日后可以将多个组件组合到一起形成一个前端系统</span><br><span class="line"><span class="bullet"> 2. </span>日后在使用vue Cli进行开发时不再书写html,编写的是一个个组件(组件后缀.vue结尾的文件),日后打包时vue cli会将组件编译成运行的html文件</span><br></pre></td></tr></table></figure><h5 id="4-如何开发Vue脚手架"><a href="#4-如何开发Vue脚手架" class="headerlink" title="4.如何开发Vue脚手架"></a>4.如何开发Vue脚手架</h5><p><code>注意:在Vue cli 中一切皆组件</code></p><hr><h2 id="15-在脚手架中使用axios"><a href="#15-在脚手架中使用axios" class="headerlink" title="15.在脚手架中使用axios"></a>15.在脚手架中使用axios</h2><h3 id="15-1-安装axios"><a href="#15-1-安装axios" class="headerlink" title="15.1 安装axios"></a>15.1 安装axios</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.安装axios</span></span><br><span class="line"><span class="code">npm install axios --save-dev</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 2.配置main.js中引入axios</span></span><br><span class="line"><span class="code">import axios from 'axios';</span></span><br><span class="line"></span><br><span class="line"><span class="code">Vue.prototype.$http=axios;</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 3.使用axios</span></span><br><span class="line"><span class="code">在需要发送异步请求的位置:this.$http.get("url").then((res)=&gt;&#123;&#125;) this.$http.post("url").then((res)=&gt;&#123;&#125;)</span></span><br></pre></td></tr></table></figure><hr><h2 id="16-Vue-Cli脚手架项目打包和部署"><a href="#16-Vue-Cli脚手架项目打包和部署" class="headerlink" title="16.Vue Cli脚手架项目打包和部署"></a>16.Vue Cli脚手架项目打包和部署</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.在项目根目录中执行如下命令:</span></span><br><span class="line"><span class="code">  vue run build</span></span><br><span class="line"></span><br><span class="line"><span class="code">注意:vue脚手架打包的项目必须在服务器上运行不能直接双击运行</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 2.打包之后当前项目中变化</span></span><br><span class="line"><span class="code"> 在打包之后项目中出现dist目录,dist目录就是vue脚手架项目生产目录或者说是直接部署目录</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 3.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 12： 知识总结</title>
    <link href="https://somunstao.github.io/2020/04/22/Vue%2012%EF%BC%9A%E6%80%BB%E7%BB%93/"/>
    <id>https://somunstao.github.io/2020/04/22/Vue%2012%EF%BC%9A%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-08-01T15:19:42.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-知识总结"><a href="#Vue-知识总结" class="headerlink" title="Vue 知识总结"></a>Vue 知识总结</h1><h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><blockquote><p>基于vue 2+ 写一份知识总结，可以说是学习笔记</p></blockquote><h5 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h5><blockquote><p>一、vue实例的基本结构<br>二、vue事件处理、绑定属性<br>三、vue指令、自定义指令<br>四、vue过滤器<br>五、vue数据监听<br>六、vue组件<br>七、vue-router<br>八、axios</p></blockquote><h5 id="一、Vue-实例的基本结构"><a href="#一、Vue-实例的基本结构" class="headerlink" title="一、Vue 实例的基本结构"></a>一、Vue 实例的基本结构</h5><p><a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">Vue官网API</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Welcome</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;, &#x2F;&#x2F;等价于后面的 .$mount(&#39;#app&#39;) 用其中之一就可以了</span><br><span class="line">  render: h &#x3D;&gt; h(App), &#x2F;&#x2F;理解不够深入，参考（https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;api&#x2F;?#render）</span><br><span class="line">  data: &#123; </span><br><span class="line">    &#x2F;&#x2F;页面响应的数据都放在这里如上（组件只接受 function 且必须返回一个对象），zhicvm.$data 访问这里面的data</span><br><span class="line">    msg: &#39;Welcome&#39;,</span><br><span class="line">  &#125;,</span><br><span class="line">  props:&#123;</span><br><span class="line">    &#x2F;&#x2F;props 可以是数组或对象，接收任何值</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:  &#123;</span><br><span class="line">    &#x2F;&#x2F;页面或组件定义的方法的集合，可通过 vm.reset() 直接调用</span><br><span class="line">    reset: function()&#123;</span><br><span class="line">      this.msg &#x3D; &#39;这是重新设置之后的数据&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    &#x2F;&#x2F;计算属性(computed)与方法(methods) 类似，如果计算数据量比较大，建议放到这里</span><br><span class="line">    &#x2F;&#x2F;计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。</span><br><span class="line">    &#x2F;&#x2F;参考（https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;api&#x2F;?#computed）</span><br><span class="line">  &#125;,</span><br><span class="line">  components：&#123;</span><br><span class="line">    &#x2F;&#x2F; 局部组件注册的地方</span><br><span class="line">    &#39;component-a&#39;: ComponentA,</span><br><span class="line">    &#39;component-b&#39;: ComponentB</span><br><span class="line">  &#125;,</span><br><span class="line">  directives: &#123;</span><br><span class="line">    &#x2F;&#x2F; 局部指令注册的地方</span><br><span class="line">    focus: &#123;</span><br><span class="line">      &#x2F;&#x2F; 指令的定义</span><br><span class="line">      inserted: function (el,binding) &#123;</span><br><span class="line">        el.focus(); </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    &#x2F;&#x2F; 局部过滤器注册的地方</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;生命周期钩子</span><br><span class="line">  beforeCreate: function ()&#123;&#125;, &#x2F;&#x2F;在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。</span><br><span class="line">  created: function ()&#123;&#125;,&#x2F;&#x2F;在实例创建完成后被立即调用。</span><br><span class="line">  beforeMount: function ()&#123;&#125;,&#x2F;&#x2F;在挂载开始之前被调用：相关的 render 函数首次被调用。</span><br><span class="line">  mounted: function ()&#123;&#125;,&#x2F;&#x2F;el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</span><br><span class="line">  beforeUpdate: function ()&#123;&#125;,&#x2F;&#x2F;数据更新时调用，发生在虚拟 DOM 打补丁之前。</span><br><span class="line">  updated: function ()&#123;&#125;,&#x2F;&#x2F;由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</span><br><span class="line">  beforeDestroy: function ()&#123;&#125;,&#x2F;&#x2F;实例销毁之前调用。在这一步，实例仍然完全可用。</span><br><span class="line">  destroyed: function ()&#123;</span><br><span class="line">    &#x2F;&#x2F;Vue 实例销毁后调用。</span><br><span class="line">    &#x2F;&#x2F;调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><h5 id="二、Vue-事件处理、绑定属性"><a href="#二、Vue-事件处理、绑定属性" class="headerlink" title="二、Vue 事件处理、绑定属性"></a>二、Vue 事件处理、绑定属性</h5><p><a href="https://cn.vuejs.org/v2/api/?#v-on" target="_blank" rel="noopener">v-on：</a></p><blockquote><p>1、绑定事件监听器。用在普通元素上时，只能监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener"><strong>原生 DOM 事件</strong></a>（如：click、keyup/down、mouseenter/over/move/down/out 等）。也可以监听自定义事件即 methods 里面的事件。<br>2、在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event 属性：v-on:click=”handle(‘ok’, $event)”。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符：</span><br><span class="line">.stop - 调用 event.stopPropagation()。阻止冒泡</span><br><span class="line">.prevent - 调用 event.preventDefault()。阻止默认事件</span><br><span class="line">.capture - 添加事件侦听器时使用 capture 模式。</span><br><span class="line">.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</span><br><span class="line">.&#123;keyCode | keyAlias&#125; - 只当事件是从特定键触发时才触发回调。</span><br><span class="line">.native - 监听组件根元素的原生事件。</span><br><span class="line">.once - 只触发一次回调。</span><br><span class="line">.left - (2.2.0) 只当点击鼠标左键时触发。</span><br><span class="line">.right - (2.2.0) 只当点击鼠标右键时触发。</span><br><span class="line">.middle - (2.2.0) 只当点击鼠标中键时触发。</span><br><span class="line">.passive - (2.3.0) 以 &#123; passive: true &#125; 模式添加侦听器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：</span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;button v-on:click&#x3D;&quot;doThat(&#39;hello&#39;, $event)&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 停止冒泡 --&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class="line">&lt;button v-on&#x3D;&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><ul><li>v-on 还提供了<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">按键修饰符</a></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">键盘按钮的别名</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获“删除”和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 可以通过全局 &#96;config.keyCodes&#96; 对象自定义按键修饰符别名</span><br><span class="line">&#x2F;&#x2F; 使用 方式 &#96;v-on:keyup.f1&#96; ，f1 这个名字你可以任意取，你知道是什么意思就可以了</span><br><span class="line">Vue.config.keyCodes.f1 &#x3D; 112</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/api/?#v-bind" target="_blank" rel="noopener">v-bind：</a></p><blockquote><p>动态地绑定一个或多个特性，或一个组件 prop 到表达式。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 绑定一个属性 --&gt;</span><br><span class="line">&lt;img v-bind:src&#x3D;&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src&#x3D;&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="line">&lt;img :src&#x3D;&quot;&#39;&#x2F;path&#x2F;to&#x2F;images&#x2F;&#39; + fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class 绑定 --&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;&#123; red: isRed &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[classA, classB]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style 绑定 --&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123; fontSize: size + &#39;px&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定一个有属性的对象 --&gt;</span><br><span class="line">&lt;div v-bind&#x3D;&quot;&#123; id: someProp, &#39;other-attr&#39;: otherProp &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span><br><span class="line">&lt;my-component :prop&#x3D;&quot;someThing&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h4 id="三、Vue-指令、自定义指令"><a href="#三、Vue-指令、自定义指令" class="headerlink" title="三、Vue 指令、自定义指令"></a>三、Vue 指令、自定义指令</h4><p><a href="https://cn.vuejs.org/v2/api/?#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">Vue指令：</a></p><p>v-text：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;!-- 和下面的一样 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>v-html：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;输出真正的 HTML</span><br><span class="line">&lt;div v-html&#x3D;&quot;html&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">data&#123;</span><br><span class="line">  html:&#39;&lt;strong&gt;我是真正的html&lt;&#x2F;strong&gt;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-show：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;根据表达式之真假值，切换元素的 display CSS 属性。</span><br><span class="line">&lt;h1 v-show&#x3D;&quot;ok&quot;&gt;Hello!&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><p>v-if、v-if-else、v-else：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;v-if 是“真正”的条件渲染，如果条件为假，dom不会渲染在页面当中</span><br><span class="line">&#x2F;&#x2F;v-show 会一直渲染在dom当中</span><br><span class="line">&#x2F;&#x2F;当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</span><br><span class="line">&lt;h1 v-if&#x3D;&quot;ok&quot;&gt;Yes&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 v-if&#x3D;&quot;ok&quot;&gt;Yes&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;No&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;B&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;C&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;Not A&#x2F;B&#x2F;C&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>v-for：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;基于源数据多次渲染元素或模板块。</span><br><span class="line">&lt;div v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;另外也可以为数组索引指定别名 (或者用于对象的键)：val-&gt;对象的键值  key-&gt;对象的键  index-&gt;对象的下标</span><br><span class="line">&lt;div v-for&#x3D;&quot;(item, index) in items&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-for&#x3D;&quot;(val, key) in object&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-for&#x3D;&quot;(val, key, index) in object&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>v-model：作用于<input>、<select>、<textarea>，<br>当v-model作用于 <strong>多个复选框</strong>、<strong>当选择按钮</strong>、<strong>选择框</strong> 时，都是把这些标签的value值赋值给v-model的变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰符：</span><br><span class="line">.lazy - 取代 &#96;input&#96; 监听 &#96;change&#96; 事件</span><br><span class="line">.number- 输入字符串转为数字</span><br><span class="line">.trim- 输入首尾空格过滤</span><br><span class="line"></span><br><span class="line">&lt;input v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;edit me&quot;&gt;</span><br><span class="line">&lt;textarea v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;add multiple lines&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 选择框</span><br><span class="line">&lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">   &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">   &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">   &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">   &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用 v-for 渲染的动态选项：</span><br><span class="line">&lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">  &lt;option v-for&#x3D;&quot;option in options&quot; v-bind:value&#x3D;&quot;option.value&quot;&gt;</span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  &lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>v-pre：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</span><br><span class="line">&#x2F;&#x2F;Mustache 标签：&#123;&#123; &#125;&#125;</span><br><span class="line">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>v-cloak：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这个指令保持在元素上直到关联实例结束编译</span><br><span class="line">css:</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">html:</span><br><span class="line">&lt;div v-cloak&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>v-once：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只渲染元素和组件一次。随后的重新渲染，元素&#x2F;组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</span><br><span class="line"></span><br><span class="line">&lt;!-- 单个元素 --&gt;</span><br><span class="line">&lt;span v-once&gt;This will never change: &#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;!-- 有子元素 --&gt;</span><br><span class="line">&lt;div v-once&gt;</span><br><span class="line">  &lt;h1&gt;comment&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 组件 --&gt;</span><br><span class="line">&lt;my-component v-once :comment&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">&lt;!-- &#96;v-for&#96; 指令--&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;i in list&quot; v-once&gt;&#123;&#123;i&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">Vue自定义指令：</a></p><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">指令的钩子函数：</a> 一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;bind&#96;：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span><br><span class="line"></span><br><span class="line">&#96;inserted&#96;：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</span><br><span class="line"></span><br><span class="line">&#96;update&#96;：1、所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。</span><br><span class="line">          2、指令的值可能发生了改变，也可能没有。</span><br><span class="line">          3、你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</span><br><span class="line"></span><br><span class="line">&#96;componentUpdated&#96;：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</span><br><span class="line"></span><br><span class="line">&#96;unbind&#96;：只调用一次，指令与元素解绑时调用。</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">钩子函数的参数</a> (即 el、binding、vnode 和 oldVnode)。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;el&#96;：指令所绑定的元素，可以用来直接操作 DOM 。</span><br><span class="line"></span><br><span class="line">&#96;binding&#96;：一个对象，包含以下属性：</span><br><span class="line">    &#96;name&#96;：指令名，不包括 &#96;v-&#96; 前缀。</span><br><span class="line">    &#96;value&#96;：指令的绑定值，例如：&#96;v-my-directive&#x3D;&quot;1 + 1&quot;&#96; 中，绑定值为 &#96;2&#96;。</span><br><span class="line">    &#96;oldValue&#96;：指令绑定的前一个值，仅在 &#96;update&#96; 和 &#96;componentUpdated&#96; 钩子中可用。无论值是否改变都可用。</span><br><span class="line">    &#96;expression&#96;：字符串形式的指令表达式。例如 &#96;v-my-directive&#x3D;&quot;1 + 1&quot;&#96; 中，表达式为 &#96;&quot;1 + 1&quot;&#96;。</span><br><span class="line">    &#96;arg&#96;：传给指令的参数，可选。例如 &#96;v-my-directive:foo&#96; 中，参数为 &#96;&quot;foo&quot;&#96;。</span><br><span class="line">    &#96;modifiers&#96;：一个包含修饰符的对象。例如：&#96;v-my-directive.foo.bar&#96; 中，修饰符对象为 &#96;&#123; foo: true, bar: true &#125;&#96;。</span><br><span class="line"></span><br><span class="line">&#96;vnode&#96;：Vue 编译生成的虚拟节点。移步(https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;api&#x2F;#VNode%E6%8E%A5%E5%8F%A3) 来了解更多详情。</span><br><span class="line"></span><br><span class="line">&#96;oldVnode&#96;：上一个虚拟节点，仅在 &#96;update&#96; 和 &#96;componentUpdated&#96; 钩子中可用。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注册一个全局自定义指令 &#96;v-focus&#96;</span><br><span class="line">&#x2F;&#x2F; 在这里需要注意一下，给一个全局指令命名的时候不要加 &#96;v-&#96; 前缀，用在dom的时候再加上</span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line">  &#x2F;&#x2F; 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted: function (el,binding) &#123;</span><br><span class="line">    &#x2F;&#x2F; 聚焦元素</span><br><span class="line">    el.focus();</span><br><span class="line">    console.log(binding.value) &#x2F;&#x2F;&#x3D;&gt;666</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果想注册局部指令，组件中也接受一个 directives 的选项：</span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    &#x2F;&#x2F; 指令的定义</span><br><span class="line">    inserted: function (el,binding) &#123;</span><br><span class="line">      el.focus(); </span><br><span class="line">      console.log(binding.value) &#x2F;&#x2F;&#x3D;&gt;666</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;然后你可以在模板中任何元素上使用新的 v-focus 属性，如下：</span><br><span class="line">&lt;input v-focus&#x3D;&quot;6666&quot;&gt;  &#x2F;&#x2F; 6666 可用data 里面的变量替换，建议传简单数据类型</span><br></pre></td></tr></table></figure><blockquote><p>一个正常的业务不可能只有一个指令，如果把所有的指令都注册在main.js里面会不好管理，所以最好放在一个统一文件 directives.js<br>这里就产生了两个问题：<br>1、怎么把directives.js 这个文件引用到main.js<br>2、Vue.directives() 支不支持链式调用（因为老版本angular 支持，所以做一个假想）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第二个问题很好解决，经过测试，Vue.directives() 不支持链式调用 &#96;Vue.directives().directives()&#96;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第一个问题：经过查阅相关资料之后可以以插件的形式引入</span><br><span class="line">&#x2F;&#x2F; 这种方式引入暂时还没有发现有其他的问题</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import directives from &#39;.&#x2F;directives.js&#39;</span><br><span class="line">Vue.use(directives);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; directives.js</span><br><span class="line">export default&#123;</span><br><span class="line">  &#x2F;&#x2F; install 方法会默认在main.js里面调用</span><br><span class="line">  install(Vue)&#123;</span><br><span class="line">    Vue.directive(&#39;focus&#39;,&#123;</span><br><span class="line">      inserted(el,binding)&#123;</span><br><span class="line">        el.focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Vue.directive(&#39;data&#39;,&#123;</span><br><span class="line">      inserted(el)&#123;</span><br><span class="line">        console.log(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;有多个就继续往这里添加就好了</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、Vue-过滤器"><a href="#四、Vue-过滤器" class="headerlink" title="四、Vue 过滤器"></a>四、Vue 过滤器</h4><p><a href="https://cn.vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener">Vue 过滤器的用法</a></p><blockquote><p>过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。<br>与指令的用法类似，但过滤器一定要有返回值，也不支持链式调用</p></blockquote><blockquote><p><strong>这里需要注意的地方是，vue 2.0 之后移除了自带的过滤器</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在双花括号中</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在 &#96;v-bind&#96; 中</span><br><span class="line">&lt;div v-bind:id&#x3D;&quot;rawId | formatId&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 局部注册过滤器</span><br><span class="line">filters: &#123;</span><br><span class="line">  &#x2F;&#x2F; 首字母大写</span><br><span class="line">  capitalize: function (value) &#123;</span><br><span class="line">    &#x2F;&#x2F; value 就是 ‘|’ 符号前面的值</span><br><span class="line">    if (!value) return &#39;&#39;;</span><br><span class="line">    value &#x3D; value.toString()</span><br><span class="line">    return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册全局过滤器</span><br><span class="line">Vue.filter(&#39;capitalize&#39;, function (value) &#123;</span><br><span class="line">  if (!value) return &#39;&#39;;</span><br><span class="line">  value &#x3D; value.toString()</span><br><span class="line">  return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 过滤器传值</span><br><span class="line">&#123;&#123; number | dual(2) &#125;&#125;</span><br><span class="line"></span><br><span class="line">Vue.filter(&#39;dual&#39;, function (value,type) &#123;</span><br><span class="line">  &#x2F;&#x2F; 回调函数里面默认有 value ,在页面上传过来的值会依次添加在后面</span><br><span class="line">  console.log(type)  &#x2F;&#x2F; &#x3D;&gt; 2</span><br><span class="line">  if (!value) return &#39;&#39;;</span><br><span class="line">  if (typeof value !&#x3D;&#x3D; &quot;number&quot;) return alert(value + &#39; 不是数字&#39;);</span><br><span class="line">  if( parseInt(type) &#x3D;&#x3D;&#x3D; 2 )&#123;</span><br><span class="line">    return value &#x3D; value &gt; 10 ? value : &#39;0&#39; + value</span><br><span class="line">  &#125;</span><br><span class="line">  return value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 过滤器的插件用法，与 directives.js 一致</span><br><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import directives from &#39;.&#x2F;filters.js&#39;</span><br><span class="line">Vue.use(filters);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; filters.js</span><br><span class="line">export default &#123;</span><br><span class="line">  install(Vue)&#123;</span><br><span class="line">    Vue.filter(&#39;dual&#39;, function (value,type) &#123;</span><br><span class="line">      if (!value) return &#39;&#39;;</span><br><span class="line">      if (typeof value !&#x3D;&#x3D; &quot;number&quot;) return alert(value + &#39; 不是数字&#39;);</span><br><span class="line">      if( parseInt(type) &#x3D;&#x3D;&#x3D; 2 )&#123;</span><br><span class="line">        return value &#x3D; value &gt; 10 ? value : &#39;0&#39; + value</span><br><span class="line">      &#125;</span><br><span class="line">      return value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、Vue-数据监听"><a href="#五、Vue-数据监听" class="headerlink" title="五、Vue 数据监听"></a>五、Vue 数据监听</h4><p><a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener">Vue 数据监听 watch</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; watch 基本用法与注意事项</span><br><span class="line">data: &#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  e: &#123;</span><br><span class="line">    f: &#123;</span><br><span class="line">      g: 5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  items: [</span><br><span class="line">    &#123; message: &#39;Foo&#39; &#125;,</span><br><span class="line">    &#123; message: &#39;Bar&#39; &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line">mounted: function()&#123;</span><br><span class="line">  this.a &#x3D; 2；</span><br><span class="line">  this.e.f.g &#x3D; 10;</span><br><span class="line">  this.$set(this.items, 0, &#123; message: &#39;AAA&#39; &#125;);  &#x2F;&#x2F; $set 赋值</span><br><span class="line">  this.items[0] &#x3D; &#123; message: &#39;AAA&#39; &#125;;  &#x2F;&#x2F; 直接赋值</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  &#x2F;&#x2F; 最简单最直接的监听方式，能监听简单的数据变化，这种方法默认就是执行 handler: function()&#123;&#125;</span><br><span class="line">  &#x2F;&#x2F; 注意：这种方式监听不到对象的变化</span><br><span class="line">  a: function(val, oldVal)&#123;</span><br><span class="line">    console.log(val);  &#x2F;&#x2F; &#x3D;&gt; 变化之后的数据</span><br><span class="line">    console.log(oldVal); &#x2F;&#x2F; &#x3D;&gt; 变化之前的数据</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 深度监听，这里要注意一下，这样的方式打印出来两个值都是变化之后的值</span><br><span class="line">  &#x2F;&#x2F; deep 的值默认为false，如果不写或者deep: false 都不能监听到对象值的变化</span><br><span class="line">  e: &#123;</span><br><span class="line">    handler: function (val, oldVal) &#123;</span><br><span class="line">      console.log(val);  &#x2F;&#x2F; &#x3D;&gt; 变化之后的数据</span><br><span class="line">      console.log(oldVal);  &#x2F;&#x2F; &#x3D;&gt; 变化之后的数据</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: true, </span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 如果要精准监听的对象值的变化，可以用这种方法</span><br><span class="line">  &#39;e.f.g&#39;: function (val, oldVal) &#123;</span><br><span class="line">    console.log(val);  &#x2F;&#x2F; &#x3D;&gt; 变化之后的数据</span><br><span class="line">    console.log(oldVal);  &#x2F;&#x2F; &#x3D;&gt; 变化之前的数据</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 监听数组</span><br><span class="line">  &#x2F;&#x2F; 由于 JavaScript 的限制，Vue 不能检测 this.items[0] &#x3D; &#123; message: &#39;AAA&#39; &#125;; 这种方式赋值的变化</span><br><span class="line">  &#x2F;&#x2F; 所以你要用 $set、或者数组变异的方法赋值</span><br><span class="line">  items: function(val, oldVal)&#123;</span><br><span class="line">    console.log(val);  &#x2F;&#x2F; &#x3D;&gt; 变化之后的数据</span><br><span class="line">    console.log(oldVal);  &#x2F;&#x2F; &#x3D;&gt; 变化之后的数据</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">Vue 数组更新检测</a></p><p>官网的介绍：<strong>由于 JavaScript 的限制，Vue 不能检测以下变动的数组</strong><br>换句话来说：<strong>这样赋值不触发视图更新</strong></p><ul><li>1、当你利用索引直接设置一个项时，例如：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.items[indexOfItem] &#x3D; newValue  &#x2F;&#x2F; indexOfItem 是指数组的index 下标</span><br></pre></td></tr></table></figure><ul><li>2、当你修改数组的长度时，例如：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.items.length &#x3D; newLength</span><br></pre></td></tr></table></figure><p>要解决上面问题，你可以用以下方式解决：</p><h6 id="1、Vue-set-target-key-value-，set方法有下面3个参数"><a href="#1、Vue-set-target-key-value-，set方法有下面3个参数" class="headerlink" title="1、Vue.set( target, key, value) ，set方法有下面3个参数"></a>1、<a href="https://cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">Vue.set( target, key, value)</a> ，set方法有下面3个参数</h6><ul><li>{Object | Array} target  – 给谁设置值（对象，数组）都可以</li><li>{string | number} key – 给对象设值，key 就是对象的key，给数组设值，key 就是数组的下标 index</li><li>{any} value – 添加任何值都可以</li></ul><h6 id="2、数组变异的方式"><a href="#2、数组变异的方式" class="headerlink" title="2、数组变异的方式"></a>2、数组变异的方式</h6><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">push()</a>：将一个或多个元素添加到数组的末尾，并返回新数组的长度。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noopener">pop()</a>：从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener">shift()</a>：从数组中删除第一个元素，并返回该元素的值。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">unshift()</a>：将一个或多个元素添加到数组的开头，并返回新数组的长度。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice()</a>：通过删除现有元素和/或添加新元素来更改一个数组的内容。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">sort()</a>：用<a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability" target="_blank" rel="noopener">就地（ in-place ）的算法</a>对数组的元素进行排序，并返回数组。 sort 排序不一定是<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E6.80.A7" target="_blank" rel="noopener">稳定的</a>。默认排序顺序是根据字符串Unicode码点。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener">reverse()</a>：将数组中元素的位置颠倒。</p><h4 id="六、Vue-组件"><a href="#六、Vue-组件" class="headerlink" title="六、Vue 组件"></a>六、Vue 组件</h4><p><a href="https://cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">Vue 组件基础</a></p><blockquote><p>组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。<br>注意：<strong>组件没有 el 这样根实例特有的选项；而根实例没有 props 这个子组件特有的属性</strong></p></blockquote><ul><li>Vue.component( 组件名 ,{ 选项 }) 全局注册</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 全局注册组件的时候必须写在Vue实例创建之前</span><br><span class="line">&#x2F;&#x2F; 下面这几种方式是等价的</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">var MyComponent &#x3D; Vue.extend(&#123;</span><br><span class="line">  template:&quot;&lt;h1&gt;我是全局组件&lt;&#x2F;h1&gt;&quot;</span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(&quot;my-component&quot;,MyComponent);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册组件，传入一个扩展过的构造器</span><br><span class="line">Vue.component(&#39;my-component&#39;, Vue.extend(&#123; &#x2F;* ... *&#x2F; &#125;))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span><br><span class="line">Vue.component(&#39;my-component&#39;, &#123; &#x2F;* ... *&#x2F; &#125;)</span><br></pre></td></tr></table></figure><ul><li>通常情况下一个组件肯定是由很多html标签组成的，如果全部写在template 里会非常难看且没有语法高亮提示，有没有其他解决办法？还真有</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 一个定义模板的方式是在一个 &lt;script&gt; 元素中，并为其带上 text&#x2F;x-template 的类型，然后通过一个 id 将模板引用过去。</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;x-template&quot; id&#x3D;&quot;hello-world-template&quot;&gt;</span><br><span class="line">  &lt;p&gt;Hello hello hello&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 另一个定义模板的方式是在一个 &lt;template&gt; 元素中，通过一个 id 将模板引用过去；在单文件组件 .vue 当中，id可以省略；</span><br><span class="line">&lt;template id&#x3D;&quot;hello-world-template&quot;&gt;</span><br><span class="line">  &lt;p&gt;Hello hello hello&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&quot;my-component&quot;,&#123;</span><br><span class="line">    template:&quot;#hello-world-template&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>引入外部单文件组件注册成全局组件</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .vue </span><br><span class="line">&#x2F;&#x2F; 在单文件组件中 template 标签下只能有一个根元素</span><br><span class="line">&#x2F;&#x2F; 如果硬要有多个根元素，你只能在多个根元素中添加 v-if、v-else-if、v-else 来判断什么时候用哪个根元素</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;getting&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!-- &lt;p&gt;这样是不行的&lt;&#x2F;p&gt; --&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;home&quot;,  &#x2F;&#x2F; 便于在vue-devtools 调试中提供更加友好的警告信息</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        getting: &#39;welcome&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&#x2F;&#x2F; 局部css样式</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import home from &#39;.&#x2F;components&#x2F;home&#x2F;home&#39;</span><br><span class="line">Vue.component(&#39;home&#39;,home);</span><br></pre></td></tr></table></figure><ul><li>局部注册组件</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 每个vue 实例都会有一个 components 的选项，而组件是可复用的 Vue 实例，所以每个组件都有components 选项</span><br><span class="line">&#x2F;&#x2F; 引入外部文件注册成局部组件</span><br><span class="line">import home from &#39;.&#x2F;components&#x2F;home&#x2F;home&#39;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&quot;#app&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    home, &#x2F;&#x2F; 等价于home: home，ES6对象中属性的简洁表示，ES6(http:&#x2F;&#x2F;es6.ruanyifeng.com&#x2F;#docs&#x2F;object)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 直接在components 选项中写，(不推荐这种用法)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&quot;#app&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    loading: &#123;</span><br><span class="line">      data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          getting: &#39;welcome&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">       &#x2F;&#x2F; 这里还可以嵌套局部组件... </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><h6 id="组件间的传值"><a href="#组件间的传值" class="headerlink" title="组件间的传值"></a>组件间的传值</h6></li></ul><p><a href="https://cn.vuejs.org/v2/guide/components-props.html" target="_blank" rel="noopener">通过 Prop 向子组件传递数据</a></p><ul><li>注意：这种传值方式是<a href="https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81" target="_blank" rel="noopener">单向数据流</a>，不可逆。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; HTML 中的特性名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。</span><br><span class="line">&#x2F;&#x2F; 这意味着当你使用 DOM 中的模板时，驼峰命名法的 prop 名需要使用其等价的 短横线分隔命名命名。</span><br><span class="line">&#x2F;&#x2F; 如果使用字符串模板，那么这个限制就不存在了。</span><br><span class="line">Vue.component(&#39;my-component&#39;, &#123;</span><br><span class="line">  props: [&#39;myTitle&#39;],</span><br><span class="line">  template: &#39;&lt;h3&gt;&#123;&#123; myTitle&#125;&#125;&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; HTML</span><br><span class="line">&lt;my-component my-title&#x3D;&#39;hello world&#39;&gt;&lt;&#x2F;my-component&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 上述例子只是一个静态数据传输，如果你要动态传输数据，可以用 v-bind 绑定一个属性</span><br><span class="line">&#x2F;&#x2F; 也可以用v-bind 的缩写形式</span><br><span class="line">&lt;my-component v-bind:my-title&#x3D;&#39;hello world&#39;&gt;&lt;&#x2F;my-component&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 任何类型的值都可以传递给 prop，prop 允许很多个</span><br><span class="line">&#x2F;&#x2F; 如果你想要将一个对象的所有属性都作为 prop 传入，你可以使用不带参数的 v-bind，如：</span><br><span class="line">obj: &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  title: &#39;Hello World&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;my-component v-bind&#x3D;&#39;obj&#39;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">&#x2F;&#x2F; 等价于：</span><br><span class="line">&lt;my-component </span><br><span class="line">  v-bind:id&#x3D;&#39;obj.id&#39;</span><br><span class="line">  v-bind:title&#x3D;&#39;obj.title&#39;</span><br><span class="line">&gt;&lt;&#x2F;my-component&gt;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener">Prop 还提供验证的方式指定传什么值</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;my-component&#39;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    &#x2F;&#x2F; 基础的类型检查 (&#96;null&#96; 匹配任何类型)</span><br><span class="line">    propA: Number,</span><br><span class="line">    &#x2F;&#x2F; 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    &#x2F;&#x2F; 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      &#x2F;&#x2F; 对象或数组且一定会从一个工厂函数返回默认值</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: &#39;hello&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        &#x2F;&#x2F; 这个值必须匹配下列字符串中的一个</span><br><span class="line">        return [&#39;success&#39;, &#39;warning&#39;, &#39;danger&#39;].indexOf(value) !&#x3D;&#x3D; -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>既然 prop 的单向的，那如果子组件向父组件传值怎么办？</p><ul><li>子传父，使用 <a href="https://cn.vuejs.org/v2/guide/components-custom-events.html" target="_blank" rel="noopener">自定义事件</a> 的方式</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 子组件,子组件可以通过$emit() 广播一个事件给父组件</span><br><span class="line">&#x2F;&#x2F; 命名的这个事件名没有限制，子组件与父组件的名字保持一致就可以了</span><br><span class="line">&lt;button v-on:click&#x3D;&quot;$emit(&#39;broadcast&#39;)&quot;&gt;向父组件广播这个事件&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; $emit() 这个方法也可以写在 子组件的 methods 里面</span><br><span class="line">&lt;button v-on:click&#x3D;&quot;broadcast&quot;&gt;向父组件广播这个事件&lt;&#x2F;button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">  broadcast()&#123;</span><br><span class="line">    this.$emit(&#39;broadcast&#39;)</span><br><span class="line">    &#x2F;&#x2F; 如果要传值，就使用$emit(事件名, 值) 的第二个参数</span><br><span class="line">    this.$emit(&#39;broadcast&#39;, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在父组件中，父组件可以用 v-on 监听子组件触发的 &#96;broadcast&#96; 事件，类似监听Dom 事件一样的用法</span><br><span class="line">&lt;my-component v-on:broadcast&#x3D;&#39;catchYou&#39;&gt;&lt;&#x2F;my-component&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">  catchYou(val)&#123;</span><br><span class="line">    &#x2F;&#x2F; 子组件传过来的值就会作为第一个参数传入这个方法 </span><br><span class="line">    console.log(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F; 在组件的表达式里面，你可以通过$event 访问到子组件传递过来的值</span><br><span class="line">&lt;my-component v-on:broadcast&#x3D;&#39;$event&#39;&gt;&lt;&#x2F;my-component&gt;</span><br></pre></td></tr></table></figure><ul><li>组件的一些其他用法，感兴趣可以去了解 <a href="https://cn.vuejs.org/v2/guide/components-slots.html" target="_blank" rel="noopener">插槽</a>   <a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="noopener">动态组件 &amp; 异步组件</a></li><li><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E5%8D%95%E5%85%83%E7%B4%A0-%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1" target="_blank" rel="noopener">单元素/组件的过渡</a></li></ul><h4 id="七、vue-router"><a href="#七、vue-router" class="headerlink" title="七、vue-router"></a>七、vue-router</h4><ul><li>贴一段 app 构建的案例。官网API <a href="https://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="noopener">点这里</a></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这里我让 app.vue作为最大的渲染层，渲染tabs --&gt;</span><br><span class="line">&lt;!-- 这里我模拟的是一个商场app，下面几个tab；点击&#96;tab&#96;直接渲染在&#96;tabs&#96;的&lt;router-view&gt;&lt;&#x2F;router-view&gt;上 --&gt;</span><br><span class="line">&lt;!-- tabs 之外的页面直接渲染在app.vue 的&lt;router-view&gt;&lt;&#x2F;router-view&gt;上 --&gt;</span><br><span class="line">&lt;!--  app.vue --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tabs.vue --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tabs&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;nav class&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">    &lt;router-link class&#x3D;&quot;nav-link&quot; to&#x3D;&quot;home&quot;&gt;</span><br><span class="line">      &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;p&gt;首页&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;nav&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 以下一些配置是简单要用到的，高级的用法请看官网</span><br><span class="line">&#x2F;&#x2F; router.js</span><br><span class="line">import tabs from &#39;.&#x2F;components&#x2F;tabs&#x2F;tabs&#39;</span><br><span class="line">import home from &#39;.&#x2F;components&#x2F;home&#x2F;home&#39;</span><br><span class="line">const router &#x3D;  new VueRouter(&#123;</span><br><span class="line">  mode: &#39;history&#39;,  &#x2F;&#x2F; 可选值: &quot;hash&quot; 、 &quot;history&quot; 、 &quot;abstract&quot; </span><br><span class="line">  linkActiveClass: &#39;active&#39;,  &#x2F;&#x2F; 默认值: &quot;router-link-active&quot; 全局配置 &lt;router-link&gt; 的默认『激活 class 类名』</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;&#x2F;tabs&quot;,    &#x2F;&#x2F; 指向的路径</span><br><span class="line">      name: &quot;tabs&quot;,   &#x2F;&#x2F; 命名路由，可以通过这个名称跳转到这个组件</span><br><span class="line">      component: tabs, &#x2F;&#x2F; 指向路径加载的组件</span><br><span class="line">      children: [  &#x2F;&#x2F; 嵌套路由也有跟父级一样的选项</span><br><span class="line">        &#123;</span><br><span class="line">          path:&quot;home&quot;,</span><br><span class="line">          name: &quot;home&quot;,</span><br><span class="line">          component: home, </span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      redirect: &#39;&#x2F;tabs&#x2F;home&#39;   &#x2F;&#x2F; 重定向，即无目标地址的时候转到这个路径</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">import router from &#39;.&#x2F;router.js&#39;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;);</span><br></pre></td></tr></table></figure><ul><li><a href="https://router.vuejs.org/zh/api/#router-link" target="_blank" rel="noopener">router-link</a> 的几种跳转方式</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 字符串模式，可以说是静态模式，不用v-bind --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;home&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 下面几种是动态模式 --&gt;</span><br><span class="line">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span><br><span class="line">&lt;router-link v-bind:to&#x3D;&quot;&#39;home&#39;&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#39;home&#39;&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 同上 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;home&#39; &#125;&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转到命名的路由 --&gt;</span><br><span class="line">&lt;!-- 这里有需要注意的地方是，如果路由有传值，那这里的params 就不能省略--&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39; , params: &#123; userId &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><ul><li>router 传值的几种方式<br><strong>注意：如果提供了 path，params 会被忽略，取而代之的是提供路由的 name 或手写完整的带有参数的 path，同样的规则也适用于 router-link 组件的 to 属性</strong></li><li>另外的传参方式，有兴趣可以了解一下 <a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">props</a></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在函数里面</span><br><span class="line">this.$router.push(&#123; name: &#39;user&#39;, params: &#123; userId &#125;&#125;)</span><br><span class="line">this.$router.push(&#123; path: &#96;&#x2F;user&#x2F;$&#123;userId&#125;&#96; &#125;)  &#x2F;&#x2F; &#96;$&#123; &#125;&#96; 是ES6 的模板字符串概念，标识符是 &#96; &#96;</span><br><span class="line">&#x2F;&#x2F; 这里的 params 不生效</span><br><span class="line">this.$router.push(&#123; path: &#39;&#x2F;user&#39;, params: &#123; userId &#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; router-link 传值</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;,params: &#123; userId &#125; &#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#96;&#x2F;user&#x2F;$&#123;userId&#125;&#96; &#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br><span class="line">&#x2F;&#x2F; 这里的 params 不生效</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;&#x2F;user&#39;, params: &#123; userId &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><ul><li>目标组件取值<br><strong>这里要很小心，是 this.$route，不是 this.$router，没有 r 的</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用这种方式获取路由传过来的值</span><br><span class="line">this.$route.params.userId</span><br></pre></td></tr></table></figure><ul><li>路由的命名视图，这里贴的是官网的例子，官网API <a href="https://router.vuejs.org/zh/guide/essentials/named-views.html#%E5%B5%8C%E5%A5%97%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE" target="_blank" rel="noopener">点这里</a></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view one&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view two&quot; name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;router-view class&#x3D;&quot;view three&quot; name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; js</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      components: &#123; &#x2F;&#x2F; 这里的 &#96;components&#96; 要跟上面的 &#96;component&#96; 区分一下，有多个视图渲染的时候有 &#96;s&#96;，别漏了</span><br><span class="line">        default: Foo,  &#x2F;&#x2F; 这是默认指定的 Foo 这个组件，也就是在没有命名的&lt;router-view&gt;上渲染</span><br><span class="line">        a: Bar,  &#x2F;&#x2F; 这里一一对应有 name 属性的&lt;router-view&gt;就可以了</span><br><span class="line">        b: Baz</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>几种导航的方法，官网 <a href="https://router.vuejs.org/zh/guide/essentials/navigation.html" target="_blank" rel="noopener">点这里</a><br>下面几种方法跟 window.history 的几种方法很像，其实就是仿照 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">window.history</a></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 往路由历史新增一条记录，相关参数参考官网</span><br><span class="line">this.$router.push(location, onComplete?, onAbort?)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替换掉当前的记录</span><br><span class="line">this.$router.replace(location, onComplete?, onAbort?)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在浏览器记录中前进一步，等同于 this.$router.forward()</span><br><span class="line">this.$router.go(1)</span><br><span class="line">this.$router.forward()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 后退一步记录，等同于 this.$router.back()</span><br><span class="line">this.$router.go(-1)</span><br><span class="line">this.$router.back()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前进 3 步记录</span><br><span class="line">this.$router.go(3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果 history 记录不够用，那就默默地失败呗</span><br><span class="line">this.$router.go(-100)</span><br><span class="line">this.$router.go(100)</span><br></pre></td></tr></table></figure><ul><li>路由跳转的时候支持过度动效，感兴趣可以去玩一下，官网 <a href="https://router.vuejs.org/zh/guide/advanced/transitions.html#%E5%8D%95%E4%B8%AA%E8%B7%AF%E7%94%B1%E7%9A%84%E8%BF%87%E6%B8%A1" target="_blank" rel="noopener">点这里</a> （还有其他更加高级的用法要靠自己去<a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html" target="_blank" rel="noopener">查阅</a>了）</li></ul><h4 id="八、axios"><a href="#八、axios" class="headerlink" title="八、axios"></a>八、axios</h4><p><a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios 英文文档</a><br><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">axios 中文文档 — 对英文文档的翻译</a><br><strong>axios 是基于 ES6 的 Promise 写的，具体可以看</strong> <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise 相关说明</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; npm 安装</span><br><span class="line">npm i axiso  &#x2F;&#x2F; 等价于 npm install axios ，i 是 install 的简写</span><br></pre></td></tr></table></figure><p><strong>axios 的一些简单用法</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; GET 请求</span><br><span class="line">&#x2F;&#x2F; 为给定 ID 的 user 创建请求</span><br><span class="line">axios.get(&#39;&#x2F;user?ID&#x3D;12345&#39;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 上面的请求可以这样做</span><br><span class="line">axios.get(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: 12345</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">  console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; POST 请求</span><br><span class="line">axios.post(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  执行多个并发请求</span><br><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&#39;&#x2F;user&#x2F;12345&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&#39;&#x2F;user&#x2F;12345&#x2F;permissions&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 这两个方法返回的都是 Promise 对象，这两个请求方法都成功返回的时候，下面方法才返回成功。</span><br><span class="line">&#x2F;&#x2F; 这两个方法中有一个返回不成功就算返回失败 </span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    &#x2F;&#x2F; 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><p><strong>通过向 axios 传递相关配置来创建请求</strong></p><ul><li>axios(config)</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 发送 POST 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">  method: &#39;post&#39;,</span><br><span class="line">  url: &#39;&#x2F;user&#x2F;12345&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>axios(url[, config])</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 发送 GET 请求（默认的方法）</span><br><span class="line">axios(&#39;&#x2F;user&#x2F;12345&#39;);</span><br></pre></td></tr></table></figure><p><strong>为方便，axios 还为支持的请求方法提供了别名，如：</strong><br><em>注意：在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</em></p><ul><li>axios.request(config)</li><li>axios.get(url[, config])</li><li>axios.delete(url[, config])</li><li>axios.head(url[, config])</li><li>axios.post(url[, data[, config]])</li><li>axios.put(url[, data[, config]])</li><li>axios.patch(url[, data[, config]])</li></ul><p><strong>处理并发请求的助手函数</strong></p><ul><li>axios.all(iterable)</li><li>axios.spread(callback)</li></ul><p><strong>还有其他高级用法，具体请查阅官网</strong> <a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios 英文文档</a></p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 11：实战快速上手</title>
    <link href="https://somunstao.github.io/2020/04/21/Vue%2011%EF%BC%9A%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://somunstao.github.io/2020/04/21/Vue%2011%EF%BC%9A%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-08-01T15:19:27.256Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：实战快速上手"><a href="#Vue：实战快速上手" class="headerlink" title="Vue：实战快速上手"></a>Vue：实战快速上手</h1><p>我们采用实战教学模式并结合 <code>ElementUI</code> 组件库，将所需知识点应用到实际中，以最快速度带领大家掌握 Vue 的使用;</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>注意： 命令行都要使用管理员模式运行</p><p>1、创建一个名为 hello-vue 的工程 <code>vue init webpack hello-vue</code><br>2、安装依赖，我们需要安装 vue-router、element-ui、sass-loader 和 node-sass 四个插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入工程目录</span><br><span class="line">cd hello-vue</span><br><span class="line"># 安装 vue-router</span><br><span class="line">npm install vue-router --save-dev</span><br><span class="line"># 安装 element-ui</span><br><span class="line">npm i element-ui -S</span><br><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"># 安装 SASS 加载器</span><br><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line"># 启动测试</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>3、Npm命令解释：</p><ul><li><code>npm install moduleName</code>：安装模块到项目目录下</li><li><code>npm install -g moduleName</code>：-g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置</li><li><code>npm install -save moduleName</code>：–save 的意思是将模块安装到项目目录下，并在 package 文件的 dependencies 节点写入依赖，-S 为该命令的缩写</li><li><code>npm install -save-dev moduleNam</code>e：–save-dev 的意思是将模块安装到项目目录下，并在 package 文件的 devDependencies 节点写入依赖，-D 为该命令的缩写</li></ul><h2 id="创建登录页面"><a href="#创建登录页面" class="headerlink" title="创建登录页面"></a>创建登录页面</h2><p>把没有用的初始化东西删掉！</p><p>在源码目录中创建如下结构：</p><ul><li>assets：用于存放资源文件</li><li>components：用于存放 Vue 功能组件</li><li>views：用于存放 Vue 视图组件</li><li>router：用于存放 vue-router 配置</li></ul><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1596391106.jpg" alt="QQ截图20191025101406.jpg"></p><p><strong>创建首页视图，在 views 目录下创建一个名为 Main.vue 的视图组件；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Main&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p><strong>创建登录页视图在 views 目录下创建一个名为 Login.vue 的视图组件，其中 el-* 的元素为 ElementUI 组件；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref&#x3D;&quot;loginForm&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class&#x3D;&quot;login-title&quot;&gt;欢迎登录&lt;&#x2F;h3&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;账号&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入账号&quot; v-model&#x3D;&quot;form.username&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot; v-model&#x3D;&quot;form.password&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; v-on:click&#x3D;&quot;onSubmit(&#39;loginForm&#39;)&quot;&gt;登录&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      title&#x3D;&quot;温馨提示&quot;</span><br><span class="line">      :visible.sync&#x3D;&quot;dialogVisible&quot;</span><br><span class="line">      width&#x3D;&quot;30%&quot;</span><br><span class="line">      :before-close&#x3D;&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;dialogVisible &#x3D; false&quot;&gt;确 定&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-dialog&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Login&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          username: &#39;&#39;,</span><br><span class="line">          password: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 表单验证，需要在 el-form-item 元素中增加 prop 属性</span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [</span><br><span class="line">            &#123;required: true, message: &#39;账号不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line">            &#123;required: true, message: &#39;密码不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 对话框显示和隐藏</span><br><span class="line">        dialogVisible: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit(formName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 为表单绑定验证功能</span><br><span class="line">        this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            &#x2F;&#x2F; 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span><br><span class="line">            this.$router.push(&quot;&#x2F;main&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.dialogVisible &#x3D; true;</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">  .login-box &#123;</span><br><span class="line">    border: 1px solid #DCDFE6;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line">    box-shadow: 0 0 25px #909399;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .login-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto 40px auto;</span><br><span class="line">    color: #303133;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p><strong>创建路由,在 router 目录下创建一个名为 index.js 的 vue-router 路由配置文件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">import Login from &quot;..&#x2F;views&#x2F;Login&quot;</span><br><span class="line">import Main from &#39;..&#x2F;views&#x2F;Main&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 登录页</span><br><span class="line">      path: &#39;&#x2F;login&#39;,</span><br><span class="line">      name: &#39;Login&#39;,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 首页</span><br><span class="line">      path: &#39;&#x2F;main&#39;,</span><br><span class="line">      name: &#39;Main&#39;,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>配置路由，修改入口代码，修改 main.js 入口代码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入 ElementUI</span><br><span class="line">import ElementUI from &#39;element-ui&#39;</span><br><span class="line">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;</span><br><span class="line"></span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装路由</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装 ElementUI</span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; 启用路由</span><br><span class="line">  router,</span><br><span class="line">  &#x2F;&#x2F; 启用 ElementUI</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改 App.vue 组件代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;App&#39;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>测试 ： 在浏览器打开 <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/#/login</p><p>如果出现错误: 可能是因为sass-loader的版本过高导致的编译错误，当前最高版本是8.x，需要退回到7.3.1 ；</p><p>去package.json文件里面的 “sass-loader”的版本更换成7.3.1，然后重新<code>cnpm install</code>就可以了；</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1972241333.jpg" alt="QQ截图20191025111608.jpg"></p><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;user&#x2F;foo&#x2F;profile                     &#x2F;user&#x2F;foo&#x2F;posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure><p>1、用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      个人信息</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;UserProfile&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>2、用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户列表</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;UserList&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>3、配置嵌套路由修改 router 目录下的 index.js 路由配置文件，代码如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">import Login from &quot;..&#x2F;views&#x2F;Login&quot;</span><br><span class="line">import Main from &#39;..&#x2F;views&#x2F;Main&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用于嵌套的路由组件</span><br><span class="line">import UserProfile from &#39;..&#x2F;views&#x2F;user&#x2F;Profile&#39;</span><br><span class="line">import UserList from &#39;..&#x2F;views&#x2F;user&#x2F;List&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 登录页</span><br><span class="line">      path: &#39;&#x2F;login&#39;,</span><br><span class="line">      name: &#39;Login&#39;,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 首页</span><br><span class="line">      path: &#39;&#x2F;main&#39;,</span><br><span class="line">      name: &#39;Main&#39;,</span><br><span class="line">      component: Main,</span><br><span class="line">      &#x2F;&#x2F; 配置嵌套路由</span><br><span class="line">      children: [</span><br><span class="line">        &#123;path: &#39;&#x2F;user&#x2F;profile&#39;, component: UserProfile&#125;,</span><br><span class="line">        &#123;path: &#39;&#x2F;user&#x2F;list&#39;, component: UserList&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>说明：主要在路由配置中增加了 children 数组配置，用于在该组件下设置嵌套路由</p><p>4、修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside width&#x3D;&quot;200px&quot;&gt;</span><br><span class="line">          &lt;el-menu :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">            &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">              &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;用户管理&lt;&#x2F;template&gt;</span><br><span class="line">              &lt;el-menu-item-group&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">                  &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;profile&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">                &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">                  &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">                &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">            &lt;&#x2F;el-submenu&gt;</span><br><span class="line">            &lt;el-submenu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">              &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;内容管理&lt;&#x2F;template&gt;</span><br><span class="line">              &lt;el-menu-item-group&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;分类管理&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;内容列表&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">            &lt;&#x2F;el-submenu&gt;</span><br><span class="line">          &lt;&#x2F;el-menu&gt;</span><br><span class="line">        &lt;&#x2F;el-aside&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">          &lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">            &lt;el-dropdown&gt;</span><br><span class="line">              &lt;i class&#x3D;&quot;el-icon-setting&quot; style&#x3D;&quot;margin-right: 15px&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">              &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">                &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">                &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">              &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">            &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">          &lt;&#x2F;el-header&gt;</span><br><span class="line"></span><br><span class="line">          &lt;el-main&gt;</span><br><span class="line">            &lt;router-view &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;el-main&gt;</span><br><span class="line">        &lt;&#x2F;el-container&gt;</span><br><span class="line">      &lt;&#x2F;el-container&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Main&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #B3C0D1;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><p>在 <el-main> 元素中配置了 <router-view /> 用于展示嵌套路由,主要使用 <router-link to="/user/profile">个人信息</router-link> 展示嵌套路由内容</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。此时我们就需要传递参数了；</p><p>1、修改路由配置, 主要是在 path 属性中增加了 :id 这样的占位符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;path: &#39;&#x2F;user&#x2F;profile&#x2F;:id&#39;, name:&#39;UserProfile&#39;, component: UserProfile&#125;</span><br></pre></td></tr></table></figure><p>2、传递参数</p><p>此时我们将 to 改为了 :to，是为了将这一属性当成对象使用，注意 router-link 中的 name 属性名称 一定要和 路由中的 name 属性名称 匹配，因为这样 Vue 才能找到对应的路由路径；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;name: &#39;UserProfile&#39;, params: &#123;id: 1&#125;&#125;&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>3、接收参数, 在目标组件中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; $route.params.id &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-props-的方式"><a href="#使用-props-的方式" class="headerlink" title="使用 props 的方式"></a>使用 props 的方式</h3><p>1、修改路由配置 , 主要增加了 props: true 属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;path: &#39;&#x2F;user&#x2F;profile&#x2F;:id&#39;, name:&#39;UserProfile&#39;, component: UserProfile, props: true&#125;</span><br></pre></td></tr></table></figure><p>2、传递参数和之前一样<br>3、接收参数为目标组件增加 props 属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    个人信息</span><br><span class="line">    &#123;&#123; id &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      props: [&#39;id&#39;],</span><br><span class="line">      name: &quot;UserProfile&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="组件重定向"><a href="#组件重定向" class="headerlink" title="组件重定向"></a>组件重定向</h2><p>重定向的意思大家都明白，但 Vue 中的重定向是作用在路径不同但组件相同的情况下，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;main&#39;,</span><br><span class="line">  name: &#39;Main&#39;,</span><br><span class="line">  component: Main</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;goHome&#39;,</span><br><span class="line">  redirect: &#39;&#x2F;main&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这里定义了两个路径，一个是 /main ，一个是 /goHome，其中 /goHome 重定向到了 /main 路径，由此可以看出重定向不需要定义组件；</p><p>使用的话，只需要设置对应路径即可；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;goHome&quot;&gt;回到首页&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;&#x2F;el-menu-item&gt;</span><br></pre></td></tr></table></figure><h2 id="路由模式与-404"><a href="#路由模式与-404" class="headerlink" title="路由模式与 404"></a>路由模式与 404</h2><p>路由模式有两种</p><ul><li>hash：路径带 # 符号，如 <a href="http://localhost/#/login" target="_blank" rel="noopener">http://localhost/#/login</a></li><li>history：路径不带 # 符号，如 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a></li></ul><p>修改路由配置，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  routes: [</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>处理 404</strong> 创建一个名为 <code>NotFound.vue</code> 的视图组件，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    页面不存在，请重试！</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;NotFount&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>修改路由配置，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import NotFound from &#39;..&#x2F;views&#x2F;NotFound&#39;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   path: &#39;*&#39;,</span><br><span class="line">   component: NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由钩子与异步请求"><a href="#路由钩子与异步请求" class="headerlink" title="路由钩子与异步请求"></a>路由钩子与异步请求</h3><p><code>beforeRouteEnter</code>：在进入路由前执行<br><code>beforeRouteLeave</code>：在离开路由前执行</p><p>上代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;id&#39;],</span><br><span class="line">  name: &quot;UserProfile&quot;,</span><br><span class="line">  beforeRouteEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>to：路由将要跳转的路径信息</li><li>from：路径跳转前的路径信息</li><li>next：路由的控制参数<ul><li>next() 跳入下一个页面</li><li>next(‘/path’) 改变路由的跳转方向，使其跳到另一个路由</li><li>next(false) 返回原来的页面</li><li>next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例</li></ul></li></ul><p><strong>在钩子函数中使用异步请求</strong></p><p>1、安装 Axios <code>cnpm install axios -s</code><br>2、<code>main.js</code>引用 Axios</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">Vue.prototype.axios &#x3D; axios;</span><br></pre></td></tr></table></figure><p>3、准备数据 ： 只有我们的 static 目录下的文件是可以被访问到的，所以我们就把静态文件放入该目录下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 静态数据存放的位置</span><br><span class="line">static&#x2F;mock&#x2F;data.json</span><br></pre></td></tr></table></figure><p>4、在 beforeRouteEnter 中进行异步请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">   props: [&#39;id&#39;],</span><br><span class="line">   name: &quot;UserProfile&quot;,</span><br><span class="line">   beforeRouteEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">     &#x2F;&#x2F; 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例</span><br><span class="line">     next(vm &#x3D;&gt; &#123;</span><br><span class="line">       vm.getData();</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line">   beforeRouteLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">     next();</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">     getData: function () &#123;</span><br><span class="line">       this.axios(&#123;</span><br><span class="line">         method: &#39;get&#39;,</span><br><span class="line">         url: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;static&#x2F;mock&#x2F;data.json&#39;</span><br><span class="line">       &#125;).then(function (repos) &#123;</span><br><span class="line">         console.log(repos);</span><br><span class="line">       &#125;).catch(function (error) &#123;</span><br><span class="line">         console.log(error);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 10：实战快速上手</title>
    <link href="https://somunstao.github.io/2020/04/20/Vue%2010%EF%BC%9A%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://somunstao.github.io/2020/04/20/Vue%2010%EF%BC%9A%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2020-04-19T16:00:00.000Z</published>
    <updated>2020-08-01T15:19:07.123Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：实战快速上手"><a href="#Vue：实战快速上手" class="headerlink" title="Vue：实战快速上手"></a>Vue：实战快速上手</h1><p>我们采用实战教学模式并结合 <code>ElementUI</code> 组件库，将所需知识点应用到实际中，以最快速度带领大家掌握 Vue 的使用;</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>注意： 命令行都要使用管理员模式运行</p><p>1、创建一个名为 hello-vue 的工程 <code>vue init webpack hello-vue</code><br>2、安装依赖，我们需要安装 vue-router、element-ui、sass-loader 和 node-sass 四个插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入工程目录</span><br><span class="line">cd hello-vue</span><br><span class="line"># 安装 vue-router</span><br><span class="line">npm install vue-router --save-dev</span><br><span class="line"># 安装 element-ui</span><br><span class="line">npm i element-ui -S</span><br><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"># 安装 SASS 加载器</span><br><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line"># 启动测试</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>3、Npm命令解释：</p><ul><li><code>npm install moduleName</code>：安装模块到项目目录下</li><li><code>npm install -g moduleName</code>：-g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置</li><li><code>npm install -save moduleName</code>：–save 的意思是将模块安装到项目目录下，并在 package 文件的 dependencies 节点写入依赖，-S 为该命令的缩写</li><li><code>npm install -save-dev moduleNam</code>e：–save-dev 的意思是将模块安装到项目目录下，并在 package 文件的 devDependencies 节点写入依赖，-D 为该命令的缩写</li></ul><h2 id="创建登录页面"><a href="#创建登录页面" class="headerlink" title="创建登录页面"></a>创建登录页面</h2><p>把没有用的初始化东西删掉！</p><p>在源码目录中创建如下结构：</p><ul><li>assets：用于存放资源文件</li><li>components：用于存放 Vue 功能组件</li><li>views：用于存放 Vue 视图组件</li><li>router：用于存放 vue-router 配置</li></ul><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1596391106.jpg" alt="QQ截图20191025101406.jpg"></p><p><strong>创建首页视图，在 views 目录下创建一个名为 Main.vue 的视图组件；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Main&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p><strong>创建登录页视图在 views 目录下创建一个名为 Login.vue 的视图组件，其中 el-* 的元素为 ElementUI 组件；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref&#x3D;&quot;loginForm&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class&#x3D;&quot;login-title&quot;&gt;欢迎登录&lt;&#x2F;h3&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;账号&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入账号&quot; v-model&#x3D;&quot;form.username&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot; v-model&#x3D;&quot;form.password&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; v-on:click&#x3D;&quot;onSubmit(&#39;loginForm&#39;)&quot;&gt;登录&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      title&#x3D;&quot;温馨提示&quot;</span><br><span class="line">      :visible.sync&#x3D;&quot;dialogVisible&quot;</span><br><span class="line">      width&#x3D;&quot;30%&quot;</span><br><span class="line">      :before-close&#x3D;&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;dialogVisible &#x3D; false&quot;&gt;确 定&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-dialog&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Login&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          username: &#39;&#39;,</span><br><span class="line">          password: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 表单验证，需要在 el-form-item 元素中增加 prop 属性</span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [</span><br><span class="line">            &#123;required: true, message: &#39;账号不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line">            &#123;required: true, message: &#39;密码不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 对话框显示和隐藏</span><br><span class="line">        dialogVisible: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit(formName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 为表单绑定验证功能</span><br><span class="line">        this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            &#x2F;&#x2F; 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span><br><span class="line">            this.$router.push(&quot;&#x2F;main&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.dialogVisible &#x3D; true;</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">  .login-box &#123;</span><br><span class="line">    border: 1px solid #DCDFE6;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line">    box-shadow: 0 0 25px #909399;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .login-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto 40px auto;</span><br><span class="line">    color: #303133;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p><strong>创建路由,在 router 目录下创建一个名为 index.js 的 vue-router 路由配置文件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">import Login from &quot;..&#x2F;views&#x2F;Login&quot;</span><br><span class="line">import Main from &#39;..&#x2F;views&#x2F;Main&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 登录页</span><br><span class="line">      path: &#39;&#x2F;login&#39;,</span><br><span class="line">      name: &#39;Login&#39;,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 首页</span><br><span class="line">      path: &#39;&#x2F;main&#39;,</span><br><span class="line">      name: &#39;Main&#39;,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>配置路由，修改入口代码，修改 main.js 入口代码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入 ElementUI</span><br><span class="line">import ElementUI from &#39;element-ui&#39;</span><br><span class="line">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;</span><br><span class="line"></span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装路由</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装 ElementUI</span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; 启用路由</span><br><span class="line">  router,</span><br><span class="line">  &#x2F;&#x2F; 启用 ElementUI</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改 App.vue 组件代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;App&#39;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>测试 ： 在浏览器打开 <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/#/login</p><p>如果出现错误: 可能是因为sass-loader的版本过高导致的编译错误，当前最高版本是8.x，需要退回到7.3.1 ；</p><p>去package.json文件里面的 “sass-loader”的版本更换成7.3.1，然后重新<code>cnpm install</code>就可以了；</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1972241333.jpg" alt="QQ截图20191025111608.jpg"></p><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;user&#x2F;foo&#x2F;profile                     &#x2F;user&#x2F;foo&#x2F;posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure><p>1、用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      个人信息</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;UserProfile&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>2、用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户列表</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;UserList&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>3、配置嵌套路由修改 router 目录下的 index.js 路由配置文件，代码如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">import Login from &quot;..&#x2F;views&#x2F;Login&quot;</span><br><span class="line">import Main from &#39;..&#x2F;views&#x2F;Main&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用于嵌套的路由组件</span><br><span class="line">import UserProfile from &#39;..&#x2F;views&#x2F;user&#x2F;Profile&#39;</span><br><span class="line">import UserList from &#39;..&#x2F;views&#x2F;user&#x2F;List&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 登录页</span><br><span class="line">      path: &#39;&#x2F;login&#39;,</span><br><span class="line">      name: &#39;Login&#39;,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 首页</span><br><span class="line">      path: &#39;&#x2F;main&#39;,</span><br><span class="line">      name: &#39;Main&#39;,</span><br><span class="line">      component: Main,</span><br><span class="line">      &#x2F;&#x2F; 配置嵌套路由</span><br><span class="line">      children: [</span><br><span class="line">        &#123;path: &#39;&#x2F;user&#x2F;profile&#39;, component: UserProfile&#125;,</span><br><span class="line">        &#123;path: &#39;&#x2F;user&#x2F;list&#39;, component: UserList&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>说明：主要在路由配置中增加了 children 数组配置，用于在该组件下设置嵌套路由</p><p>4、修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-aside width&#x3D;&quot;200px&quot;&gt;</span><br><span class="line">          &lt;el-menu :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">            &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">              &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;用户管理&lt;&#x2F;template&gt;</span><br><span class="line">              &lt;el-menu-item-group&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">                  &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;profile&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">                &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">                  &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">                &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">            &lt;&#x2F;el-submenu&gt;</span><br><span class="line">            &lt;el-submenu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">              &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;内容管理&lt;&#x2F;template&gt;</span><br><span class="line">              &lt;el-menu-item-group&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;分类管理&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">                &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;内容列表&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">            &lt;&#x2F;el-submenu&gt;</span><br><span class="line">          &lt;&#x2F;el-menu&gt;</span><br><span class="line">        &lt;&#x2F;el-aside&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">          &lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">            &lt;el-dropdown&gt;</span><br><span class="line">              &lt;i class&#x3D;&quot;el-icon-setting&quot; style&#x3D;&quot;margin-right: 15px&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">              &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">                &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">                &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">              &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">            &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">          &lt;&#x2F;el-header&gt;</span><br><span class="line"></span><br><span class="line">          &lt;el-main&gt;</span><br><span class="line">            &lt;router-view &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;el-main&gt;</span><br><span class="line">        &lt;&#x2F;el-container&gt;</span><br><span class="line">      &lt;&#x2F;el-container&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Main&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #B3C0D1;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><p>在 <el-main> 元素中配置了 <router-view /> 用于展示嵌套路由,主要使用 <router-link to="/user/profile">个人信息</router-link> 展示嵌套路由内容</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。此时我们就需要传递参数了；</p><p>1、修改路由配置, 主要是在 path 属性中增加了 :id 这样的占位符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;path: &#39;&#x2F;user&#x2F;profile&#x2F;:id&#39;, name:&#39;UserProfile&#39;, component: UserProfile&#125;</span><br></pre></td></tr></table></figure><p>2、传递参数</p><p>此时我们将 to 改为了 :to，是为了将这一属性当成对象使用，注意 router-link 中的 name 属性名称 一定要和 路由中的 name 属性名称 匹配，因为这样 Vue 才能找到对应的路由路径；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;name: &#39;UserProfile&#39;, params: &#123;id: 1&#125;&#125;&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>3、接收参数, 在目标组件中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; $route.params.id &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-props-的方式"><a href="#使用-props-的方式" class="headerlink" title="使用 props 的方式"></a>使用 props 的方式</h3><p>1、修改路由配置 , 主要增加了 props: true 属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;path: &#39;&#x2F;user&#x2F;profile&#x2F;:id&#39;, name:&#39;UserProfile&#39;, component: UserProfile, props: true&#125;</span><br></pre></td></tr></table></figure><p>2、传递参数和之前一样<br>3、接收参数为目标组件增加 props 属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    个人信息</span><br><span class="line">    &#123;&#123; id &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      props: [&#39;id&#39;],</span><br><span class="line">      name: &quot;UserProfile&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="组件重定向"><a href="#组件重定向" class="headerlink" title="组件重定向"></a>组件重定向</h2><p>重定向的意思大家都明白，但 Vue 中的重定向是作用在路径不同但组件相同的情况下，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;main&#39;,</span><br><span class="line">  name: &#39;Main&#39;,</span><br><span class="line">  component: Main</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;goHome&#39;,</span><br><span class="line">  redirect: &#39;&#x2F;main&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这里定义了两个路径，一个是 /main ，一个是 /goHome，其中 /goHome 重定向到了 /main 路径，由此可以看出重定向不需要定义组件；</p><p>使用的话，只需要设置对应路径即可；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;goHome&quot;&gt;回到首页&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;&#x2F;el-menu-item&gt;</span><br></pre></td></tr></table></figure><h2 id="路由模式与-404"><a href="#路由模式与-404" class="headerlink" title="路由模式与 404"></a>路由模式与 404</h2><p>路由模式有两种</p><ul><li>hash：路径带 # 符号，如 <a href="http://localhost/#/login" target="_blank" rel="noopener">http://localhost/#/login</a></li><li>history：路径不带 # 符号，如 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a></li></ul><p>修改路由配置，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default new Router(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  routes: [</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>处理 404</strong> 创建一个名为 <code>NotFound.vue</code> 的视图组件，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    页面不存在，请重试！</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;NotFount&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>修改路由配置，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import NotFound from &#39;..&#x2F;views&#x2F;NotFound&#39;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   path: &#39;*&#39;,</span><br><span class="line">   component: NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由钩子与异步请求"><a href="#路由钩子与异步请求" class="headerlink" title="路由钩子与异步请求"></a>路由钩子与异步请求</h3><p><code>beforeRouteEnter</code>：在进入路由前执行<br><code>beforeRouteLeave</code>：在离开路由前执行</p><p>上代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;id&#39;],</span><br><span class="line">  name: &quot;UserProfile&quot;,</span><br><span class="line">  beforeRouteEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>to：路由将要跳转的路径信息</li><li>from：路径跳转前的路径信息</li><li>next：路由的控制参数<ul><li>next() 跳入下一个页面</li><li>next(‘/path’) 改变路由的跳转方向，使其跳到另一个路由</li><li>next(false) 返回原来的页面</li><li>next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例</li></ul></li></ul><p><strong>在钩子函数中使用异步请求</strong></p><p>1、安装 Axios <code>cnpm install axios -s</code><br>2、<code>main.js</code>引用 Axios</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">Vue.prototype.axios &#x3D; axios;</span><br></pre></td></tr></table></figure><p>3、准备数据 ： 只有我们的 static 目录下的文件是可以被访问到的，所以我们就把静态文件放入该目录下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 静态数据存放的位置</span><br><span class="line">static&#x2F;mock&#x2F;data.json</span><br></pre></td></tr></table></figure><p>4、在 beforeRouteEnter 中进行异步请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">   props: [&#39;id&#39;],</span><br><span class="line">   name: &quot;UserProfile&quot;,</span><br><span class="line">   beforeRouteEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">     &#x2F;&#x2F; 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例</span><br><span class="line">     next(vm &#x3D;&gt; &#123;</span><br><span class="line">       vm.getData();</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line">   beforeRouteLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">     console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">     next();</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">     getData: function () &#123;</span><br><span class="line">       this.axios(&#123;</span><br><span class="line">         method: &#39;get&#39;,</span><br><span class="line">         url: &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;static&#x2F;mock&#x2F;data.json&#39;</span><br><span class="line">       &#125;).then(function (repos) &#123;</span><br><span class="line">         console.log(repos);</span><br><span class="line">       &#125;).catch(function (error) &#123;</span><br><span class="line">         console.log(error);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 09：vue-router路由</title>
    <link href="https://somunstao.github.io/2020/04/19/Vue%2009%EF%BC%9Avue-router%E8%B7%AF%E7%94%B1/"/>
    <id>https://somunstao.github.io/2020/04/19/Vue%2009%EF%BC%9Avue-router%E8%B7%AF%E7%94%B1/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-08-01T15:18:48.746Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：vue-router路由"><a href="#Vue：vue-router路由" class="headerlink" title="Vue：vue-router路由"></a>Vue：vue-router路由</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>学习的时候，尽量的打开官方的文档</p><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>基于第一个vue-cli进行测试学习;先查看node_modules中是否存在 vue-router</strong></p><p>vue-router 是一个插件包，所以我们还是需要用 npm/cnpm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure><p>如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>1、先删除没有用的东西<br>2、<code>components</code>目录下存放我们自己编写的组件<br>3、定义一个<code>Content.vue</code> 的组件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"> &lt;h1&gt;内容页&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">     name: &quot;Content&quot;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>4、 <strong>安装路由,在src目录下,新建一个文件夹 : router,专门存放路由</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">&#x2F;&#x2F; 导入路由插件</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">&#x2F;&#x2F; 导入上面定义的组件</span><br><span class="line">import Content from &#39;..&#x2F;components&#x2F;Content&#39;</span><br><span class="line">import main from &#39;..&#x2F;components&#x2F;main&#39;</span><br><span class="line">&#x2F;&#x2F; 安装路由</span><br><span class="line">Vue.use(Router);</span><br><span class="line">&#x2F;&#x2F; 配置路由</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F; 路由路径</span><br><span class="line">      path: &#39;&#x2F;content&#39;,</span><br><span class="line">      &#x2F;&#x2F; 路由名称</span><br><span class="line">      name: &#39;Content&#39;,</span><br><span class="line">      &#x2F;&#x2F; 跳转到组件</span><br><span class="line">      component: Content</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      &#x2F;&#x2F; 路由路径</span><br><span class="line">      path: &#39;&#x2F;main&#39;,</span><br><span class="line">      &#x2F;&#x2F; 路由名称</span><br><span class="line">      name: &#39;main&#39;,</span><br><span class="line">      &#x2F;&#x2F; 跳转到组件</span><br><span class="line">      component: main</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5、在<code>main.js</code> 中配置路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入上面创建的路由配置目录</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;来关闭生产模式下给出的提示</span><br><span class="line">Vue.config.productionTip &#x3D; false;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; 配置路由</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6、在<code>App.vue</code>中使用路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      router-link： 默认会被渲染成一个 &lt;a&gt; 标签，to 属性为指定链接</span><br><span class="line">      router-view： 用于渲染路由匹配到的组件</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #app &#123;</span><br><span class="line">    font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">    margin-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>启动测试一下 ： <code>npm run dev</code></p><p><strong>练习： 在现有的基础上，在增加一个路由组件，优化一下！</strong></p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 08：Webpack学习</title>
    <link href="https://somunstao.github.io/2020/04/18/Vue%2008%EF%BC%9AWebpack%E5%AD%A6%E4%B9%A0/"/>
    <id>https://somunstao.github.io/2020/04/18/Vue%2008%EF%BC%9AWebpack%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-17T16:00:00.000Z</published>
    <updated>2020-08-01T15:18:32.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue：Webpack学习"><a href="#Vue：Webpack学习" class="headerlink" title="Vue：Webpack学习"></a>Vue：Webpack学习</h1><h2 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h2><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.</p><p>Webpack 是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时再异步加载。通过 loader 转换，任何形式的资源都可以当做模块，比如 CommonsJS、AMD、ES6、CSS、JSON、CoffeeScript、LESS 等；</p><p>伴随着移动互联网的大潮，当今越来越多的网站已经从网页模式进化到了 WebApp 模式。它们运行在现代浏览器里，使用 HTML5、CSS3、ES6 等新的技术来开发丰富的功能，网页已经不仅仅是完成浏览器的基本需求；WebApp 通常是一个 SPA （单页面应用），每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JS 代码，这给前端的开发流程和资源组织带来了巨大挑战。</p><p>前端开发和其他开发工作的主要区别，首先是前端基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器的，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p><h3 id="模块化的演进"><a href="#模块化的演进" class="headerlink" title="模块化的演进"></a>模块化的演进</h3><h4 id="Script-标签"><a href="#Script-标签" class="headerlink" title="Script 标签"></a>Script 标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;module1.js&quot;&gt;&lt;&#x2F;scirpt&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;module2.js&quot;&gt;&lt;&#x2F;scirpt&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;module3.js&quot;&gt;&lt;&#x2F;scirpt&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;module4.js&quot;&gt;&lt;&#x2F;scirpt&gt;</span><br></pre></td></tr></table></figure><p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 window 对象中，不同模块的调用都是一个作用域。</p><p>这种原始的加载方式暴露了一些显而易见的弊端：</p><ul><li>全局作用域下容易造成变量冲突</li><li>文件只能按照 <script> 的书写顺序进行加载</li><li>开发人员必须主观解决模块和代码库的依赖关系</li><li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li></ul><h4 id="CommonsJS"><a href="#CommonsJS" class="headerlink" title="CommonsJS"></a>CommonsJS</h4><p>服务器端的 NodeJS 遵循 CommonsJS 规范，该规范核心思想是允许模块通过 require 方法来同步加载所需依赖的其它模块，然后通过 exports 或 module.exports 来导出需要暴露的接口。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&quot;module&quot;);</span><br><span class="line">require(&quot;..&#x2F;module.js&quot;);</span><br><span class="line">export.doStuff &#x3D; function() &#123;&#125;;</span><br><span class="line">module.exports &#x3D; someValue;</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>服务器端模块便于重用</li><li>NPM 中已经有超过 45 万个可以使用的模块包</li><li>简单易用</li></ul><p><strong>缺点:</strong></p><ul><li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li><li>不能非阻塞的并行加载多个模块</li></ul><p><strong>实现:</strong></p><ul><li>服务端的 NodeJS</li><li>Browserify，浏览器端的 CommonsJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积较大</li><li>modules-webmake，类似 Browserify，但不如 Browserify 灵活</li><li>wreq，Browserify 的前身</li></ul><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><p>Asynchronous Module Definition 规范其实主要一个主要接口 define(id?, dependencies?, factory); 它要在声明模块的时候指定所有的依赖 dependencies，并且还要当做形参传到 factory 中，对于依赖的模块提前执行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(&quot;module&quot;, [&quot;dep1&quot;, &quot;dep2&quot;], function(d1, d2) &#123;</span><br><span class="line">  return someExportedValue;</span><br><span class="line">&#125;);</span><br><span class="line">require([&quot;module&quot;, &quot;..&#x2F;file.js&quot;], function(module, file) &#123;&#125;);</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>适合在浏览器环境中异步加载模块</li><li>可以并行加载多个模块</li></ul><p><strong>缺点</strong></p><ul><li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不畅</li><li>不符合通用的模块化思维方式，是一种妥协的实现</li></ul><p><strong>实现</strong></p><ul><li>RequireJS</li><li>curl</li></ul><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>Commons Module Definition 规范和 AMD 很相似，尽量保持简单，并与 CommonsJS 和 NodeJS 的 Modules 规范保持了很大的兼容性。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">  var $ &#x3D; require(&quot;jquery&quot;);</span><br><span class="line">  var Spinning &#x3D; require(&quot;.&#x2F;spinning&quot;);</span><br><span class="line">  exports.doSomething &#x3D; ...;</span><br><span class="line">  module.exports &#x3D; ...;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>依赖就近，延迟执行</li><li>可以很容易在 NodeJS 中运行</li></ul><p><strong>缺点</strong></p><ul><li>依赖 SPM 打包，模块的加载逻辑偏重</li></ul><p><strong>实现</strong></p><ul><li>Sea.js</li><li>coolie</li></ul><h4 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h4><p>EcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。 ES6 模块的设计思想，是尽量静态化，使编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonsJS 和 AMD 模块，都只能在运行时确定这些东西。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;jquery&quot;;</span><br><span class="line">export function doStuff() &#123;&#125;</span><br><span class="line">module &quot;localModule&quot; &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>容易进行静态分析</li><li>面向未来的 EcmaScript 标准</li></ul><p><strong>缺点</strong></p><ul><li>原生浏览器端还没有实现该标准</li><li>全新的命令，新版的 NodeJS 才支持</li></ul><p><strong>实现</strong></p><ul><li>Babel</li></ul><p><strong>大家期望的模块系统</strong></p><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。</p><h2 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h2><p>WebPack 是一款模块加载器兼打包工具，它能把各种资源，如 JS、JSX、ES6、SASS、LESS、图片等都作为模块来处理和使用。</p><p><strong>安装:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure><p>测试安装成功:</p><ul><li><code>webpack -v</code></li><li><code>webpack-cli -v</code></li></ul><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2035564066.png" alt="QQ截图20191023173431.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>创建 <code>webpack.config.js</code> 配置文件</p><ul><li>entry：入口文件，指定 WebPack 用哪个文件作为项目的入口</li><li>output：输出，指定 WebPack 把处理完成的文件放置到指定路径</li><li>module：模块，用于处理各种类型的文件</li><li>plugins：插件，如：热更新、代码重用等</li><li>resolve：设置路径指向</li><li>watch：监听，用于设置文件改动后直接打包</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: &quot;&quot;,</span><br><span class="line">        filename: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;test: &#x2F;\.js$&#x2F;, loader: &quot;&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: &#123;&#125;,</span><br><span class="line">    resolve: &#123;&#125;,</span><br><span class="line">    watch: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行 <code>webpack</code> 命令打包</p><h2 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h2><ol><li><p>创建项目</p></li><li><p>创建一个名为 modules 的目录，用于放置 JS 模块等资源文件</p></li><li><p>在modules下创建模块文件，如 hello.js，用于编写 JS 模块相关代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;暴露一个方法:sayHi</span><br><span class="line">exports.sayHi &#x3D; function () &#123;</span><br><span class="line">  document.write(&quot;&lt;div&gt;Hello WebPack&lt;&#x2F;div&gt;&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在modules下创建一个名为 main.js 的入口文件，用于打包时设置 entry 属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;require 导入一个模块,就可以调用这个模块中的方法了</span><br><span class="line">var hello &#x3D; require(&quot;.&#x2F;hello&quot;);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure></li><li><p>在项目目录下创建 webpack.config.js 配置文件，使用 webpack 命令打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &quot;.&#x2F;modules&#x2F;main.js&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &quot;.&#x2F;js&#x2F;bundle.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在项目目录下创建 HTML 页面，如 index.html，导入 WebPack 打包后的 JS 文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line"> &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;dist&#x2F;js&#x2F;bundle.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>在IDEA控制台中直接执行webpack;如果失败的话,就使用管理员权限运行即可!</p></li><li><p>运行 HTML 看效果</p></li></ol><p><strong>说明:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 参数 --watch 用于监听变化</span><br><span class="line">webpack --watch</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 07：第一个vue-cli项目</title>
    <link href="https://somunstao.github.io/2020/04/17/Vue%2007%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AAvue-cli%E9%A1%B9%E7%9B%AE/"/>
    <id>https://somunstao.github.io/2020/04/17/Vue%2007%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AAvue-cli%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2020-08-01T15:18:13.793Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：第一个vue-cli项目"><a href="#Vue：第一个vue-cli项目" class="headerlink" title="Vue：第一个vue-cli项目"></a>Vue：第一个vue-cli项目</h1><h2 id="什么是vue-cli"><a href="#什么是vue-cli" class="headerlink" title="什么是vue-cli"></a>什么是vue-cli</h2><p>vue-cli 官方提供的一个脚手架,用于快速生成一个 vue 的项目模板;</p><p>预先定义好的目录结构及基础代码，就好比咱们在创建 Maven 项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架,我们的开发更加的快速;</p><p><strong>主要的功能:</strong></p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><h2 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h2><ul><li>Node.js : <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br>安装就无脑下一步就好,安装在自己的环境目录下</li><li>Git : <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>镜像:<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/</a></li></ul><p><strong>确认nodejs安装成功:</strong></p><ul><li>cmd 下输入 <code>node -v</code>,查看是否能够正确打印出版本号即可!</li><li>cmd 下输入 <code>npm-v</code>,查看是否能够正确打印出版本号即可!</li></ul><p>这个npm,就是一个软件包管理工具,就和linux下的apt软件安装差不多!</p><p><strong>安装 Node.js 淘宝镜像加速器（cnpm）</strong></p><p>这样子的话,下载会快很多~</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -g 就是全局安装</span><br><span class="line">npm install cnpm -g</span><br><span class="line"></span><br><span class="line"># 或使用如下语句解决 npm 速度慢的问题</span><br><span class="line">npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装过程可能有点慢~,耐心等待!虽然安装了cnpm,但是尽量少用!</p><p>安装的位置:<code>C:\Users\Administrator\AppData\Roaming\npm</code></p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3274148234.png" alt="QQ截图20191023160802.png"></p><p><strong>安装 vue-cli</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install vue-cli -g</span><br><span class="line"></span><br><span class="line"># 测试是否安装成功</span><br><span class="line"># 查看可以基于哪些模板创建 vue 应用程序，通常我们选择 webpack</span><br><span class="line">vue list</span><br></pre></td></tr></table></figure><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1623428782.png" alt="QQ截图20191023161055.png"></p><h2 id="第一个-vue-cli-应用程序"><a href="#第一个-vue-cli-应用程序" class="headerlink" title="第一个 vue-cli 应用程序"></a>第一个 vue-cli 应用程序</h2><ol><li><p>创建一个Vue项目,我们随便建立一个空的文件夹在电脑上,我这里在D盘下新建一个目录<code>D:\Project\vue-study</code>;</p></li><li><p>创建一个基于 webpack 模板的 vue 应用程序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这里的 myvue 是项目名称，可以根据自己的需求起名</span><br><span class="line">vue init webpack myvue</span><br></pre></td></tr></table></figure><p>一路都选择no即可;</p></li></ol><p><strong>说明:</strong></p><ul><li>Project name：项目名称，默认 回车 即可</li><li>Project description：项目描述，默认 回车 即可</li><li>Author：项目作者，默认 回车 即可</li><li>Install vue-router：是否安装 vue-router，选择 n 不安装（后期需要再手动添加）</li><li>Use ESLint to lint your code：是否使用 ESLint 做代码检查，选择 n 不安装（后期需要再手动添加）</li><li>Set up unit tests：单元测试相关，选择 n 不安装（后期需要再手动添加）</li><li>Setup e2e tests with Nightwatch：单元测试相关，选择 n 不安装（后期需要再手动添加）</li><li>Should we run npm install for you after the project has been created：创建完成后直接初始化，选择 n，我们手动执行;运行结果!<br><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1192113224.png" alt="QQ截图20191023161857.png"></li></ul><h3 id="初始化并运行"><a href="#初始化并运行" class="headerlink" title="初始化并运行"></a>初始化并运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd myvue</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>执行完成后,目录多了很多依赖</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1102095439.png" alt="QQ截图20191023162254.png"></p><p>安装并运行成功后在浏览器输入：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2731297978.png" alt="QQ截图20191023162439.png"></p><p><strong>效果:</strong></p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3761367777.png" alt="QQ截图20191023162508.png"></p><h2 id="Vue-cli目录结构"><a href="#Vue-cli目录结构" class="headerlink" title="Vue-cli目录结构"></a>Vue-cli目录结构</h2><p>我们用IDEA,open刚才的项目!</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3943650778.png" alt="QQ截图20191023162755.png"></p><ul><li>build 和 config：WebPack 配置文件</li><li>node_modules：用于存放 npm install 安装的依赖文件</li><li>src： 项目源码目录</li><li>static：静态资源文件</li><li>.babelrc：Babel 配置文件，主要作用是将 ES6 转换为 ES5</li><li>.editorconfig：编辑器配置</li><li>eslintignore：需要忽略的语法检查配置文件</li><li>.gitignore：git 忽略的配置文件</li><li>.postcssrc.js：css 相关配置文件，其中内部的 module.exports 是 NodeJS 模块化语法</li><li>index.html：首页，仅作为模板页，实际开发时不使用</li><li>package.json：项目的配置文件<ul><li>name：项目名称</li><li>version：项目版本</li><li>description：项目描述</li><li>author：项目作者</li><li>scripts：封装常用命令</li><li>dependencies：生产环境依赖</li><li>devDependencies：开发环境依赖</li></ul></li></ul><h2 id="src-目录"><a href="#src-目录" class="headerlink" title="src 目录"></a>src 目录</h2><p><code>src</code> 目录是项目的源码目录，所有代码都会写在这里</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1887353409.png" alt="QQ截图20191023164841.png"></p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>项目的入口文件，我们知道所有的程序都会有一个入口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; The Vue build version to load with the &#96;import&#96; command</span><br><span class="line">&#x2F;&#x2F; (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false;</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>import Vue from &#39;vue&#39;</code>：ES6 写法，会被转换成 require(“vue”); （require 是 NodeJS 提供的模块加载器）</li><li><code>import App from &#39;./App&#39;</code>：意思同上，但是指定了查找路径，./ 为当前目录</li><li><code>Vue.config.productionTip = false</code>：关闭浏览器控制台关于环境的相关提示</li><li><code>new Vue({...})</code>：实例化 Vue<ul><li><code>el: &#39;#app&#39;</code>：查找 index.html 中 id 为 app 的元素</li><li><code>template: &#39;&lt;App/&gt;&#39;</code>：模板，会将 index.html 中 <div id="app"></div> 替换为 <App /></li><li><code>components: { App }</code>：引入组件，使用的是 import App from ‘./App’ 定义的 App 组件;</li></ul></li></ul><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><ul><li>template：HTML 代码模板，会替换 <App /> 中的内容</li><li>import HelloWorld from ‘./components/HelloWorld’：引入 HelloWorld 组件，用于替换 template 中的 <HelloWorld/></li><li>export default{…}：导出 NodeJS 对象，作用是可以通过 import 关键字导入<ul><li>name: ‘App’：定义组件的名称</li><li>components: { HelloWorld }：定义子组件</li></ul></li></ul><p>在hello,Vue中,关于 <style scoped> 的说明：CSS 样式仅在当前组件有效，声明了样式的作用域,是当前的界面私有的!</p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 06：计算属性、内容分发、自定义事件</title>
    <link href="https://somunstao.github.io/2020/04/16/Vue%2006%EF%BC%9A%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <id>https://somunstao.github.io/2020/04/16/Vue%2006%EF%BC%9A%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-08-01T15:17:52.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue：计算属性、内容分发、自定义事件"><a href="#Vue：计算属性、内容分发、自定义事件" class="headerlink" title="Vue：计算属性、内容分发、自定义事件"></a>Vue：计算属性、内容分发、自定义事件</h1><h2 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h2><p>计算属性的重点突出在 <code>属性</code> 两个字上（属性是名词），首先它是个 <code>属性</code> 其次这个属性有 <code>计算</code> 的能力（计算是动词），这里的 <code>计算</code> 就是个函数；简单点说，它就是一个能够将计算结果缓存起来的属性（将行为转化成了静态的属性），仅此而已；可以想象为缓存！</p><p><strong>上代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;!--注意，一个是方法，一个是属性--&gt;</span><br><span class="line">    &lt;p&gt;调用当前时间的方法：&#123;&#123;currentTime1()&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;当前时间的计算属性：&#123;&#123;currentTime2&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;Hello Vue&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            currentTime1: function () &#123;</span><br><span class="line">                return Date.now();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            &#x2F;&#x2F;currentTime2 ，这是一个属性！不是方法</span><br><span class="line">            currentTime2: function () &#123;</span><br><span class="line">                this.message;</span><br><span class="line">                return Date.now();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：methods 和 computed 里的东西不能重名</strong></p><p><strong>说明：</strong></p><ul><li>methods：定义方法，调用方法使用 currentTime1()，需要带括号</li><li>computed：定义计算属性，调用属性使用 currentTime2，不需要带括号；this.message 是为了能够让 currentTime2 观察到数据变化而变化</li><li>如何在方法中的值发生了变化，则缓存就会刷新！可以在控制台使用 <code>vm.message=&quot;qinjiang&quot;</code>,改变下数据的值，再次测试观察效果！</li></ul><p><strong>结论：</strong></p><p>调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢？此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点,<strong>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销;</strong></p><h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>在 <code>Vue.js</code> 中我们使用 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口，作者称其为 插槽，可以应用在组合组件的场景中;</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>比如准备制作一个待办事项组件（todo），该组件由待办标题（todo-title）和待办内容（todo-items）组成，但这三个组件又是相互独立的，该如何操作呢？</p><p><strong>第一步: 定义一个待办事项的组件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;todo&gt;&lt;&#x2F;todo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    Vue.component(&#39;todo&#39;, &#123;</span><br><span class="line">        template: &#39;&lt;div&gt;\</span><br><span class="line">                    &lt;div&gt;待办事项&lt;&#x2F;div&gt;\</span><br><span class="line">                    &lt;ul&gt;\</span><br><span class="line">                        &lt;li&gt;学习狂神说Java&lt;&#x2F;li&gt;\</span><br><span class="line">                    &lt;&#x2F;ul&gt;\</span><br><span class="line">               &lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>第二步: 我们需要让,待办事项的标题和值实现动态绑定,怎么做呢? 我们可以留出一个插槽!</strong></p><p>1-将上面的代码留出一个插槽,即 slot</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;todo&#39;, &#123;</span><br><span class="line">    template: &#39;&lt;div&gt;\</span><br><span class="line">                    &lt;slot name&#x3D;&quot;todo-title&quot;&gt;&lt;&#x2F;slot&gt;\</span><br><span class="line">                    &lt;ul&gt;\</span><br><span class="line">                        &lt;slot name&#x3D;&quot;todo-items&quot;&gt;&lt;&#x2F;slot&gt;\</span><br><span class="line">                    &lt;&#x2F;ul&gt;\</span><br><span class="line">               &lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2-定义一个名为 todo-title 的待办标题组件 和 todo-items 的待办内容组件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;todo-title&#39;, &#123;</span><br><span class="line">    props: [&#39;title&#39;],</span><br><span class="line">    template: &#39;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这里的index,就是数组的下标,使用for循环遍历的时候,可以循环出来!</span><br><span class="line">Vue.component(&#39;todo-items&#39;, &#123;</span><br><span class="line">    props: [&#39;item&#39;, &#39;index&#39;],</span><br><span class="line">    template: &#39;&lt;li&gt;&#123;&#123;index + 1&#125;&#125;. &#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3-实例化 Vue 并初始化数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#vue&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        todoItems: [&#39;狂神说Java&#39;, &#39;狂神说运维&#39;, &#39;狂神说前端&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4-将这些值,通过插槽插入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;todo&gt;</span><br><span class="line">        &lt;todo-title slot&#x3D;&quot;todo-title&quot; title&#x3D;&quot;秦老师系列课程&quot;&gt;&lt;&#x2F;todo-title&gt;</span><br><span class="line">        &lt;todo-items slot&#x3D;&quot;todo-items&quot; v-for&#x3D;&quot;(item, index) in todoItems&quot; v-bind:item&#x3D;&quot;item&quot; v-bind:index&#x3D;&quot;index&quot; :key&#x3D;&quot;index&quot;&gt;&lt;&#x2F;todo-items&gt;</span><br><span class="line">    &lt;&#x2F;todo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>说明:我们的 todo-title 和 todo-items 组件分别被分发到了 todo 组件的 todo-title 和 todo-items 插槽中</p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>通过以上代码不难发现，数据项在 Vue 的实例中，但删除操作要在组件中完成，那么组件如何才能删除 Vue 实例中的数据呢？此时就涉及到参数传递与事件分发了，Vue 为我们提供了自定义事件的功能很好的帮助我们解决了这个问题；使用 this.$emit(‘自定义事件名’, 参数)，操作过程如下:</p><p>1-在vue的实例中,增加了 methods 对象并定义了一个名为 removeTodoItems 的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#vue&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: &quot;秦老师系列课程1&quot;,</span><br><span class="line">        todoItems: [&#39;狂神说Java&#39;, &#39;狂神说运维&#39;, &#39;狂神说前端&#39;]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 该方法可以被模板中自定义事件触发</span><br><span class="line">        removeTodoItems: function (index) &#123;</span><br><span class="line">            console.log(&quot;删除 &quot; + this.todoItems[index] + &quot; 成功&quot;);</span><br><span class="line">            &#x2F;&#x2F; splice() 方法向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目，其中 index 为添加&#x2F;删除项目的位置，1 表示删除的数量</span><br><span class="line">            this.todoItems.splice(index, 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2-修改 todo-items 待办内容组件的代码,增加一个删除按钮,并且绑定事件!</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;todo-items&#39;, &#123;</span><br><span class="line">    props: [&#39;item&#39;, &#39;index&#39;],</span><br><span class="line">    template: &#39;&lt;li&gt;&#123;&#123;index + 1&#125;&#125;. &#123;&#123;item&#125;&#125;  &lt;button @click&#x3D;&quot;remove_component&quot;&gt;删除&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;&#39;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        remove_component: function (index) &#123;</span><br><span class="line">            &#x2F;&#x2F; 这里的 remove 是自定义事件的名称，需要在 HTML 中使用 v-on:remove 的方式指派</span><br><span class="line">            this.$emit(&#39;remove&#39;, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3-修改 todo-items 待办内容组件的 HTML 代码,增加一个自定义事件,比如叫 remove,可以和组件的方法绑定,然后绑定到vue的方法中!</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--增加了 v-on:remove&#x3D;&quot;removeTodoItems(index)&quot; 自定义事件，该事件会调用 Vue 实例中定义的名为 removeTodoItems 的方法--&gt;</span><br><span class="line">&lt;todo-items slot&#x3D;&quot;todo-items&quot; v-for&#x3D;&quot;(item, index) in todoItems&quot;</span><br><span class="line">            v-bind:item&#x3D;&quot;item&quot; v-bind:index&#x3D;&quot;index&quot; :key&#x3D;&quot;index&quot;</span><br><span class="line">            v-on:remove&#x3D;&quot;removeTodoItems(index)&quot;&gt;&lt;&#x2F;todo-items&gt;</span><br></pre></td></tr></table></figure><h3 id="逻辑理解"><a href="#逻辑理解" class="headerlink" title="逻辑理解"></a>逻辑理解</h3><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2041589231.png" alt="20191023150103.png"></p><h2 id="Vue-入门小结"><a href="#Vue-入门小结" class="headerlink" title="Vue 入门小结"></a>Vue 入门小结</h2><p>核心 : 数据驱动 , 组件化<br>优点 : 借鉴了 AngulaJS 的模块化开发 和 React 的虚拟Dom , 虚拟Dom就是把Dom操作放到内存中执行;</p><p>常用的属性:</p><ul><li>v-if</li><li>v-else-if</li><li>v-else</li><li>v-for</li><li>v-on 绑定事件 , 简写<code>@</code></li><li>v-model 数据双向绑定</li><li>v-bind 给组件绑定参数,简写 <code>:</code></li></ul><p>组件化:</p><ul><li>组合组件 slot 插槽</li><li>组件内部绑定事件需要使用到 <code>this.$emit(&quot;事件名&quot;,参数)</code>;</li><li>计算属性的特色,缓存计算数据</li></ul><p>遵循SoC 关注度分离原则,Vue是纯粹的视图框架,并不包含,比如Ajax之类的通信功能,为了解决通信问题,我们需要使用Axios 框架做异步通信;</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Vue的开发都是要基于NodeJS, 实际开发采用 vue-cli脚手架开发,vue-router 路由,vuex做状态管理; Vue UI,界面我们一般使用 ElementUI(饿了么出品),或者ICE(阿里巴巴出品!)来快速搭建前端项目~</p><p>官网:</p><ul><li><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN</a></li><li><a href="https://ice.work/" target="_blank" rel="noopener">https://ice.work/</a></li></ul>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud-Alibaba 〖十五〗Sentinel〖中篇〗热点参数限流 系统规则 SentinelResource配置</title>
    <link href="https://somunstao.github.io/2020/04/15/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%BA%94%E3%80%97Sentinel%E3%80%96%E4%B8%AD%E7%AF%87%E3%80%97%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81%20%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%99%20SentinelResource%E9%85%8D%E7%BD%AE/"/>
    <id>https://somunstao.github.io/2020/04/15/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%BA%94%E3%80%97Sentinel%E3%80%96%E4%B8%AD%E7%AF%87%E3%80%97%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81%20%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%99%20SentinelResource%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-14T16:00:00.000Z</published>
    <updated>2020-08-02T04:31:18.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springcloud-Alibaba-〖十五〗Sentinel〖中篇〗热点参数限流-系统规则-SentinelResource配置"><a href="#Springcloud-Alibaba-〖十五〗Sentinel〖中篇〗热点参数限流-系统规则-SentinelResource配置" class="headerlink" title="Springcloud-Alibaba 〖十五〗Sentinel〖中篇〗热点参数限流 系统规则 SentinelResource配置"></a>Springcloud-Alibaba 〖十五〗Sentinel〖中篇〗热点参数限流 系统规则 SentinelResource配置</h1><h3 id="Springcloud-Alibaba-〖十五〗Sentinel-热点参数限流-系统规则-SentinelResource配置"><a href="#Springcloud-Alibaba-〖十五〗Sentinel-热点参数限流-系统规则-SentinelResource配置" class="headerlink" title="Springcloud-Alibaba 〖十五〗Sentinel 热点参数限流 系统规则 SentinelResource配置"></a>Springcloud-Alibaba 〖十五〗Sentinel 热点参数限流 系统规则 SentinelResource配置</h3><ul><li><ul><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105642215#PS_githubhttpsgithubcomktokingspringcloudalibaba_1" target="_blank" rel="noopener">PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105642215#__3" target="_blank" rel="noopener">一. 热点参数限流</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105642215#__12" target="_blank" rel="noopener">二. 热点规则配置</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#21_8401_13" target="_blank" rel="noopener">2.1 8401项目新增方法</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#22__Sentinel_29" target="_blank" rel="noopener">2.2 Sentinel配置热点规则</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#23__32" target="_blank" rel="noopener">2.3 测试</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#24__39" target="_blank" rel="noopener">2.4 热点规则高级配置</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105642215#__49" target="_blank" rel="noopener">三. 系统规则</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#31__54" target="_blank" rel="noopener">3.1 参数列表</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105642215#_SentinelResource_66" target="_blank" rel="noopener">四. SentinelResource配置</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#41_8401_68" target="_blank" rel="noopener">4.1 8401项目新增依赖</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#42_Controller_RateLimitController_78" target="_blank" rel="noopener">4.2 新增Controller RateLimitController</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#43__107" target="_blank" rel="noopener">4.3 新增限流规则</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#44__109" target="_blank" rel="noopener">4.4 测试</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#45_Url_113" target="_blank" rel="noopener">4.5 新增Url方法</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#46__128" target="_blank" rel="noopener">4.6 出现的问题</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#47__130" target="_blank" rel="noopener">4.7 全局的兜底方法</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105642215#48__167" target="_blank" rel="noopener">4.8 核心定义</a></li></ul></li></ul></li></ul></li></ul><h3 id="PS-github仓库仓库地址项目都放到里面了"><a href="#PS-github仓库仓库地址项目都放到里面了" class="headerlink" title="PS: github仓库仓库地址项目都放到里面了"></a>PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/热点参数限流" target="_blank" rel="noopener">Springcloud-Alibaba官网文档</a></p><h3 id="一-热点参数限流"><a href="#一-热点参数限流" class="headerlink" title="一. 热点参数限流"></a>一. 热点参数限流</h3><p><strong>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</strong></p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。<br><img src="https://img-blog.csdnimg.cn/20200420190709413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="二-热点规则配置"><a href="#二-热点规则配置" class="headerlink" title="二. 热点规则配置"></a>二. 热点规则配置</h3><h4 id="2-1-8401项目新增方法"><a href="#2-1-8401项目新增方法" class="headerlink" title="2.1 8401项目新增方法"></a>2.1 8401项目新增方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testHotKey"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"testHotKey"</span>,blockHandler = <span class="string">"deal_testHostkey"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(@RequestParam(value = <span class="string">"p1"</span>,required = <span class="keyword">false</span>)</span> String p1,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"p2"</span>,required = <span class="keyword">false</span>)</span> String p2) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-----testHotKey"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deal_testHostkey</span><span class="params">(String p1, String p2, BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-----deal_testHotKey"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><ul><li><strong>SentinelResource注解的 value 表示注册到Sentinel的资源名称</strong></li><li><strong>blockHandler 默认的兜底规则,表示出错了会返回我们自己写的方法中,其中我们自己写的方法中要增加一个BlockException 参数</strong></li></ul><h4 id="2-2-Sentinel配置热点规则"><a href="#2-2-Sentinel配置热点规则" class="headerlink" title="2.2 Sentinel配置热点规则"></a>2.2 Sentinel配置热点规则</h4><p><strong>当我们第一个参数访问次数大于1QPS我们会抛出我们自己的兜底方法</strong><br><img src="https://img-blog.csdnimg.cn/20200420192647384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h4><p><strong>当我们不超过规则时</strong><br><img src="https://img-blog.csdnimg.cn/20200420192819178.png" alt="在这里插入图片描述"><br><strong>当触发热点规则时(携带的参数为p1时),会返回我们自己定义的兜底方法,看起来是不是非常克莱弯呢~</strong><br><img src="https://img-blog.csdnimg.cn/20200420192813296.png" alt="在这里插入图片描述"><strong>但是我们没有携带指定参数p1时可以随便访问</strong><br><img src="https://img-blog.csdnimg.cn/20200420193230885.png" alt="在这里插入图片描述"></p><h4 id="2-4-热点规则高级配置"><a href="#2-4-热点规则高级配置" class="headerlink" title="2.4 热点规则高级配置"></a>2.4 热点规则高级配置</h4><p><strong>我们期望p1参数当它是某个特殊值时，它的限流值和平时不一样</strong></p><p>就是充钱了~我VIP不得是人上人吗?(暗示自己)<br><img src="https://img-blog.csdnimg.cn/20200420193745776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>测试,我们把参数设置为5随便点都不会限流(QPS&lt;=200)</strong><br><img src="https://img-blog.csdnimg.cn/20200420193813807.png" alt="在这里插入图片描述"></p><p><strong>PS小贴士~</strong><br><img src="https://img-blog.csdnimg.cn/20200420194128743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-系统规则"><a href="#三-系统规则" class="headerlink" title="三. 系统规则"></a>三. 系统规则</h3><p>官网复制机~~</p><p><strong>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</strong></p><h4 id="3-1-参数列表"><a href="#3-1-参数列表" class="headerlink" title="3.1 参数列表"></a>3.1 参数列表</h4><p><strong>系统规则支持以下的模式</strong>：</p><ul><li><strong>Load 自适应（</strong>仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200420195313988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四-SentinelResource配置"><a href="#四-SentinelResource配置" class="headerlink" title="四. SentinelResource配置"></a>四. SentinelResource配置</h3><h4 id="4-1-8401项目新增依赖"><a href="#4-1-8401项目新增依赖" class="headerlink" title="4.1 8401项目新增依赖"></a>4.1 8401项目新增依赖</h4><p><strong>这个是之前的公共类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aiguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="4-2-新增Controller-RateLimitController"><a href="#4-2-新增Controller-RateLimitController" class="headerlink" title="4.2 新增Controller RateLimitController"></a>4.2 新增Controller RateLimitController</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/byResource"</span> )</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byResource"</span> , blockHandler = <span class="string">"handleException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(  <span class="number">200</span>,  <span class="string">"按资源名称限流测试oK"</span> ,<span class="keyword">new</span> Payment(  <span class="number">2020L</span>, <span class="string">"serial001"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(  <span class="number">444</span>,  exception.getClass().getCanonicalName()+<span class="string">"\t  服务不可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h4 id="4-3-新增限流规则"><a href="#4-3-新增限流规则" class="headerlink" title="4.3 新增限流规则"></a>4.3 新增限流规则</h4><p><img src="https://img-blog.csdnimg.cn/20200420200833452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-4-测试"><a href="#4-4-测试" class="headerlink" title="4.4 测试"></a>4.4 测试</h4><p><strong>但是服务重启后,规则就消失了,所以这个是一个临时规则</strong><br><img src="https://img-blog.csdnimg.cn/20200420201031942.png" alt="在这里插入图片描述"></p><h4 id="4-5-新增Url方法"><a href="#4-5-新增Url方法" class="headerlink" title="4.5 新增Url方法"></a>4.5 新增Url方法</h4><p><strong>Controller层新增Url方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/rateLimit/byUrl"</span> )</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byUr1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(  <span class="number">200</span>, <span class="string">"按ur1限流测试oK"</span>,<span class="keyword">new</span> Payment( <span class="number">2020L</span>,  <span class="string">"seria1002"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200420201451113.png" alt="在这里插入图片描述"><br><strong>没配置的时候是默认的规则方法</strong></p><p><img src="https://img-blog.csdnimg.cn/20200420201721425.png" alt="在这里插入图片描述"></p><h4 id="4-6-出现的问题"><a href="#4-6-出现的问题" class="headerlink" title="4.6 出现的问题"></a>4.6 出现的问题</h4><p><img src="https://img-blog.csdnimg.cn/20200420202010924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-7-全局的兜底方法"><a href="#4-7-全局的兜底方法" class="headerlink" title="4.7 全局的兜底方法"></a>4.7 全局的兜底方法</h4><p><strong>controller新增方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/rateLimit/customerBlockHandler"</span> )</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"customerBlockHandler"</span>,</span><br><span class="line">                      blockHandlerClass = CustomerBlockHandler<span class="class">.<span class="keyword">class</span>,<span class="title">blockHandler</span></span>=<span class="string">"handlerException2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(  <span class="number">200</span>, <span class="string">"按客户自定义"</span>,<span class="keyword">new</span> Payment( <span class="number">2020L</span>,  <span class="string">"seria1003"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p><strong>新增全局兜底类(注意方法必须是static的)</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(  <span class="number">444</span>, <span class="string">"按客户自定义,global handlerException-------1 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(  <span class="number">444</span>, <span class="string">"按客户自定义,global handlerException-------2 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><p><strong>这里我们要切记</strong><br><img src="https://img-blog.csdnimg.cn/2020042020454438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>测试</strong><br><img src="https://img-blog.csdnimg.cn/20200420204315372.png" alt="在这里插入图片描述"></p><h4 id="4-8-核心定义"><a href="#4-8-核心定义" class="headerlink" title="4.8 核心定义"></a>4.8 核心定义</h4><p><img src="https://img-blog.csdnimg.cn/20200420205053584.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      Springcloud-Alibaba
    
    </summary>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/categories/Springcloud-Alibaba/"/>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/tags/Springcloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Vue 05：表单双绑、组件</title>
    <link href="https://somunstao.github.io/2020/04/15/Vue%2005%EF%BC%9A%E8%A1%A8%E5%8D%95%E5%8F%8C%E7%BB%91%E3%80%81%E7%BB%84%E4%BB%B6/"/>
    <id>https://somunstao.github.io/2020/04/15/Vue%2005%EF%BC%9A%E8%A1%A8%E5%8D%95%E5%8F%8C%E7%BB%91%E3%80%81%E7%BB%84%E4%BB%B6/</id>
    <published>2020-04-14T16:00:00.000Z</published>
    <updated>2020-08-01T15:17:33.652Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：表单双绑、组件"><a href="#Vue：表单双绑、组件" class="headerlink" title="Vue：表单双绑、组件"></a>Vue：表单双绑、组件</h1><h2 id="什么是双向数据绑定"><a href="#什么是双向数据绑定" class="headerlink" title="什么是双向数据绑定"></a>什么是双向数据绑定</h2><p>Vue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。</p><p>值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 <code>vuex</code>，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p><h3 id="为什么要实现数据的双向绑定"><a href="#为什么要实现数据的双向绑定" class="headerlink" title="为什么要实现数据的双向绑定"></a>为什么要实现数据的双向绑定</h3><p>在 <code>Vue.js</code> 中，如果使用 <code>vuex</code>，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p><h2 id="在表单中使用双向数据绑定"><a href="#在表单中使用双向数据绑定" class="headerlink" title="在表单中使用双向数据绑定"></a>在表单中使用双向数据绑定</h2><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><p><strong>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值!</strong></p><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--我们这里希望，输入框的值和&#123;&#125;取值动态绑定，实时相同，我们就使用v-model绑定message--&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    单行文本：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;hello&quot; &#x2F;&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &quot;Hello Vue&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    多行文本：&lt;textarea v-model&#x3D;&quot;message&quot;&gt;&lt;&#x2F;textarea&gt;&amp;nbsp;&amp;nbsp;多行文本是：&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &quot;Hello Textarea&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="单复选框"><a href="#单复选框" class="headerlink" title="单复选框"></a>单复选框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    单复选框：</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checked&quot;&gt;</span><br><span class="line">    &amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;label for&#x3D;&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            checked: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="多复选框"><a href="#多复选框" class="headerlink" title="多复选框"></a>多复选框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    多复选框：</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;jack&quot; value&#x3D;&quot;Jack&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;jack&quot;&gt;Jack&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;john&quot; value&#x3D;&quot;John&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;john&quot;&gt;John&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;mike&quot; value&#x3D;&quot;Mike&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;mike&quot;&gt;Mike&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;span&gt;选中的值: &#123;&#123; checkedNames &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            checkedNames: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    单选按钮：</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;one&quot; value&#x3D;&quot;One&quot; v-model&#x3D;&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;one&quot;&gt;One&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;two&quot; value&#x3D;&quot;Two&quot; v-model&#x3D;&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;two&quot;&gt;Two&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;span&gt;选中的值: &#123;&#123; picked &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            picked: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    下拉框：</span><br><span class="line">    &lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">        &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;span&gt;选中的值: &#123;&#123; selected &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            selected: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，<select> 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p><h2 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h2><p>组件是可复用的 <code>Vue</code> 实例，说白了就是一组可以重复使用的模板，跟 JSTL 的自定义标签、Thymeleaf 的 <code>th:fragment</code>等框架有着异曲同工之妙。通常一个应用会以一棵嵌套的组件树的形式来组织：</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1384909422.png" alt="vue-component.png"></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><h3 id="第一个-Vue-组件"><a href="#第一个-Vue-组件" class="headerlink" title="第一个 Vue 组件"></a>第一个 Vue 组件</h3><p>注意：在实际开发中，我们并不会用以下方式开发组件，而是采用 vue-cli 创建 .vue 模板文件的方式开发，以下方法只是为了让大家理解什么是组件。</p><p><strong>使用 Vue.component() 方法注册组件,格式如下：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F; 先注册组件</span><br><span class="line">    Vue.component(&#39;my-component-li&#39;, &#123;</span><br><span class="line">        template: &#39;&lt;li&gt;Hello li&lt;&#x2F;li&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 再实例化 Vue</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;my-component-li&gt;&lt;&#x2F;my-component-li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>Vue.component()：注册组件</li><li>my-component-li：自定义组件的名字</li><li>template：组件的模板</li></ul><h3 id="使用-props-属性传递参数"><a href="#使用-props-属性传递参数" class="headerlink" title="使用 props 属性传递参数"></a>使用 <code>props</code> 属性传递参数</h3><p>像上面那样用组件没有任何意义，所以我们是需要传递参数到组件的，此时就需要使用 <code>props</code> 属性了！</p><p><strong>注意：默认规则下 props 属性里的值不能为大写；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F; 先注册组件</span><br><span class="line">    Vue.component(&#39;my-component-li&#39;, &#123;</span><br><span class="line">        props: [&#39;item&#39;],</span><br><span class="line">        template: &#39;&lt;li&gt;Hello &#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 再实例化 Vue</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;my-component-li v-for&#x3D;&quot;item in items&quot; v-bind:item&#x3D;&quot;item&quot;&gt;&lt;&#x2F;my-component-li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>v-for=&quot;item in items&quot;</code>：遍历 <code>Vue</code> 实例中定义的名为 <code>items</code> 的数组，并创建同等数量的组件</li><li><code>v-bind:item=&quot;item&quot;</code>：将遍历的 <code>item</code> 项绑定到组件中 <code>props</code> 定义的名为 <code>item</code> 属性上；= 号左边的 item 为 props 定义的属性名，右边的为 <code>item in items</code> 中遍历的 item 项的值</li></ul>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud-Alibaba 〖十四〗Sentinel〖上篇〗 流控 降级</title>
    <link href="https://somunstao.github.io/2020/04/14/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E5%9B%9B%E3%80%97Sentinel%E3%80%96%E4%B8%8A%E7%AF%87%E3%80%97%20%E6%B5%81%E6%8E%A7%20%E9%99%8D%E7%BA%A7/"/>
    <id>https://somunstao.github.io/2020/04/14/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E5%9B%9B%E3%80%97Sentinel%E3%80%96%E4%B8%8A%E7%AF%87%E3%80%97%20%E6%B5%81%E6%8E%A7%20%E9%99%8D%E7%BA%A7/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2020-08-02T04:42:15.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springcloud-Alibaba-〖十四〗Sentinel〖上篇〗-流控-降级"><a href="#Springcloud-Alibaba-〖十四〗Sentinel〖上篇〗-流控-降级" class="headerlink" title="Springcloud-Alibaba 〖十四〗Sentinel〖上篇〗 流控 降级"></a>Springcloud-Alibaba 〖十四〗Sentinel〖上篇〗 流控 降级</h1><h3 id="Springcloud-Alibaba-〖十四〗Sentinel"><a href="#Springcloud-Alibaba-〖十四〗Sentinel" class="headerlink" title="Springcloud-Alibaba 〖十四〗Sentinel"></a>Springcloud-Alibaba 〖十四〗Sentinel</h3><ul><li><ul><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#PS_githubhttpsgithubcomktokingspringcloudalibaba_1" target="_blank" rel="noopener">PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#_Sentinel_6" target="_blank" rel="noopener">一. Sentinel是什么?</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#__22" target="_blank" rel="noopener">二. 安装使用</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#__cloudalibabasentinelservice8401_33" target="_blank" rel="noopener">三. 新建模块 cloudalibaba-sentinel-service8401</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#31__34" target="_blank" rel="noopener">3.1 项目结构</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#32_pom_36" target="_blank" rel="noopener">3.2 pom</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#33_applicationyml_102" target="_blank" rel="noopener">3.3 application.yml</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#34__132" target="_blank" rel="noopener">3.4 主启动类</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#35__151" target="_blank" rel="noopener">3.5 业务类</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#36__175" target="_blank" rel="noopener">3.6 测试</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#__184" target="_blank" rel="noopener">四. 流控规则</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#41__185" target="_blank" rel="noopener">4.1 流控规则介绍</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#42___209" target="_blank" rel="noopener">4.2 直接 快速失败</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#43___218" target="_blank" rel="noopener">4.3 关联 快速失败</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#44_Warm_Up_233" target="_blank" rel="noopener">4.4 流控效果——Warm Up</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#45__239" target="_blank" rel="noopener">4.5 流控效果——排队等待</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#__253" target="_blank" rel="noopener">五. 降级规则</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#51_RT_261" target="_blank" rel="noopener">5.1 RT</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#52__287" target="_blank" rel="noopener">5.2 异常比例</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105400023#53__292" target="_blank" rel="noopener">5.3 异常数</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#555_298" target="_blank" rel="noopener">不说了,准备实习面试了~可能会放慢更新速度555</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#_299" target="_blank" rel="noopener">下期来一波总结面试问题,奥里给,干了兄弟们</a></p></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105400023#_300" target="_blank" rel="noopener">转载请标注~</a></p></li></ul></li></ul><h3 id="PS-github仓库仓库地址项目都放到里面了"><a href="#PS-github仓库仓库地址项目都放到里面了" class="headerlink" title="PS: github仓库仓库地址项目都放到里面了"></a>PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</h3><p><strong>官网地址: <a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a></strong></p><p><strong>百度云下载地址: <a href="https://pan.baidu.com/s/1JGJJlOIqVkTxNf0L1ueJAg" target="_blank" rel="noopener">Sentinel-DashBoard1.7.0</a></strong> 提取码：gkaq</p><h3 id="一-Sentinel是什么"><a href="#一-Sentinel是什么" class="headerlink" title="一. Sentinel是什么?"></a>一. Sentinel是什么?</h3><p><strong>Sentinel: 分布式系统的流量防卫兵</strong></p><p><strong>Sentinel 具有以下特征:</strong></p><ul><li><strong>丰富的应用场景</strong>: Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。<br>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。<br>完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。<br>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。<br><img src="https://img-blog.csdnimg.cn/20200408231236451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="二-安装使用"><a href="#二-安装使用" class="headerlink" title="二. 安装使用"></a>二. 安装使用</h3><p><strong>运行jar包,sentinel默认端口8080,可以指定端口,我这里指定8085端口</strong><br><code>java -jar sentinel-dashboard-1.7.0.jar --server.port=8085</code><img src="https://img-blog.csdnimg.cn/20200409105030859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>登录控制台</strong></p><p>默认密码和用户都是sentinel<br><img src="https://img-blog.csdnimg.cn/20200409105050160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这里就登录上去了</strong><br><img src="https://img-blog.csdnimg.cn/20200409105145661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-新建模块-cloudalibaba-sentinel-service8401"><a href="#三-新建模块-cloudalibaba-sentinel-service8401" class="headerlink" title="三. 新建模块 cloudalibaba-sentinel-service8401"></a>三. 新建模块 cloudalibaba-sentinel-service8401</h3><h4 id="3-1-项目结构"><a href="#3-1-项目结构" class="headerlink" title="3.1 项目结构"></a>3.1 项目结构</h4><p><img src="https://img-blog.csdnimg.cn/20200409111024592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-2-pom"><a href="#3-2-pom" class="headerlink" title="3.2 pom"></a>3.2 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-service8401<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--pom.xml依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud alibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud alibaba sentinel--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061</span><br></pre></td></tr></table></figure><h4 id="3-3-application-yml"><a href="#3-3-application-yml" class="headerlink" title="3.3 application.yml"></a>3.3 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yml配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8085</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描，直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122232425</span></span><br></pre></td></tr></table></figure><h4 id="3-4-主启动类"><a href="#3-4-主启动类" class="headerlink" title="3.4 主启动类"></a>3.4 主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h4 id="3-5-业务类"><a href="#3-5-业务类" class="headerlink" title="3.5 业务类"></a>3.5 业务类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"--------testA"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testB"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"--------testB"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure><h4 id="3-6-测试"><a href="#3-6-测试" class="headerlink" title="3.6 测试"></a>3.6 测试</h4><p><strong>首先测试方法,可以访问到</strong><br><img src="https://img-blog.csdnimg.cn/20200409111614420.png" alt="在这里插入图片描述"><br><strong>这时候来到Nacos界面,发现服务已经注册进来</strong><br><img src="https://img-blog.csdnimg.cn/2020040911160395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>最后来到sentinel界面,由于sentinel是懒加载机制,这时我们多访问几次服务,发现有如下界面</strong><br><img src="https://img-blog.csdnimg.cn/20200409111552959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这样就完成了sentinel的基本使用</strong></p><h3 id="四-流控规则"><a href="#四-流控规则" class="headerlink" title="四. 流控规则"></a>四. 流控规则</h3><h4 id="4-1-流控规则介绍"><a href="#4-1-流控规则介绍" class="headerlink" title="4.1 流控规则介绍"></a>4.1 流控规则介绍</h4><p><img src="https://img-blog.csdnimg.cn/20200409112549151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>资源名</strong>：唯一名称，默认请求路径</li><li><strong>针对来源</strong>：Sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）</li><li><strong>阈值类型/单机阈值</strong>：</li></ul><ol><li>QPS（每秒钟的请求数量）：当调用该api的QPS达到阈值的时候，进行限流</li><li>线程数：当调用该api的线程数达到阈值的时候，进行限流</li></ol><ul><li><strong>是否集群</strong>：（不）需要集群</li><li><strong>流控模式</strong>：</li></ul><ol><li>直接：api达到限流条件时，直接限流</li><li>关联：当关联的资源达到阈值时，就限流自己</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）</li></ol><ul><li><strong>流控效果</strong>：</li></ul><ol><li>快速失败：直接失败，抛异常</li><li>Warm Up：根据codeFactor（冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值。</li><li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS。否则无效。</li></ol><h4 id="4-2-直接-快速失败"><a href="#4-2-直接-快速失败" class="headerlink" title="4.2 直接 快速失败"></a>4.2 直接 快速失败</h4><p><strong>我们来新增一个规则,1s只能有1次访问</strong><br><img src="https://img-blog.csdnimg.cn/20200409113329846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>表示1秒钟内查询1次就是OK,若超过次数1,就直接快速失败，报默认错误</p><p><strong>失败结果</strong></p><p><img src="https://img-blog.csdnimg.cn/20200409113434248.png" alt="在这里插入图片描述"></p><h4 id="4-3-关联-快速失败"><a href="#4-3-关联-快速失败" class="headerlink" title="4.3 关联 快速失败"></a>4.3 关联 快速失败</h4><p><strong>适合做应用的让步</strong></p><ul><li>当关联的资源达到阈值时，就限流自己</li><li>当与A关联的资源B达到阀值后，就限流A自己</li></ul><p><strong>设置关联资源/testB</strong><br><img src="https://img-blog.csdnimg.cn/20200409150738153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>postman测试</strong></p><p>这里我们起20个线程每隔0.3s访问一次<br><img src="https://img-blog.csdnimg.cn/20200409151409459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>可以看到/testB访问满了后,A服务直接挂了</strong><br><img src="https://img-blog.csdnimg.cn/2020040915153885.png" alt="在这里插入图片描述"></p><h4 id="4-4-流控效果——Warm-Up"><a href="#4-4-流控效果——Warm-Up" class="headerlink" title="4.4 流控效果——Warm Up"></a>4.4 流控效果——Warm Up</h4><p>Warm Up方式，即<strong>预热/冷启动方式</strong>。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过“冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。<br><img src="https://img-blog.csdnimg.cn/20200409161618113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认<strong>coldFactor</strong>为<strong>3</strong>，即请求QPS从threshold / 3开始，经预热时长逐渐升至设定的QPS阈值。<br>秒杀系统在开启的瞬间，会有很多流量进来，很有可能把系统打死，预热方式就是为了保护系统，可慢慢的把流量放进来，慢慢的把阈值增长到设置的阈值。<br><img src="https://img-blog.csdnimg.cn/20200409162240788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-5-流控效果——排队等待"><a href="#4-5-流控效果——排队等待" class="headerlink" title="4.5 流控效果——排队等待"></a>4.5 流控效果——排队等待</h4><p><strong>匀速排队</strong>,让请求以均匀的速度通过,阀值类型必须设成QPS,否则无效。<br>设置含义: /testA每秒1次请求，超过的话就排队等待，等待的超时时间为20000毫秒。</p><p>这种方式:主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景， 在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><p><strong>修改我们testB方法,打印当前线程日志</strong><br><img src="https://img-blog.csdnimg.cn/20200409165234853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>sentinel规则设置</strong><br><img src="https://img-blog.csdnimg.cn/20200409165607682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>并发测试</strong><br><img src="https://img-blog.csdnimg.cn/20200409165549982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409165750728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="五-降级规则"><a href="#五-降级规则" class="headerlink" title="五. 降级规则"></a>五. 降级规则</h3><p><img src="https://img-blog.csdnimg.cn/2020040916592182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200409170255198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Sentinel熔断降级会在调用链路中某个资源出现不稳定状态时(例如调用超时或异常比例升高)，对这个资源的调用进行限制,让请求快速失败，避免影响到其它的资源而导致级联错误。</li><li>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断(默认行为是抛出DegradeException)。</li></ul><h4 id="5-1-RT"><a href="#5-1-RT" class="headerlink" title="5.1 RT"></a>5.1 RT</h4><p><strong>controller层新增方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/testD"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"----- testD"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><strong>返回时间要是超过200毫秒,就会在1s内降级</strong><br><img src="https://img-blog.csdnimg.cn/20200409192916483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>测试</strong></p><p>这里每秒发10个线程过去<br><img src="https://img-blog.csdnimg.cn/20200409193204570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>再次访问我们的服务的时候,服务已经报错了</strong><br><img src="https://img-blog.csdnimg.cn/20200409193736793.png" alt="在这里插入图片描述"><br>永远一秒钟打进来10个线程(<strong>大于5个了</strong>)调用testD, 我们希望200毫秒处理完本次任务</p><p>如果超过200毫秒还没处理完，在未来1秒钟的时间窗口内，断路器打开(保险丝跳闸)微服务不可用，保险丝跳闸断电了后续我停止jmeter,没有这么大的访问量了，断路器关闭(保险丝恢复),微服务恢复OK</p><h4 id="5-2-异常比例"><a href="#5-2-异常比例" class="headerlink" title="5.2 异常比例"></a>5.2 异常比例</h4><p><strong>首先资源量要&gt;=5</strong><br><img src="https://img-blog.csdnimg.cn/20200409194353474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后台继续用Jmeter发请求,结果如下<br><img src="https://img-blog.csdnimg.cn/20200409194736845.png" alt="在这里插入图片描述"></p><h4 id="5-3-异常数"><a href="#5-3-异常数" class="headerlink" title="5.3 异常数"></a>5.3 异常数</h4><p><img src="https://img-blog.csdnimg.cn/20200409195121309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200409195352264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这里设置异常数大于5时,时间窗口设置70s显示</strong><br><img src="https://img-blog.csdnimg.cn/20200409195441977.png" alt="在这里插入图片描述"></p><h3 id="不说了-准备实习面试了-可能会放慢更新速度555"><a href="#不说了-准备实习面试了-可能会放慢更新速度555" class="headerlink" title="不说了,准备实习面试了~可能会放慢更新速度555"></a>不说了,准备实习面试了~可能会放慢更新速度555</h3><h3 id="下期来一波总结面试问题-奥里给-干了兄弟们"><a href="#下期来一波总结面试问题-奥里给-干了兄弟们" class="headerlink" title="下期来一波总结面试问题,奥里给,干了兄弟们"></a>下期来一波总结面试问题,奥里给,干了兄弟们</h3><h2 id="转载请标注"><a href="#转载请标注" class="headerlink" title="转载请标注~"></a>转载请标注~</h2>]]></content>
    
    <summary type="html">
    
      Springcloud-Alibaba
    
    </summary>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/categories/Springcloud-Alibaba/"/>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/tags/Springcloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Vue 04：Axios异步通信</title>
    <link href="https://somunstao.github.io/2020/04/14/Vue%2004%EF%BC%9AAxios%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/"/>
    <id>https://somunstao.github.io/2020/04/14/Vue%2004%EF%BC%9AAxios%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2020-08-01T15:17:11.703Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：Axios异步通信"><a href="#Vue：Axios异步通信" class="headerlink" title="Vue：Axios异步通信"></a>Vue：Axios异步通信</h1><h2 id="什么是Axios"><a href="#什么是Axios" class="headerlink" title="什么是Axios"></a>什么是Axios</h2><p>Axios 是一个开源的可以用在浏览器端和 <code>NodeJS</code> 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p><ul><li>从浏览器中创建 <code>XMLHttpRequests</code></li><li>从 node.js 创建 http 请求</li><li>支持 Promise API [JS中链式编程]</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF（跨站请求伪造）</li></ul><p>GitHub：<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p><p>中文文档：<a href="http://www.axios-js.com/" target="_blank" rel="noopener">http://www.axios-js.com/</a></p><h3 id="为什么要使用-Axios"><a href="#为什么要使用-Axios" class="headerlink" title="为什么要使用 Axios"></a>为什么要使用 Axios</h3><p>由于 <code>Vue.js</code> 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 <code>Vue.js</code> 并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 <code>vue-resource</code> 的插件，不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 <code>Axios</code> 框架。少用jQuery，因为它操作Dom太频繁！</p><h2 id="第一个-Axios-应用程序"><a href="#第一个-Axios-应用程序" class="headerlink" title="第一个 Axios 应用程序"></a>第一个 Axios 应用程序</h2><p>咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：创建一个名为 data.json 的文件并填入上面的内容，放在项目的根目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;blog.kuangstudy.com&quot;,</span><br><span class="line">  &quot;page&quot;: 1,</span><br><span class="line">  &quot;isNonProfit&quot;: true,</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;street&quot;: &quot;含光门&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;陕西西安&quot;,</span><br><span class="line">    &quot;country&quot;: &quot;中国&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;links&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;bilibili&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;space.bilibili.com&#x2F;95256449&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂伸说java&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;blog.kuangstudy.com&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;百度&quot;,</span><br><span class="line">      &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:v-bind&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!--v-cloak 解决闪烁问题--&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak] &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot; v-cloak&gt;</span><br><span class="line">    &lt;div&gt;名称：&#123;&#123;info.name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;地址：&#123;&#123;info.address.country&#125;&#125;-&#123;&#123;info.address.city&#125;&#125;-&#123;&#123;info.address.street&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;链接：&lt;a v-bind:href&#x3D;&quot;info.url&quot; target&#x3D;&quot;_blank&quot;&gt;&#123;&#123;info.url&#125;&#125;&lt;&#x2F;a&gt; &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--引入 JS 文件--&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                info: &#123;</span><br><span class="line">                    name: null,</span><br><span class="line">                    address: &#123;</span><br><span class="line">                        country: null,</span><br><span class="line">                        city: null,</span><br><span class="line">                        street: null</span><br><span class="line">                    &#125;,</span><br><span class="line">                    url: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123; &#x2F;&#x2F;钩子函数</span><br><span class="line">            axios</span><br><span class="line">                .get(&#39;data.json&#39;)</span><br><span class="line">                .then(response &#x3D;&gt; (this.info &#x3D; response.data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>说明:</p><ol><li>在这里使用了 v-bind 将 a:href 的属性值与 Vue 实例中的数据进行绑定</li><li>使用 axios 框架的 get 方法请求 AJAX 并自动将数据封装进了 Vue 实例的数据对象中</li><li>我们在data中的数据结构必须要和<code>Ajax</code>响应回来的数据格式匹配！</li></ol><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p>官方文档：<a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/instance.html#生命周期图示</a></p><p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载 DOM、渲染→更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。</p><p>在 Vue 的整个生命周期中，它提供了一系列的事件，可以让我们在事件触发时注册 JS 方法，可以让我们用自己注册的 JS 方法控制整个大局，在这些事件响应方法中的 this 直接指向的是 Vue 的实例。</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1579484219.jpg" alt="vue-life.jpg"></p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud-Alibaba 〖十三〗终于等到你 Nacos来啦!! Nacos做服务注册中心</title>
    <link href="https://somunstao.github.io/2020/04/13/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%B8%89%E3%80%97%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%20Nacos%E6%9D%A5%E5%95%A6!!%20Nacos%E5%81%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>https://somunstao.github.io/2020/04/13/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%B8%89%E3%80%97%E7%BB%88%E4%BA%8E%E7%AD%89%E5%88%B0%E4%BD%A0%20Nacos%E6%9D%A5%E5%95%A6!!%20Nacos%E5%81%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2020-04-12T16:00:00.000Z</published>
    <updated>2020-08-02T04:42:56.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springcloud-Alibaba-〖十三〗终于等到你-Nacos来啦-Nacos做服务注册中心"><a href="#Springcloud-Alibaba-〖十三〗终于等到你-Nacos来啦-Nacos做服务注册中心" class="headerlink" title="Springcloud-Alibaba 〖十三〗终于等到你 Nacos来啦!! Nacos做服务注册中心"></a>Springcloud-Alibaba 〖十三〗终于等到你 Nacos来啦!! Nacos做服务注册中心</h1><h3 id="Springcloud-Alibaba-〖十三〗Nacos来啦"><a href="#Springcloud-Alibaba-〖十三〗Nacos来啦" class="headerlink" title="Springcloud-Alibaba 〖十三〗Nacos来啦!!"></a>Springcloud-Alibaba 〖十三〗Nacos来啦!!</h3><ul><li><ul><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#PS_githubhttpsgithubcomktokingspringcloudalibaba_1" target="_blank" rel="noopener">PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#_SpringcloudAlibaba_2" target="_blank" rel="noopener">一. Springcloud-Alibaba</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#_Nacos_14" target="_blank" rel="noopener">二. Nacos安装</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#_Nacos_9001_26" target="_blank" rel="noopener">三. Nacos做服务注册中心 9001项目</a></p></li><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#31__30" target="_blank" rel="noopener">3.1 项目目录</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#32_pom_32" target="_blank" rel="noopener">3.2 pom</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#33_applicationyml_82" target="_blank" rel="noopener">3.3 application.yml</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#34__102" target="_blank" rel="noopener">3.4 主启动</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#35__120" target="_blank" rel="noopener">3.5 业务类</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#controller_121" target="_blank" rel="noopener">controller层</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#36__147" target="_blank" rel="noopener">3.6 测试</a></p></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#__154" target="_blank" rel="noopener">四. 集群测试</a></p></li><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#41__155" target="_blank" rel="noopener">4.1 配置集群(偷懒的办法~)</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#42__161" target="_blank" rel="noopener">4.2 测试</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#43_9002_168" target="_blank" rel="noopener">4.3 为了更好演示集群,这里还是重新创建一个9002项目</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#431__169" target="_blank" rel="noopener">4.3.1 项目目录</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#432_pom_172" target="_blank" rel="noopener">4.3.2 建pom</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#433_applicationyml_173" target="_blank" rel="noopener">4.3.3 application.yml</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#434__174" target="_blank" rel="noopener">4.3.4 主启动</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#435_controller_175" target="_blank" rel="noopener">4.3.5 业务类(controller层)</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#436__176" target="_blank" rel="noopener">4.3.6 测试</a></li></ul></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#_module_cloudalibabaconsumernacosorder83_179" target="_blank" rel="noopener">五. 新建module cloudalibaba-consumer-nacos-order83</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#51__182" target="_blank" rel="noopener">5.1 项目目录</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#52_pom_184" target="_blank" rel="noopener">5.2 pom</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#53_applicationyml_231" target="_blank" rel="noopener">5.3 application.yml</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#54__251" target="_blank" rel="noopener">5.4 主启动类</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#55__269" target="_blank" rel="noopener">5.5 业务类</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105230295#56__299" target="_blank" rel="noopener">5.6 测试</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#__305" target="_blank" rel="noopener">六. 总结</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#NacosNacos_313" target="_blank" rel="noopener">Nacos确实比较方便而且功能强大!下一篇会讲Nacos作为服务配置中心~</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105230295#__314" target="_blank" rel="noopener">关注不迷路,点赞走一波~ 转载请标注~</a></p></li></ul></li></ul></li></ul><h3 id="PS-github仓库仓库地址项目都放到里面了"><a href="#PS-github仓库仓库地址项目都放到里面了" class="headerlink" title="PS: github仓库仓库地址项目都放到里面了"></a>PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</h3><h3 id="一-Springcloud-Alibaba"><a href="#一-Springcloud-Alibaba" class="headerlink" title="一. Springcloud-Alibaba"></a>一. Springcloud-Alibaba</h3><p><strong>官网地址:</strong><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md" target="_blank" rel="noopener">Springcloud-Alibaba</a></p><ul><li><strong>服务限流降级</strong>: 默认支持Servlet. Feign. RestTemplate、 Dubbo 和RocketMQ限流降级功能的接入，可以在运行时通过控制台实时修改限流降<br>级规则，还支持查看限流降级Metrics监控。</li><li><strong>服务注册与发现</strong>: 适配Spring Cloud服务注册与发现标准,默认集成了Ribbon的支持。</li><li><strong>分布式配置管理</strong>: 支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>消息驱动能力</strong>: Spring Cloud Stream为微服务应用构建消息驱动能力。阿里云对象存储:阿里云提供的海量、安全、低成本、可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>: 提供秒级、精准、可靠可用的定时(基于Cron表达式)任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker (schedulerx- client). 上执行。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h3 id="二-Nacos安装"><a href="#二-Nacos安装" class="headerlink" title="二. Nacos安装"></a>二. Nacos安装</h3><p>前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</p><p><strong>Nacos就是注册中心+配置中心的组合 Nacos=Eureka+Config+Bus</strong></p><p><strong>Nacos</strong>:<a href="https://github.com/alibaba/nacos/releases/tag/1.1.4" target="_blank" rel="noopener">官网下载地址</a></p><p><strong>下载解压后,找到nacos/bin目录下的startup.cmd命令点开</strong><br><img src="https://img-blog.csdnimg.cn/20200331201648832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331201807701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>默认的账号密码都是 nacos,进入local:8848/nacos就可以进入我们的控制台</strong><br><img src="https://img-blog.csdnimg.cn/2020033120194142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-Nacos做服务注册中心-9001项目"><a href="#三-Nacos做服务注册中心-9001项目" class="headerlink" title="三. Nacos做服务注册中心 9001项目"></a>三. Nacos做服务注册中心 9001项目</h3><p><strong>首先你的父POM一定要有Springcloud-Alibaba依赖</strong><br><img src="https://img-blog.csdnimg.cn/20200331214253401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-1-项目目录"><a href="#3-1-项目目录" class="headerlink" title="3.1 项目目录"></a>3.1 项目目录</h4><p><img src="https://img-blog.csdnimg.cn/20200331220622292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-2-pom"><a href="#3-2-pom" class="headerlink" title="3.2 pom"></a>3.2 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--本pom.xml引入nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span><br></pre></td></tr></table></figure><h4 id="3-3-application-yml"><a href="#3-3-application-yml" class="headerlink" title="3.3 application.yml"></a>3.3 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span>  <span class="comment">#监控</span></span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><h4 id="3-4-主启动"><a href="#3-4-主启动" class="headerlink" title="3.4 主启动"></a>3.4 主启动</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h4 id="3-5-业务类"><a href="#3-5-业务类" class="headerlink" title="3.5 业务类"></a>3.5 业务类</h4><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"nacos registry,serverPort: "</span>+ serverPort+<span class="string">"\t id"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h4 id="3-6-测试"><a href="#3-6-测试" class="headerlink" title="3.6 测试"></a>3.6 测试</h4><p><strong>首先来测试方法,可以访问到</strong><br><img src="https://img-blog.csdnimg.cn/20200331220853510.png" alt="在这里插入图片描述"><br><strong>这时候我们来访问Nacos的UI界面,发现服务已经注册上来</strong><br><img src="https://img-blog.csdnimg.cn/20200331220913970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>点开详情可以看见更多信息</strong><br><img src="https://img-blog.csdnimg.cn/20200331220923221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四-集群测试"><a href="#四-集群测试" class="headerlink" title="四. 集群测试"></a>四. 集群测试</h3><h4 id="4-1-配置集群-偷懒的办法"><a href="#4-1-配置集群-偷懒的办法" class="headerlink" title="4.1 配置集群(偷懒的办法~)"></a>4.1 配置集群(偷懒的办法~)</h4><p><img src="https://img-blog.csdnimg.cn/20200331221336397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这时候可以从已经配置过的9001复制一份模板来</strong><br><img src="https://img-blog.csdnimg.cn/20200331221645124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这时候我们启动9011服务</strong><br><img src="https://img-blog.csdnimg.cn/20200331221708648.png" alt="在这里插入图片描述"></p><h4 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2 测试"></a>4.2 测试</h4><p><strong>打开我们的Nacos控制台发现实例数量为2</strong><br><img src="https://img-blog.csdnimg.cn/20200331221827749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>测试方法9001</strong><br><img src="https://img-blog.csdnimg.cn/20200331221856820.png" alt="在这里插入图片描述"><br><strong>测试方法9011</strong><br><img src="https://img-blog.csdnimg.cn/20200331221922825.png" alt="在这里插入图片描述"></p><h4 id="4-3-为了更好演示集群-这里还是重新创建一个9002项目"><a href="#4-3-为了更好演示集群-这里还是重新创建一个9002项目" class="headerlink" title="4.3 为了更好演示集群,这里还是重新创建一个9002项目"></a>4.3 为了更好演示集群,这里还是重新创建一个9002项目</h4><h5 id="4-3-1-项目目录"><a href="#4-3-1-项目目录" class="headerlink" title="4.3.1 项目目录"></a>4.3.1 项目目录</h5><p><strong>基本与9001一样,只是端口号不一样,所以以下只贴出步骤,不演示(一模一样的还让我演示?orz)</strong><br><img src="https://img-blog.csdnimg.cn/20200331223226946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="4-3-2-建pom"><a href="#4-3-2-建pom" class="headerlink" title="4.3.2 建pom"></a>4.3.2 建pom</h5><h5 id="4-3-3-application-yml"><a href="#4-3-3-application-yml" class="headerlink" title="4.3.3 application.yml"></a>4.3.3 application.yml</h5><h5 id="4-3-4-主启动"><a href="#4-3-4-主启动" class="headerlink" title="4.3.4 主启动"></a>4.3.4 主启动</h5><h5 id="4-3-5-业务类-controller层"><a href="#4-3-5-业务类-controller层" class="headerlink" title="4.3.5 业务类(controller层)"></a>4.3.5 业务类(controller层)</h5><h5 id="4-3-6-测试"><a href="#4-3-6-测试" class="headerlink" title="4.3.6 测试"></a>4.3.6 测试</h5><p><img src="https://img-blog.csdnimg.cn/20200331223608230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="五-新建module-cloudalibaba-consumer-nacos-order83"><a href="#五-新建module-cloudalibaba-consumer-nacos-order83" class="headerlink" title="五. 新建module cloudalibaba-consumer-nacos-order83"></a>五. 新建module cloudalibaba-consumer-nacos-order83</h3><p><strong>Nacos天生支持负载均衡因为依赖引入了ribbon</strong><br><img src="https://img-blog.csdnimg.cn/20200331224031926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="5-1-项目目录"><a href="#5-1-项目目录" class="headerlink" title="5.1 项目目录"></a>5.1 项目目录</h4><p><img src="https://img-blog.csdnimg.cn/20200331225655637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="5-2-pom"><a href="#5-2-pom" class="headerlink" title="5.2 pom"></a>5.2 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order83<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br></pre></td></tr></table></figure><h4 id="5-3-application-yml"><a href="#5-3-application-yml" class="headerlink" title="5.3 application.yml"></a>5.3 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称（成功注册进nacos的微服务提供者），在这配置了访问的服务，业务类就不用在定义常量了</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><h4 id="5-4-主启动类"><a href="#5-4-主启动类" class="headerlink" title="5.4 主启动类"></a>5.4 主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><h4 id="5-5-业务类"><a href="#5-5-业务类" class="headerlink" title="5.5 业务类"></a>5.5 业务类</h4><p><strong>controller层</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    因为在yml中配置了service-url.nacos-user-service，</span></span><br><span class="line"><span class="comment">    这里不需要再定义要访问微服务名常量，而是通过boot直接读出来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;service-url.nacos-user-service&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">"/payment/nacos/"</span>+id,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122232425</span></span><br></pre></td></tr></table></figure><h4 id="5-6-测试"><a href="#5-6-测试" class="headerlink" title="5.6 测试"></a>5.6 测试</h4><p><strong>这里我们在Nacos看见消费者已经注册进来了</strong><br><img src="https://img-blog.csdnimg.cn/20200331225931625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这时我们来测试负载均衡,访问controller层方法一次是9001,一次是9002,负载均衡测试成功!</strong><br><img src="https://img-blog.csdnimg.cn/20200331225909578.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200331225915932.png" alt="在这里插入图片描述"></p><h3 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h3><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务监控检查</th><th>对外暴露接口</th><th>Springcloud集成</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>可配支持</td><td>HTTP</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP/DNS</td><td>已集成</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr><tr><td>Nacos</td><td>Java</td><td>AP/CP</td><td>支持</td><td>HTTP/DNS/UDP</td><td>已集成</td></tr></tbody></table><h3 id="Nacos确实比较方便而且功能强大-下一篇会讲Nacos作为服务配置中心"><a href="#Nacos确实比较方便而且功能强大-下一篇会讲Nacos作为服务配置中心" class="headerlink" title="Nacos确实比较方便而且功能强大!下一篇会讲Nacos作为服务配置中心~"></a>Nacos确实比较方便而且功能强大!下一篇会讲Nacos作为服务配置中心~</h3><h3 id="关注不迷路-点赞走一波-转载请标注"><a href="#关注不迷路-点赞走一波-转载请标注" class="headerlink" title="关注不迷路,点赞走一波~ 转载请标注~"></a>关注不迷路,点赞走一波~ 转载请标注~</h3>]]></content>
    
    <summary type="html">
    
      Springcloud-Alibaba
    
    </summary>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/categories/Springcloud-Alibaba/"/>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/tags/Springcloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Vue 03：基础语法</title>
    <link href="https://somunstao.github.io/2020/04/13/Vue%2003%EF%BC%9A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://somunstao.github.io/2020/04/13/Vue%2003%EF%BC%9A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-04-12T16:00:00.000Z</published>
    <updated>2020-08-01T15:16:45.568Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：基础语法"><a href="#Vue：基础语法" class="headerlink" title="Vue：基础语法"></a>Vue：基础语法</h1><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们在控制台操作对象属性，界面可以实时更新！</p><p>我们还可以使用<code>v-bind</code>来绑定元素特性!</p><p><strong>上代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:v-bind&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;span v-bind:title&#x3D;&quot;message&quot;&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;页面加载于 &#39; + new Date().toLocaleString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>你看到的 v-bind 等被称为指令。指令带有前缀 v-，以表示它们是 Vue 提供的特殊特性。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 title 特性和 Vue 实例的 message 属性保持一致”。</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 app.message = ‘新消息’，就会再一次看到这个绑定了 title 特性的 HTML 已经进行了更新。</p><h2 id="v-if-v-else"><a href="#v-if-v-else" class="headerlink" title="v-if,v-else"></a>v-if,v-else</h2><p>什么是条件判断语句，就不需要我说明了吧（￣▽￣）,以下两个属性！</p><ul><li><code>v-if</code></li><li><code>v-else</code></li></ul><p><strong>上代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;ok&quot;&gt;YES&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;NO&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            ok: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><ol><li>在浏览器上运行，打开控制台！</li><li>在控制台输入 <code>vm.ok = false</code> ，然后 回车，你会发现浏览器中显示的内容会直接变成 NO</li></ol><p>注：使用 <code>v-*</code> 属性绑定数据是不需要 <code>双花括号</code> 包裹的</p><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h2><ul><li>v-if</li><li>v-else-if</li><li>v-else</li></ul><p>注：<code>===</code> 三个等号在 JS 中表示绝对等于（就是数据与类型都要相等）</p><p><strong>上代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&gt;A&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&gt;B&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&gt;C&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;who&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            type: &#39;A&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试：观察在控制台输入 vm.type = ‘B’、’C’、’D’ 的变化</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>v-for</li></ul><p>格式说明：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>注：<code>items</code> 是数组，<code>item</code>是数组元素迭代的别名。我们之后学习的Thymeleaf模板引擎的语法和这个十分的相似！</p><p><strong>上代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            &#x2F;&#x2F;items数组</span><br><span class="line">            items: [</span><br><span class="line">                &#123;message: &#39;狂神说Java&#39;&#125;,</span><br><span class="line">                &#123;message: &#39;狂神说前端&#39;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试 ：在控制台输入 <code>vm.items.push({message: &#39;狂神说运维&#39;})</code> ，尝试追加一条数据，你会发现浏览器中显示的内容会增加一条 <code>狂神说运维</code>.</p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p><code>v-on</code> 监听事件</p><p>事件有Vue的事件、和前端页面本身的一些事件！我们这里的<code>click</code>是vue的事件，可以绑定到Vue中的<code>methods</code>中的方法事件！</p><p><strong>上代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:v-on&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &lt;!--在这里我们使用了 v-on 绑定了 click 事件，并指定了名为 sayHi 的方法--&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;sayHi&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;Hello World&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 方法必须定义在 Vue 实例的 methods 对象中</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sayHi: function (event) &#123;</span><br><span class="line">                &#x2F;&#x2F; &#96;this&#96; 在方法里指向当前 Vue 实例</span><br><span class="line">                alert(this.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>点击测试</p><p>Vue还有一些基本的使用方式，大家有需要的可以再跟着官方文档看看，因为这些基本的指令几乎我们都见过了，一通百通！掌握学习的方式！</p><p><a href="https://blog.kuangstudy.com/index.php/tag/Vue/" target="_blank" rel="noopener">VUE</a></p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud-Alibaba 〖十二〗Stream 整合Rocketmq 简化消息生产者与消费者 消息总线BUS概念</title>
    <link href="https://somunstao.github.io/2020/04/12/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%BA%8C%E3%80%97Springcloud%20Stream%20%E6%95%B4%E5%90%88Rocketmq%20%E7%AE%80%E5%8C%96%E6%B6%88%E6%81%AF%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BFBUS%E6%A6%82%E5%BF%B5/"/>
    <id>https://somunstao.github.io/2020/04/12/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%BA%8C%E3%80%97Springcloud%20Stream%20%E6%95%B4%E5%90%88Rocketmq%20%E7%AE%80%E5%8C%96%E6%B6%88%E6%81%AF%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BFBUS%E6%A6%82%E5%BF%B5/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-08-02T04:27:23.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springcloud-Alibaba-〖十二〗Springcloud-Stream-整合Rocketmq-简化消息生产者与消费者-消息总线BUS概念"><a href="#Springcloud-Alibaba-〖十二〗Springcloud-Stream-整合Rocketmq-简化消息生产者与消费者-消息总线BUS概念" class="headerlink" title="Springcloud-Alibaba 〖十二〗Springcloud Stream 整合Rocketmq 简化消息生产者与消费者 消息总线BUS概念"></a>Springcloud-Alibaba 〖十二〗Springcloud Stream 整合Rocketmq 简化消息生产者与消费者 消息总线BUS概念</h1><h3 id="Springcloud-Alibaba-〖十二〗Springcloud-Stream-整合Rockermq"><a href="#Springcloud-Alibaba-〖十二〗Springcloud-Stream-整合Rockermq" class="headerlink" title="Springcloud-Alibaba 〖十二〗Springcloud Stream 整合Rockermq"></a>Springcloud-Alibaba 〖十二〗Springcloud Stream 整合Rockermq</h3><ul><li><ul><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#PS_githubhttpsgithubcomktokingspringcloudalibaba_1" target="_blank" rel="noopener">PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#__3" target="_blank" rel="noopener">一. 消息总线先放放,感觉现在用不到</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#_Springcloud_Stream_19" target="_blank" rel="noopener">二. Springcloud Stream</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#Rocketmq_httpsblogcsdnnetkingtokarticledetails104212625_22" target="_blank" rel="noopener">没Rocketmq基础的同学来这: <a href="https://blog.csdn.net/kingtok/article/details/104212625" target="_blank" rel="noopener">来看这里!!!</a>之前早已准备好的博客~~</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#_module_cloudstreamrocketmqprovider8801__27" target="_blank" rel="noopener">三. 新建module cloud-stream-rocketmq-provider8801 消息提供者</a></p></li><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#31__28" target="_blank" rel="noopener">3.1 项目结构</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#32_pom_30" target="_blank" rel="noopener">3.2 pom</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#33_applicationyml_89" target="_blank" rel="noopener">3.3 application.yml</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#35__123" target="_blank" rel="noopener">3.5 主启动类</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#36__142" target="_blank" rel="noopener">3.6 业务类</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105195944#controller_143" target="_blank" rel="noopener">controller层</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105195944#service_166" target="_blank" rel="noopener">service接口</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105195944#_176" target="_blank" rel="noopener">实现类</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#37__206" target="_blank" rel="noopener">3.7 测试</a></p></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#_cloudstreamrabbitmqconsumer8802_268" target="_blank" rel="noopener">四. 新建模块cloud-stream-rabbitmq-consumer8802为消费者</a></p></li><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#41_pom_269" target="_blank" rel="noopener">4.1 pom</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#42_applicationyml_326" target="_blank" rel="noopener">4.2 application.yml</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#43__362" target="_blank" rel="noopener">4.3 主启动类</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#44__380" target="_blank" rel="noopener">4.4 业务类</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105195944#controller_381" target="_blank" rel="noopener">controller层</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#45__407" target="_blank" rel="noopener">4.5 测试</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#48_yml_414" target="_blank" rel="noopener">4.8 yml详解(非本项目)</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#47__468" target="_blank" rel="noopener">4.7 重复消息</a></p></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#Springcloud_StreamRocketmqMQ_474" target="_blank" rel="noopener">Springcloud Stream篇完,本篇使用的是Rocketmq,简化了MQ底层的操作,配置了一套简洁版的消息服务~</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105195944#_475" target="_blank" rel="noopener">转载请标注~</a></p></li></ul></li></ul></li></ul><h3 id="PS-github仓库仓库地址项目都放到里面了"><a href="#PS-github仓库仓库地址项目都放到里面了" class="headerlink" title="PS: github仓库仓库地址项目都放到里面了"></a>PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</h3><p><strong>强烈建议先去看我的Rocketmq: <a href="https://blog.csdn.net/kingtok/article/details/104212625" target="_blank" rel="noopener">Rocketmq集群搭建</a></strong></p><h3 id="一-消息总线先放放-感觉现在用不到"><a href="#一-消息总线先放放-感觉现在用不到" class="headerlink" title="一. 消息总线先放放,感觉现在用不到"></a>一. 消息总线先放放,感觉现在用不到</h3><p><strong>给大家看看原理</strong><br><img src="https://img-blog.csdnimg.cn/20200330115224889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200330120421585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架,<br>它整合了Java的事件处理机制和消息中间件的功能。Spring Clud Bus目前支持<strong>RabbitMQ和Kafka。</strong></p><p><strong>什么是总线？</strong></p><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便的广播一些需要让其他连接在该主题上的实例都知道的消息。</p><p><strong>基本原理</strong></p><p>ConfigClient 实例都监听MQ中同一个topic（默认是springcloubus），当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其他监听统一topic的服务就能得到通知，然后去更新自身的配置。</p><h3 id="二-Springcloud-Stream"><a href="#二-Springcloud-Stream" class="headerlink" title="二. Springcloud Stream"></a>二. Springcloud Stream</h3><p><strong>这里头比较铁啊,因为用的是springcloud-alibaba,所以自然肯定要用巴巴的rocketmq啊,而且之前还学过,配过集群环境与控制台,那我们就尝试一下Rocketmq嘻嘻~</strong></p><h3 id="没Rocketmq基础的同学来这-来看这里-之前早已准备好的博客"><a href="#没Rocketmq基础的同学来这-来看这里-之前早已准备好的博客" class="headerlink" title="没Rocketmq基础的同学来这: 来看这里!!!之前早已准备好的博客~~"></a>没Rocketmq基础的同学来这: <a href="https://blog.csdn.net/kingtok/article/details/104212625" target="_blank" rel="noopener">来看这里!!!</a>之前早已准备好的博客~~</h3><p><img src="https://img-blog.csdnimg.cn/2020033019132858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>stream遵循发布订阅模式</strong><br><img src="https://img-blog.csdnimg.cn/20200330194049594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三-新建module-cloud-stream-rocketmq-provider8801-消息提供者"><a href="#三-新建module-cloud-stream-rocketmq-provider8801-消息提供者" class="headerlink" title="三. 新建module cloud-stream-rocketmq-provider8801 消息提供者"></a>三. 新建module cloud-stream-rocketmq-provider8801 消息提供者</h3><h4 id="3-1-项目结构"><a href="#3-1-项目结构" class="headerlink" title="3.1 项目结构"></a>3.1 项目结构</h4><p><img src="https://img-blog.csdnimg.cn/20200330215615987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-2-pom"><a href="#3-2-pom" class="headerlink" title="3.2 pom"></a>3.2 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rocketmq-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--stream-rocketmq--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556</span><br></pre></td></tr></table></figure><h4 id="3-3-application-yml"><a href="#3-3-application-yml" class="headerlink" title="3.3 application.yml"></a>3.3 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">namesrv-addr:</span> <span class="string">公网IP1:9876,公网IP2:9876</span></span><br><span class="line">      <span class="comment"># 定义name为output的binding</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 定义name为output的binding</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">springboot-mq</span> <span class="comment">#相当于topic</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">        <span class="comment"># 定义name为input的binding</span></span><br><span class="line"><span class="comment">#        input1:</span></span><br><span class="line"><span class="comment">#          destination: test-topic</span></span><br><span class="line"><span class="comment">#          content-type: application/json</span></span><br><span class="line"><span class="comment">#          group: test-group</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#客户端进行eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span>  <span class="comment">#设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment">#在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment">#访问的路径变为IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930</span></span><br></pre></td></tr></table></figure><h4 id="3-5-主启动类"><a href="#3-5-主启动类" class="headerlink" title="3.5 主启动类"></a>3.5 主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8801</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8801<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><h4 id="3-6-业务类"><a href="#3-6-业务类" class="headerlink" title="3.6 业务类"></a>3.6 业务类</h4><h5 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure><h5 id="service接口"><a href="#service接口" class="headerlink" title="service接口"></a>service接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h5 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Source;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding</span>(Source<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">"*****serial: "</span> +serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h4 id="3-7-测试"><a href="#3-7-测试" class="headerlink" title="3.7 测试"></a>3.7 测试</h4><p><strong>这里测试类,我们用之前Rocketmq章结用的一个consumer来监听这个topic下所有tags</strong><br><strong>也可以不用一下测试类,因为还要导pom,之后再写一个8802项目作为服务消费者</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">12345</span><br><span class="line">package com.itheima.mq.rocketmq.base.consumer;</span><br><span class="line"></span><br><span class="line">import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line">import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line">import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line">import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line">import org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line">import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息的接受者</span><br><span class="line"> */</span><br><span class="line">public class Consumer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //1.创建消费者Consumer，制定消费者组名</span><br><span class="line">        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("group1");</span><br><span class="line">        //2.指定Nameserver地址</span><br><span class="line">        consumer.setNamesrvAddr("一号服务器公网IP:9876;二号服务器公网IP:9876");</span><br><span class="line">        //3.订阅主题Topic和Tag</span><br><span class="line">        consumer.subscribe("springboot-mq", "*");</span><br><span class="line"></span><br><span class="line">        consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener(new MessageListenerConcurrently() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public ConsumeConcurrentlyStatus consumeMessage(List<span class="tag">&lt;<span class="name">MessageExt</span>&gt;</span> list, ConsumeConcurrentlyContext consumeConcurrentlyContext) &#123;</span><br><span class="line"></span><br><span class="line">                for (MessageExt messageExt : list) &#123;</span><br><span class="line">                    String rt=new String(messageExt.getBody());</span><br><span class="line">                    System.out.println(rt);</span><br><span class="line">                &#125;</span><br><span class="line">                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //5.启动消费者consumer</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142</span><br></pre></td></tr></table></figure><p><strong>这里我们访问服务 <a href="http://localhost:8801/sendMessage,这时就会像我们Rocketmq里发一条消息,我们用consumer就可以实时的监听到" target="_blank" rel="noopener">http://localhost:8801/sendMessage,这时就会像我们Rocketmq里发一条消息,我们用consumer就可以实时的监听到</a></strong><br><img src="https://img-blog.csdnimg.cn/20200330222349974.png" alt="在这里插入图片描述"><br><strong>这里是打印出了Message所有信息</strong><br><img src="https://img-blog.csdnimg.cn/20200330220954697.png" alt="在这里插入图片描述"><br><strong>这里打印出了刚发送的消息</strong><br><img src="https://img-blog.csdnimg.cn/202003302224003.png" alt="在这里插入图片描述"></p><h3 id="四-新建模块cloud-stream-rabbitmq-consumer8802为消费者"><a href="#四-新建模块cloud-stream-rabbitmq-consumer8802为消费者" class="headerlink" title="四. 新建模块cloud-stream-rabbitmq-consumer8802为消费者"></a>四. 新建模块cloud-stream-rabbitmq-consumer8802为消费者</h3><h4 id="4-1-pom"><a href="#4-1-pom" class="headerlink" title="4.1 pom"></a>4.1 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rocketmq-consumer8802<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--stream-rocketmq--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253</span><br></pre></td></tr></table></figure><h4 id="4-2-application-yml"><a href="#4-2-application-yml" class="headerlink" title="4.2 application.yml"></a>4.2 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rocketmq-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">namesrv-addr:</span> <span class="string">一号服务器IP:9876;二号服务器IP:9876</span></span><br><span class="line">      <span class="comment"># 定义name为output的binding</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line"><span class="comment">#        output: # 定义name为output的binding</span></span><br><span class="line"><span class="comment">#          destination: springboot-mq</span></span><br><span class="line"><span class="comment">#          content-type: application/json</span></span><br><span class="line">        <span class="comment"># 定义name为input的binding</span></span><br><span class="line">        <span class="attr">input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">springboot-mq</span>  <span class="comment">#消费哪个topic</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">group1</span>  <span class="comment">#定义消费者组名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#客户端进行eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span>  <span class="comment">#设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">recive-8802.com</span>  <span class="comment">#在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment">#访问的路径变为IP地址</span></span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132</span></span><br></pre></td></tr></table></figure><h4 id="4-3-主启动类"><a href="#4-3-主启动类" class="headerlink" title="4.3 主启动类"></a>4.3 主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQmMain8802</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQmMain8802<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h4 id="4-4-业务类"><a href="#4-4-业务类" class="headerlink" title="4.4 业务类"></a>4.4 业务类</h4><h5 id="controller层-1"><a href="#controller层-1" class="headerlink" title="controller层"></a>controller层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者1号，-------&gt;接收到的消息： "</span>+message.getPayload()+<span class="string">"\t port: "</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h4 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h4><p><strong>我们把7001注册中心,8801生产者,8802消费者都启动起来,这时我们去调用8801的方法生成随机订单号发给消息队列,8802立马监听到了相同topic下的消息,并把消息打在公屏上</strong><br><img src="https://img-blog.csdnimg.cn/20200330225322181.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200330225337884.png" alt="8801"><br><img src="https://img-blog.csdnimg.cn/20200330225402124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="8802"><br><strong>这时候我们rocketmq控制台也有了相对应的曲线与分析</strong><br><img src="https://img-blog.csdnimg.cn/20200330225636174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-8-yml详解-非本项目"><a href="#4-8-yml详解-非本项目" class="headerlink" title="4.8 yml详解(非本项目)"></a>4.8 yml详解(非本项目)</h4><p><strong>消费者</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">stream:</span></span><br><span class="line">            <span class="attr">default-binder:</span> <span class="string">rocketmq</span></span><br><span class="line">            <span class="attr">rocketmq:</span></span><br><span class="line">                <span class="attr">binder:</span></span><br><span class="line">                    <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.179</span><span class="string">:9876</span></span><br><span class="line">                <span class="attr">bindings:</span></span><br><span class="line">                    <span class="comment">#自定义的名称 对应spring.cloud.stream.bindings.input1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="attr">input1:</span></span><br><span class="line">                        <span class="attr">consumer:</span></span><br><span class="line">                            <span class="attr">tags:</span> <span class="string">test-tag1</span> <span class="comment"># 订阅的tag，二级分类</span></span><br><span class="line">                            <span class="attr">orderly:</span> <span class="literal">false</span>  <span class="comment"># 是否按顺序消费</span></span><br><span class="line">            <span class="attr">bindings:</span></span><br><span class="line">                <span class="comment">#自定义的名称</span></span><br><span class="line">                <span class="attr">input1:</span></span><br><span class="line">                    <span class="attr">destination:</span> <span class="string">test-topic-user</span> <span class="comment"># 订阅的topic ,一级分类</span></span><br><span class="line">                    <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">                    <span class="attr">group:</span> <span class="string">test-input-group1</span>    <span class="comment">#group</span></span><br><span class="line">                    <span class="attr">consumer:</span></span><br><span class="line">                        <span class="attr">concurrency:</span> <span class="number">20</span></span><br><span class="line">                        <span class="attr">maxAttempts:</span> <span class="number">1</span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><p><strong>生产者</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">stream:</span></span><br><span class="line">            <span class="attr">default-binder:</span> <span class="string">rocketmq</span></span><br><span class="line">            <span class="attr">rocketmq:</span></span><br><span class="line">                <span class="attr">binder:</span></span><br><span class="line">                    <span class="comment">#rocketmq地址</span></span><br><span class="line">                    <span class="attr">name-server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.78</span><span class="string">:9876</span></span><br><span class="line">                <span class="attr">bindings:</span></span><br><span class="line">                    <span class="comment">#自定义的名称 对应spring.cloud.stream.bindings.output1</span></span><br><span class="line">                    <span class="attr">output1:</span></span><br><span class="line">                        <span class="attr">producer:</span></span><br><span class="line">                            <span class="attr">group:</span> <span class="string">test-group-user-ouput1</span></span><br><span class="line">                            <span class="attr">sync:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#Binding: 包括 Input Binding 和 Output Binding。</span></span><br><span class="line">            <span class="comment">#Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，</span></span><br><span class="line">            <span class="comment">#实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。</span></span><br><span class="line">            <span class="attr">bindings:</span></span><br><span class="line">                <span class="comment">#自定义的名称</span></span><br><span class="line">                <span class="attr">output1:</span></span><br><span class="line">                    <span class="attr">destination:</span> <span class="string">test-topic-user</span>   <span class="comment"># topic(一级分类)</span></span><br><span class="line">                    <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h4 id="4-7-重复消息"><a href="#4-7-重复消息" class="headerlink" title="4.7 重复消息"></a>4.7 重复消息</h4><p><strong>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。</strong><br><strong>不同的组是可以消费的，同一个组内会发生竞争关系，只有其中 一个可以消费。</strong><br><img src="https://img-blog.csdnimg.cn/20200331112900219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>就是负载均衡的意思~指定相同组的消费者负载均衡的消费消息</strong></p><h3 id="Springcloud-Stream篇完-本篇使用的是Rocketmq-简化了MQ底层的操作-配置了一套简洁版的消息服务"><a href="#Springcloud-Stream篇完-本篇使用的是Rocketmq-简化了MQ底层的操作-配置了一套简洁版的消息服务" class="headerlink" title="Springcloud Stream篇完,本篇使用的是Rocketmq,简化了MQ底层的操作,配置了一套简洁版的消息服务~"></a>Springcloud Stream篇完,本篇使用的是Rocketmq,简化了MQ底层的操作,配置了一套简洁版的消息服务~</h3><h3 id="转载请标注"><a href="#转载请标注" class="headerlink" title="转载请标注~"></a>转载请标注~</h3>]]></content>
    
    <summary type="html">
    
      Springcloud-Alibaba
    
    </summary>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/categories/Springcloud-Alibaba/"/>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/tags/Springcloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Vue 02：MVVM模式和第一个Vue程序</title>
    <link href="https://somunstao.github.io/2020/04/12/Vue%2002%EF%BC%9AMVVM%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AAVue%E7%A8%8B%E5%BA%8F/"/>
    <id>https://somunstao.github.io/2020/04/12/Vue%2002%EF%BC%9AMVVM%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AAVue%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-08-01T15:16:10.772Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h1 id="Vue：MVVM模式和第一个Vue程序"><a href="#Vue：MVVM模式和第一个Vue程序" class="headerlink" title="Vue：MVVM模式和第一个Vue程序"></a>Vue：MVVM模式和第一个Vue程序</h1><h2 id="什么是-MVVM"><a href="#什么是-MVVM" class="headerlink" title="什么是 MVVM"></a>什么是 MVVM</h2><p>MVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF） 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由 John Gossman（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。</p><p>MVVM 源自于经典的 MVC（Model-View-Controller）模式。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，其作用如下：</p><ul><li>该层向上与视图层进行双向数据绑定</li><li>向下与 Model 层通过接口请求进行数据交互<br><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1897504213.png" alt="20191017111649.png"></li></ul><p>MVVM 已经相当成熟了，主要运用但不仅仅在网络应用程序开发中。当下流行的 MVVM 框架有 <code>Vue.js</code>，<code>AngularJS</code> 等。</p><h2 id="为什么要使用-MVVM"><a href="#为什么要使用-MVVM" class="headerlink" title="为什么要使用 MVVM"></a>为什么要使用 MVVM</h2><p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p><ul><li><strong>低耦合</strong>： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li><li><strong>可复用</strong>： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li><li><strong>独立开发</strong>： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li><li><strong>可测试</strong>： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li></ul><h2 id="MVVM-的组成部分"><a href="#MVVM-的组成部分" class="headerlink" title="MVVM 的组成部分"></a>MVVM 的组成部分</h2><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1552878682.png" alt="20191017111955.png"></p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>View 是视图层，也就是用户界面。前端主要由 <code>HTML</code> 和 <code>CSS</code> 来构建，为了更方便地展现 <code>ViewModel</code> 或者 <code>Model</code> 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 <code>接口规则</code></p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p><p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的</p><ul><li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）</li><li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）</li></ul><p>视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</p><p>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 <code>事件驱动编程</code>。</p><p>View 层展现的不是 <code>Model</code> 层的数据，而是 <code>ViewModel</code> 的数据，由 <code>ViewModel</code> 负责与 <code>Model</code> 层交互，这就<strong>完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</strong></p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架，发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库（如：vue-router，vue-resource，vuex）或既有项目整合。</p><h3 id="MVVM-模式的实现者"><a href="#MVVM-模式的实现者" class="headerlink" title="MVVM 模式的实现者"></a>MVVM 模式的实现者</h3><ul><li>Model：模型层，在这里表示 JavaScript 对象</li><li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li><li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li></ul><p>在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者</p><ul><li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li><li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变</li></ul><p>至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定</p><h3 id="为什么要使用-Vue-js"><a href="#为什么要使用-Vue-js" class="headerlink" title="为什么要使用 Vue.js"></a>为什么要使用 Vue.js</h3><ul><li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li><li>移动优先。更适合移动端，比如移动端的 Touch 事件</li><li>易上手，学习曲线平稳，文档齐全</li><li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li><li>开源，社区活跃度高</li><li>……</li></ul><h2 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h2><p>【说明】IDEA 可以安装 Vue 的插件！</p><p>注意：Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul><li>开发版本<ul><li>包含完整的警告和调试模式：<a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a></li><li>删除了警告，30.96KB min + gzip：<a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></li></ul></li><li>CDN<ul><li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li><li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ul><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>Vue.js 的核心是实现了 MVVM 模式，她扮演的角色就是 ViewModel 层，那么所谓的第一个应用程序就是展示她的 数据绑定 功能，操作流程如下：</p><p><strong>1、创建一个 HTML 文件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;狂神说&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>2、引入 Vue.js</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>3、创建一个 Vue 的实例</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;Hello Vue!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>说明:</p><ul><li><code>el:&#39;#vue&#39;</code>：绑定元素的 ID</li><li><code>data:{message:&#39;Hello Vue!&#39;}</code>：数据对象中有一个名为 message 的属性，并设置了初始值 Hello Vue!</li></ul><p><strong>4、将数据绑定到页面元素</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>说明：只需要在绑定的元素中使用 双花括号 将 Vue 创建的名为 message 属性包裹起来，即可实现数据绑定功能，也就实现了 ViewModel 层所需的效果，是不是和 EL 表达式非常像？</p><h3 id="完整的-HTML"><a href="#完整的-HTML" class="headerlink" title="完整的 HTML"></a>完整的 HTML</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;第一个 Vue 应用程序&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--View--&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue&quot;&gt;</span><br><span class="line">     &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.5.21&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F; var vm &#x3D; new Vue(&#123;&#125;); &#x2F;&#x2F;ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#vue&#39;,</span><br><span class="line">        data: &#123; &#x2F;&#x2F;Model</span><br><span class="line">            message: &#39;Hello Vue!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>为了能够更直观的体验 Vue 带来的数据绑定功能，我们需要在浏览器测试一番，操作流程如下：</p><p>1、在浏览器上运行第一个 Vue 应用程序，进入 开发者工具</p><p>2、在控制台输入 vm.message = ‘Hello World’ ，然后 回车，你会发现浏览器中显示的内容会直接变成 Hello World</p><p>此时就可以在控制台直接输入 vm.message 来修改值，中间是可以省略 data 的，在这个操作中，我并没有主动操作 DOM，就让页面的内容发生了变化，这就是借助了 Vue 的 数据绑定 功能实现的；MVVM 模式中要求 ViewModel 层就是使用 观察者模式 来实现数据的监听与绑定，以做到数据与视图的快速响应。</p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离MVVM
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud-Alibaba 〖十一〗SpringConfig 主配置中心与从配置中心单价,动态刷新实现</title>
    <link href="https://somunstao.github.io/2020/04/11/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%B8%80%E3%80%97SpringConfig%20%E4%B8%BB%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B8%8E%E4%BB%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%8D%95%E4%BB%B7,%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E5%AE%9E%E7%8E%B0/"/>
    <id>https://somunstao.github.io/2020/04/11/Springcloud-Alibaba%20%E3%80%96%E5%8D%81%E4%B8%80%E3%80%97SpringConfig%20%E4%B8%BB%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%B8%8E%E4%BB%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%8D%95%E4%BB%B7,%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-04-10T16:00:00.000Z</published>
    <updated>2020-08-02T04:25:48.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springcloud-Alibaba-〖十一〗SpringConfig-主配置中心与从配置中心单价-动态刷新实现"><a href="#Springcloud-Alibaba-〖十一〗SpringConfig-主配置中心与从配置中心单价-动态刷新实现" class="headerlink" title="Springcloud-Alibaba 〖十一〗SpringConfig 主配置中心与从配置中心单价,动态刷新实现"></a>Springcloud-Alibaba 〖十一〗SpringConfig 主配置中心与从配置中心单价,动态刷新实现</h1><h3 id="Springcloud-Alibaba-〖十一〗Config"><a href="#Springcloud-Alibaba-〖十一〗Config" class="headerlink" title="Springcloud-Alibaba 〖十一〗Config"></a>Springcloud-Alibaba 〖十一〗Config</h3><ul><li><ul><li><ul><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#PS_githubhttpsgithubcomktokingspringcloudalibaba_1" target="_blank" rel="noopener">PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#__2" target="_blank" rel="noopener">一. 分布式架构面临的问题</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#_Config_10" target="_blank" rel="noopener">二. Config能干吗?</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#__module_cloudconfigcenter3344cloud_17" target="_blank" rel="noopener">三. 新建module cloud-config-center-3344，是cloud的配置中心模块</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#31__19" target="_blank" rel="noopener">3.1 项目目录</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#32_pom_21" target="_blank" rel="noopener">3.2 pom</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#33_applicationyml_74" target="_blank" rel="noopener">3.3 application.yml</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#34__100" target="_blank" rel="noopener">3.4 主启动类</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#35__118" target="_blank" rel="noopener">3.5 测试</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#36__129" target="_blank" rel="noopener">3.6 总结</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#__module_cloudconfigclient3355_134" target="_blank" rel="noopener">四. 新建客户端module cloud-config-client-3355</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#41__143" target="_blank" rel="noopener">4.1 项目目录</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#42_pom_146" target="_blank" rel="noopener">4.2 pom</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#43_bootstrapyml_202" target="_blank" rel="noopener">4.3 bootstrap.yml</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#44__229" target="_blank" rel="noopener">4.4 主启动</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#45__247" target="_blank" rel="noopener">4.5 业务类</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#46__275" target="_blank" rel="noopener">4.6 测试</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#__279" target="_blank" rel="noopener">五. 分布式配置动态刷新</a></p></li><li><ul><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#51__294" target="_blank" rel="noopener">5.1 测试</a></li><li><a href="https://blog.csdn.net/kingtok/article/details/105178367#52__310" target="_blank" rel="noopener">5.2 但是还是存在问题~</a></li></ul></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#SpringConfig_316" target="_blank" rel="noopener">哈哈,下一篇消息总线见~本篇SpringConfig完</a></p></li><li><p><a href="https://blog.csdn.net/kingtok/article/details/105178367#_317" target="_blank" rel="noopener">关注+点赞不迷路,转载请标注!</a></p></li></ul></li></ul></li></ul><h3 id="PS-github仓库仓库地址项目都放到里面了"><a href="#PS-github仓库仓库地址项目都放到里面了" class="headerlink" title="PS: github仓库仓库地址项目都放到里面了"></a>PS: github仓库<a href="https://github.com/ktoking/springcloud-alibaba" target="_blank" rel="noopener">仓库地址</a>项目都放到里面了</h3><h3 id="一-分布式架构面临的问题"><a href="#一-分布式架构面临的问题" class="headerlink" title="一. 分布式架构面临的问题"></a>一. 分布式架构面临的问题</h3><p>微服务意味着要将单体应用中的业务拆分成一个个子服务, 每个服务的粒度相对较小，因此系统中会出现大量的服务。于每个服务都需要必要的配置信息才能运行，<strong>所以一套集中式的、动态的配置管理设施是必不可少的</strong>。</p><p><strong>配置中心架构图</strong><br><img src="https://img-blog.csdnimg.cn/20200329202944157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持,配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</strong></p><h3 id="二-Config能干吗"><a href="#二-Config能干吗" class="headerlink" title="二. Config能干吗?"></a>二. Config能干吗?</h3><ul><li><strong>集中管理配置文件</strong></li><li><strong>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</strong></li><li><strong>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件,服务会向配置中心统一一拉取配置自己的信息</strong></li><li><strong>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</strong></li><li><strong>将配置信息以REST接口的形式暴露</strong></li></ul><h3 id="三-新建module-cloud-config-center-3344，是cloud的配置中心模块"><a href="#三-新建module-cloud-config-center-3344，是cloud的配置中心模块" class="headerlink" title="三. 新建module cloud-config-center-3344，是cloud的配置中心模块"></a>三. 新建module cloud-config-center-3344，是cloud的配置中心模块</h3><h4 id="3-1-项目目录"><a href="#3-1-项目目录" class="headerlink" title="3.1 项目目录"></a>3.1 项目目录</h4><p><img src="https://img-blog.csdnimg.cn/20200329181241974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3-2-pom"><a href="#3-2-pom" class="headerlink" title="3.2 pom"></a>3.2 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span><br></pre></td></tr></table></figure><h4 id="3-3-application-yml"><a href="#3-3-application-yml" class="headerlink" title="3.3 application.yml"></a>3.3 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/你自己的仓库名/springcloud-config.git</span> <span class="comment">#github仓库上面的git仓库名字</span></span><br><span class="line">          <span class="comment">##搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">#读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span> <span class="comment">#注册进eureka</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h4 id="3-4-主启动类"><a href="#3-4-主启动类" class="headerlink" title="3.4 主启动类"></a>3.4 主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h4 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5 测试"></a>3.5 测试</h4><p><strong>这里首先要去github新建一个仓库</strong><br><img src="https://img-blog.csdnimg.cn/20200329183638541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>启动7001与3344项目</strong></p><p><strong>访问<a href="http://localhost:3344/master/config-dev.yml可以看见到我们已经可以访问到github上的文件了" target="_blank" rel="noopener">http://localhost:3344/master/config-dev.yml可以看见到我们已经可以访问到github上的文件了</a></strong></p><p><img src="https://img-blog.csdnimg.cn/20200329181538183.png" alt="在这里插入图片描述"><br><strong>若是找不到配置,就会返回一个空的{}</strong><br><img src="https://img-blog.csdnimg.cn/20200329182723377.png" alt="在这里插入图片描述"></p><h4 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h4><p><strong>之前在yml配置文件里面是这样配置的</strong><br><img src="https://img-blog.csdnimg.cn/20200329182258589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>当启动我们的3344项目时,可以通过三种方法找到配置文件并读取</strong><br><img src="https://img-blog.csdnimg.cn/20200329182031482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四-新建客户端module-cloud-config-client-3355"><a href="#四-新建客户端module-cloud-config-client-3355" class="headerlink" title="四. 新建客户端module cloud-config-client-3355"></a>四. 新建客户端module cloud-config-client-3355</h3><ul><li><strong>applicaiton. yml是用户级的资源配置项</strong></li><li><strong>bootstrap. yml是系统级的，优先级更加高</strong></li></ul><p>Spring Clould会创建一个”Bootstrap Context” , 作为Spring应用的Application Context的父上下文。初始化的时候，BootstrapContext’负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。<br><strong>Bootstrap’属性有高优先级，默认情况下，它们不会被本地配置覆盖。</strong> Bootstrap context’和Application Context有着不同的约定，所以新增了一个bootstrap.ymI文件, 保证Bootstrap Context’和Application Context配置的分离。<br>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的,<br>因为<strong>bootstrap.ym是比application.yml先加载的</strong>。bootstrap.yml优先级高于application.yml</p><h4 id="4-1-项目目录"><a href="#4-1-项目目录" class="headerlink" title="4.1 项目目录"></a>4.1 项目目录</h4><p><img src="https://img-blog.csdnimg.cn/20200329195610195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-2-pom"><a href="#4-2-pom" class="headerlink" title="4.2 pom"></a>4.2 pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aiguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不带server了，说明是客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051</span><br></pre></td></tr></table></figure><h4 id="4-3-bootstrap-yml"><a href="#4-3-bootstrap-yml" class="headerlink" title="4.3 bootstrap.yml"></a>4.3 bootstrap.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称 上述3个综合：master分支上config-dev.yml的配置文件被读取 http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址 表示通过这个服务端访问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001.com/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h4 id="4-4-主启动"><a href="#4-4-主启动" class="headerlink" title="4.4 主启动"></a>4.4 主启动</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3355<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h4 id="4-5-业务类"><a href="#4-5-业务类" class="headerlink" title="4.5 业务类"></a>4.5 业务类</h4><p><strong>controller层</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;  <span class="comment">//要访问的3344上的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)<span class="comment">//请求地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure><p><strong>这里我们返回从3344主配置中心获取的config.info配置值</strong></p><h4 id="4-6-测试"><a href="#4-6-测试" class="headerlink" title="4.6 测试"></a>4.6 测试</h4><p><img src="https://img-blog.csdnimg.cn/20200329195939707.png" alt="在这里插入图片描述"><br><strong>成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</strong></p><h3 id="五-分布式配置动态刷新"><a href="#五-分布式配置动态刷新" class="headerlink" title="五. 分布式配置动态刷新"></a>五. 分布式配置动态刷新</h3><p><strong>yml配置文件新增</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200329201856130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>controller层新增一个注解@RefreshScope</strong><br><img src="https://img-blog.csdnimg.cn/20200329201944115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmd0b2s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="5-1-测试"><a href="#5-1-测试" class="headerlink" title="5.1 测试"></a>5.1 测试</h4><p><strong>这里我们修改以下github上配置的版本信息</strong><br><img src="https://img-blog.csdnimg.cn/20200329202149800.png" alt="在这里插入图片描述"><br><strong>再来访问一下3344项目的总配置,发现改变了</strong><br><img src="https://img-blog.csdnimg.cn/20200329202325832.png" alt="在这里插入图片描述"><br><strong>当我们访问3355项目的得到配置呢?</strong><br><img src="https://img-blog.csdnimg.cn/20200329202438105.png" alt="在这里插入图片描述"><br><strong>发现还是1,这里就需要给3355发一条post请求来激活动态配置</strong></p><p>这里往命令窗口扔一条命令即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST "http://localhost:3355/actuator/refresh"</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>成功刷新配置信息</strong><br><img src="https://img-blog.csdnimg.cn/20200329202733574.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200329202752392.png" alt="在这里插入图片描述"></p><h4 id="5-2-但是还是存在问题"><a href="#5-2-但是还是存在问题" class="headerlink" title="5.2 但是还是存在问题~"></a>5.2 但是还是存在问题~</h4><ul><li><strong>假如有多个微服务客户端3355/3366/3377。。。。。。+</strong></li><li><strong>每个微服务都要执行一次post请求 ，手动刷新?</strong></li><li><strong>可否广播，一次通知，处处生效?</strong></li><li><strong>我们想大范围刷新呢?</strong></li></ul><h3 id="哈哈-下一篇消息总线见-本篇SpringConfig完"><a href="#哈哈-下一篇消息总线见-本篇SpringConfig完" class="headerlink" title="哈哈,下一篇消息总线见~本篇SpringConfig完"></a>哈哈,下一篇消息总线见~本篇SpringConfig完</h3><h3 id="关注-点赞不迷路-转载请标注"><a href="#关注-点赞不迷路-转载请标注" class="headerlink" title="关注+点赞不迷路,转载请标注!"></a>关注+点赞不迷路,转载请标注!</h3>]]></content>
    
    <summary type="html">
    
      Springcloud-Alibaba
    
    </summary>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/categories/Springcloud-Alibaba/"/>
    
    
      <category term="Springcloud-Alibaba" scheme="https://SomunsTao.github.io/tags/Springcloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Vue 01：前端体系、前后端分离</title>
    <link href="https://somunstao.github.io/2020/04/11/Vue%2001%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%BD%93%E7%B3%BB%E3%80%81%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>https://somunstao.github.io/2020/04/11/Vue%2001%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%BD%93%E7%B3%BB%E3%80%81%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</id>
    <published>2020-04-10T16:00:00.000Z</published>
    <updated>2020-08-01T15:15:51.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue：前端体系、前后端分离"><a href="#Vue：前端体系、前后端分离" class="headerlink" title="Vue：前端体系、前后端分离"></a>Vue：前端体系、前后端分离</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>，发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。<strong>Vue 的核心库只关注视图层</strong>，不仅易于上手，还便于与第三方库（如：<code>vue-router：跳转</code>，<code>vue-resource：通信</code>，<code>vuex：管理</code>）或既有项目整合。</p><p>官网：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p><h2 id="2、前端知识体系"><a href="#2、前端知识体系" class="headerlink" title="2、前端知识体系"></a>2、前端知识体系</h2><p>想要成为真正的“互联网 Java 全栈工程师”还有很长的一段路要走，其中“我大前端”是绕不开的一门必修课。本阶段课程的主要目的就是带领我 Java 后台程序员认识前端、了解前端、掌握前端，为实现成为“互联网 Java 全栈工程师”再向前迈进一步。</p><h3 id="2-1、前端三要素"><a href="#2-1、前端三要素" class="headerlink" title="2.1、前端三要素"></a>2.1、前端三要素</h3><ul><li>HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容</li><li>CSS（表现）：层叠样式表（Cascading Style Sheets），设定网页的表现样式</li><li>JavaScript（行为）：是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行，用于控制网页的行为</li></ul><h3 id="2-2、结构层（HTML）"><a href="#2-2、结构层（HTML）" class="headerlink" title="2.2、结构层（HTML）"></a>2.2、结构层（HTML）</h3><p>太简单，略</p><h3 id="2-3、表现层（CSS）"><a href="#2-3、表现层（CSS）" class="headerlink" title="2.3、表现层（CSS）"></a>2.3、表现层（CSS）</h3><p>CSS 层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说就是不具备任何语法支持，它主要缺陷如下：</p><ul><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护；</li></ul><p>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为 <strong>【CSS 预处理器】</strong> 的工具，提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大提高了前端在样式上的开发效率。</p><h3 id="什么是-CSS-预处理器"><a href="#什么是-CSS-预处理器" class="headerlink" title="什么是 CSS 预处理器"></a>什么是 CSS 预处理器</h3><p>CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行 CSS 的编码工作。转化成通俗易懂的话来说就是“<strong>用一种专门的编程语言，进行 Web 页面样式设计，再通过编译器转化为正常的 CSS 文件，以供项目使用</strong>”。</p><p><strong>常用的 CSS 预处理器有哪些</strong></p><ul><li>SASS：基于 Ruby，通过服务端处理，功能强大。解析效率高。需要学习 Ruby 语言，上手难度高于 LESS。</li><li>LESS：基于 NodeJS，通过客户端处理，使用简单。功能比 SASS 简单，解析效率也低于 SASS，但在实际开发中足够了，所以我们后台人员如果需要的话，建议使用 LESS。</li></ul><h3 id="2-4、行为层（JavaScript）"><a href="#2-4、行为层（JavaScript）" class="headerlink" title="2.4、行为层（JavaScript）"></a>2.4、行为层（JavaScript）</h3><p>JavaScript 一门弱类型脚本语言，其源代码在发往客户端运行之前不需经过编译，而是将文本格式的字符代码发送给浏览器由浏览器解释运行。</p><p><strong>Native 原生 JS 开发</strong></p><p>原生 JS 开发，也就是让我们按照 <strong>【ECMAScript】</strong> 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间，ES 标准已发布如下版本：</p><ul><li>ES3</li><li>ES4（内部，未正式发布）</li><li>ES5（全浏览器支持）</li><li>ES6（常用，当前主流版本：webpack打包成为ES5支持！）</li><li>ES7</li><li>ES8</li><li>ES9（草案阶段）</li></ul><p>区别就是逐步增加新特性。</p><p><strong>TypeScript 微软的标准</strong></p><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格（C#、Delphi、TypeScript 之父；.NET 创立者）主导。</p><p>该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）才能被浏览器正确执行。</p><h3 id="JavaScript-框架"><a href="#JavaScript-框架" class="headerlink" title="JavaScript 框架"></a>JavaScript 框架</h3><ul><li>jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；</li><li>Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点是将后台的 MVC 模式搬到了前端并增加了<strong>模块化开发</strong>的理念，与微软合作，采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；最大的缺点是版本迭代不合理（如：1代 -&gt; 2代，除了名字，基本就是两个东西；截止发表博客时已推出了 Angular6）</li><li>React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了新概念 <strong>【虚拟 DOM】</strong> 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 <strong>【JSX】</strong> 语言；</li><li><code>Vue</code>：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化） 和 React（虚拟 DOM） 的优点；</li><li><code>Axios</code>：前端通信框架；因为 <code>Vue</code> 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以直接选择使用 jQuery 提供的 AJAX 通信功能；</li></ul><h3 id="UI-框架"><a href="#UI-框架" class="headerlink" title="UI 框架"></a>UI 框架</h3><ul><li>Ant-Design：阿里巴巴出品，基于 React 的 UI 框架</li><li>ElementUI、iview、ice：饿了么出品，基于 Vue 的 UI 框架</li><li>Bootstrap：Twitter 推出的一个用于前端开发的开源工具包</li><li>AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架</li></ul><h3 id="JavaScript-构建工具"><a href="#JavaScript-构建工具" class="headerlink" title="JavaScript 构建工具"></a>JavaScript 构建工具</h3><ul><li>Babel：JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript</li><li>WebPack：模块打包器，主要作用是打包、压缩、合并及按序加载</li></ul><p><strong>注：以上知识点已将 WebApp 开发所需技能全部梳理完毕</strong></p><h2 id="2-5、三端统一"><a href="#2-5、三端统一" class="headerlink" title="2.5、三端统一"></a>2.5、三端统一</h2><h3 id="混合开发（Hybrid-App）"><a href="#混合开发（Hybrid-App）" class="headerlink" title="混合开发（Hybrid App）"></a>混合开发（Hybrid App）</h3><p>主要目的是实现一套代码三端统一（PC、Android：.apk 、iOS: .ipa ）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p><ul><li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li><li>本地打包： Cordova（前身是 PhoneGap）</li></ul><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUI</p><h2 id="2-6、后端技术"><a href="#2-6、后端技术" class="headerlink" title="2.6、后端技术"></a>2.6、后端技术</h2><p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。</p><p>NodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno</p><p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：</p><ul><li>Express：NodeJS 框架</li><li>Koa：Express 简化版</li><li>NPM：项目综合管理工具，类似于 Maven</li><li>YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系</li></ul><h3 id="2-7、主流前端框架"><a href="#2-7、主流前端框架" class="headerlink" title="2.7、主流前端框架"></a>2.7、主流前端框架</h3><p><strong>Vue.js</strong></p><h3 id="iView"><a href="#iView" class="headerlink" title="iView"></a>iView</h3><p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p><ul><li><a href="https://www.iviewui.com/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/TalkingData/iview-weapp" target="_blank" rel="noopener">Github</a></li><li><a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">iview-admin</a></li></ul><p><strong>备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</strong></p><h3 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h3><p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</p><ul><li><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/ElementUI/element-starter" target="_blank" rel="noopener">Github</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a></li></ul><p><strong>备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</strong></p><h3 id="ICE"><a href="#ICE" class="headerlink" title="ICE"></a>ICE</h3><p>飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p><ul><li><a href="https://alibaba.github.io/ice" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/alibaba/ice" target="_blank" rel="noopener">Github</a></li></ul><p><strong>备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段</strong></p><h3 id="VantUI"><a href="#VantUI" class="headerlink" title="VantUI"></a>VantUI</h3><p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p><ul><li><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/youzan/vant" target="_blank" rel="noopener">Github</a></li></ul><h3 id="AtUI"><a href="#AtUI" class="headerlink" title="AtUI"></a>AtUI</h3><p>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。</p><ul><li><a href="https://at-ui.github.io/at-ui/#/zh" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/at-ui/at-ui" target="_blank" rel="noopener">Github</a></li></ul><h3 id="CubeUI"><a href="#CubeUI" class="headerlink" title="CubeUI"></a>CubeUI</h3><p>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p><ul><li><a href="https://didi.github.io/cube-ui/#/zh-CN" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/didi/cube-ui/" target="_blank" rel="noopener">Github</a></li></ul><h3 id="混合开发"><a href="#混合开发" class="headerlink" title="混合开发"></a>混合开发</h3><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p><ul><li><a href="http://doc.flutter-dev.cn/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/flutter/flutter" target="_blank" rel="noopener">Github</a></li></ul><p><strong>备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</strong></p><h3 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h3><p>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。</p><ul><li><a href="https://ionicframework.com/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://ionicframework.com/docs/" target="_blank" rel="noopener">官网文档</a></li><li><a href="https://github.com/ionic-team/ionic" target="_blank" rel="noopener">Github</a></li></ul><h3 id="微信小程序-1"><a href="#微信小程序-1" class="headerlink" title="微信小程序"></a>微信小程序</h3><h3 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h3><p>mpvue 是美团开发的一个使用 <code>Vue.js</code> 开发小程序的前端框架，目前支持 <strong>微信小程序</strong>、<strong>百度智能小程序</strong>，<strong>头条小程序</strong> 和 <strong>支付宝小程序</strong>。 框架基于 <code>Vue.js</code>，修改了的运行时框架 <code>runtime</code> 和代码编译器 <code>compiler</code> 实现，使其可运行在小程序环境中，从而为小程序开发引入了 <code>Vue.js</code> 开发体验。</p><ul><li><a href="http://mpvue.com/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">Github</a></li></ul><p><strong>备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</strong></p><h3 id="WeUI"><a href="#WeUI" class="headerlink" title="WeUI"></a>WeUI</h3><p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。</p><ul><li><a href="https://weui.io/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://github.com/weui/weui.git" target="_blank" rel="noopener">Github</a></li></ul><h2 id="3、了解前后分离的演变史"><a href="#3、了解前后分离的演变史" class="headerlink" title="3、了解前后分离的演变史"></a>3、了解前后分离的演变史</h2><p><strong>为什么需要前后分离</strong></p><h3 id="3-1、后端为主的-MVC-时代"><a href="#3-1、后端为主的-MVC-时代" class="headerlink" title="3.1、后端为主的 MVC 时代"></a>3.1、后端为主的 MVC 时代</h3><p>为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，就是后端的 MVC 时代;</p><p>以 <code>SpringMVC</code> 流程为例：</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/1982474755.png" alt="Lusifer2018120811230001.png"></p><ul><li>发起请求到前端控制器(<code>DispatcherServlet</code>)</li><li>前端控制器请求 <code>HandlerMapping</code> 查找 <code>Handler</code>，可以根据 <code>xml</code> 配置、注解进行查找</li><li>处理器映射器 <code>HandlerMapping</code> 向前端控制器返回 <code>Handler</code></li><li>前端控制器调用处理器适配器去执行 <code>Handler</code></li><li>处理器适配器去执行 <code>Handler</code></li><li><code>Handler</code> 执行完成给适配器返回 <code>ModelAndView</code></li><li>处理器适配器向前端控制器返回 <code>ModelAndView</code>，<code>ModelAndView</code> 是 <code>SpringMVC</code> 框架的一个底层对象，包括 <code>Model</code> 和 <code>View</code></li><li>前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图(<code>JSP</code>)</li><li>视图解析器向前端控制器返回 <code>View</code></li><li>前端控制器进行视图渲染，视图渲染将模型数据(在 <code>ModelAndView</code> 对象中)填充到 <code>request</code> 域</li><li>前端控制器向用户响应结果</li></ul><p><strong>优点</strong></p><p>MVC 是一个非常好的协作模式，能够有效降低代码的耦合度，从架构上能够让开发者明白代码应该写在哪里。为了让 View 更纯粹，还可以使用 Thymeleaf、Freemarker 等模板引擎，使模板里无法写入 Java 代码，让前后端分工更加清晰。</p><p><strong>缺点</strong></p><ul><li>前端开发重度依赖开发环境，开发效率低，这种架构下，前后端协作有两种模式：<ul><li>第一种是前端写 DEMO，写好后，让后端去套模板。好处是 DEMO 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大；</li><li>另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</li></ul></li><li>前后端职责纠缠不清：模板引擎功能强大，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 <code>Controller</code>，页面路由等功能本应该是前端最关注的，但却是由后端来实现。 <code>Controller</code> 本身与 <code>Model</code> 往往也会纠缠不清，看了让人咬牙的业务代码经常会出现在 <code>Controller</code> 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。</li><li>对前端发挥的局限性：性能优化如果只在前端做空间非常有限，于是我们经常需要后端合作，但由于后端框架限制，我们很难使用 <a href="https://www.ibm.com/developerworks/cn/web/wa-lo-comet/index.html" target="_blank" rel="noopener"><strong>【Comet】</strong></a>、<a href="https://segmentfault.com/a/1190000002998812" target="_blank" rel="noopener"><strong>【BigPipe】</strong></a> 等技术方案来优化性能。</li></ul><p><strong>注：在这期间（2005 年以前），包括早期的 JSP、PHP 可以称之为 Web 1.0 时代。在这里想说一句，如果你是一名 Java 初学者，请你不要再把一些陈旧的技术当回事了，比如 JSP，因为时代在变、技术在变、什么都在变（引用扎克伯格的一句话：唯一不变的是变化本身）；当我们去给大学做实训时，有些同学会认为我们没有讲什么 干货 ，其实不然，只能说是你认知里的干货对于市场来说早就过时了而已。</strong></p><h3 id="3-2、基于-AJAX-带来的-SPA-时代"><a href="#3-2、基于-AJAX-带来的-SPA-时代" class="headerlink" title="3.2、基于 AJAX 带来的 SPA 时代"></a>3.2、基于 AJAX 带来的 SPA 时代</h3><p>时间回到 2005 年 <code>AJAX</code>（Asynchronous JavaScript And XML，异步 JavaScript 和 XML，老技术新用法） 被正式提出并开始使用 <code>CDN</code> 作为静态资源存储，于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA（Single Page Application）单页面应用时代。</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2422752164.png" alt="Lusifer201812090001.png"></p><p><strong>优点</strong></p><p>这种模式下，<strong>前后端的分工非常清晰，前后端的关键协作点是 AJAX 接口</strong>。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，<strong>这个时代开始出现浏览器端的分层架构</strong>：</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/287702245.png" alt="Lusifer201812090002.png"></p><p><strong>缺点</strong></p><ul><li><strong>前后端接口的约定：</strong> 如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦；不少团队也有类似尝试，通过接口规则、接口平台等方式来做。<strong>有了和后端一起沉淀的 接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发</strong>。</li><li><strong>前端开发的复杂度控制：</strong> SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。</li></ul><h3 id="3-3、前端为主的-MV-时代"><a href="#3-3、前端为主的-MV-时代" class="headerlink" title="3.3、前端为主的 MV* 时代"></a>3.3、前端为主的 MV* 时代</h3><p>此处的 MV* 模式如下：</p><ul><li>MVC（同步通信为主）：Model、View、Controller</li><li>MVP（异步通信为主）：Model、View、Presenter</li><li>MVVM（异步通信为主）：Model、View、ViewModel</li></ul><p>为了降低前端开发复杂度，涌现了大量的前端框架，比如：<code>AngularJS</code>、<code>React</code>、<code>Vue.js</code>、<code>EmberJS</code>等，这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2242308737.png" alt="Lusifer201812090003.png"></p><p><strong>优点</strong></p><ul><li><strong>前后端职责很清晰：</strong> 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful等接口。</li><li><strong>前端开发的复杂度可控：</strong> 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。</li><li><strong>部署相对独立：</strong> 可以快速改进产品体验</li></ul><p><strong>缺点</strong></p><ul><li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li><li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。</li><li>性能并非最佳，特别是移动互联网环境下。</li><li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。</li></ul><h3 id="3-4、NodeJS-带来的全栈时代"><a href="#3-4、NodeJS-带来的全栈时代" class="headerlink" title="3.4、NodeJS 带来的全栈时代"></a>3.4、NodeJS 带来的全栈时代</h3><p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3703089123.jpg" alt="63918611gw1efj2vvjwtfj20ge0gzab9.jpg"></p><p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p><ul><li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。</li><li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。</li></ul><p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。</p><p>与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。</p><p>基于 NodeJS 的全栈模式，依旧面临很多挑战：</p><ul><li>需要前端对服务端编程有更进一步的认识。比如 TCP/IP 等网络知识的掌握。</li><li>NodeJS 层与 Java 层的高效通信。NodeJS 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。</li><li>对部署、运维层面的熟练了解，需要更多知识点和实操经验。</li><li>大量历史遗留问题如何过渡。这可能是最大最大的阻力。</li></ul><p><strong>注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。</strong></p><p><strong>全栈！So Easy！╮(￣▽￣)╭！</strong></p><h3 id="3-5、总结"><a href="#3-5、总结" class="headerlink" title="3.5、总结"></a>3.5、总结</h3><p>综上所述，模式也好，技术也罢，没有好坏优劣之分，只有适合不适合；前后分离的开发思想主要是基于 <code>SoC</code>（关注度分离原则），上面种种模式，都是让前后端的职责更清晰，分工更合理高效。</p>]]></content>
    
    <summary type="html">
    
      前端体系、前后端分离
    
    </summary>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://SomunsTao.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
